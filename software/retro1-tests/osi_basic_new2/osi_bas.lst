ca65 V2.15 - Git a85ac88
Main file   : osi_bas.s
Current file: osi_bas.s

000000r 1               .setcpu "65C02"
000000r 1               .include "acia.s65"
000000r 2               ACIA        = $A000
000000r 2               ACIA_CTRL   = ACIA+3
000000r 2               ACIA_CMD    = ACIA+2
000000r 2               ACIA_SR     = ACIA+1
000000r 2               ACIA_DAT    = ACIA
000000r 2               MSGL      = $2C ;register low byte for message
000000r 2               MSGH      = $2D ;register high byte for message
000000r 2               
000000r 2  A9 1F        ACIA_INIT:	LDA #$1F        ;* Init ACIA to 19200 Baud.
000002r 2  8D 03 A0                 STA ACIA_CTRL
000005r 2  A9 0B                    LDA #$0B        ;* No Parity.
000007r 2  8D 02 A0                 STA ACIA_CMD
00000Ar 2               
00000Ar 2  60                       RTS
00000Br 2               
00000Br 2               ACIA_WRITE:
00000Br 2  48                       PHA             ;*Save A
00000Cr 2  29 7F                    AND #$7F        ;*Change to "standard ASCII"
00000Er 2               ACIA_SEND:
00000Er 2  8D 00 A0                 STA ACIA_DAT    ;*Send it.
000011r 2               ACIA_WAIT_TXD:
000011r 2  AD 01 A0                 LDA ACIA_SR     ;*Load status register for ACIA
000014r 2  29 10                    AND #$10        ;*Mask bit 4.
000016r 2  F0 F9                    BEQ    ACIA_WAIT_TXD    ;*ACIA not done yet, wait.
000018r 2  68                       PLA             ;*Restore A
000019r 2               
000019r 2  60                       RTS              ;*Done, over and out...
00001Ar 2               
00001Ar 2               ACIA_SHWMSG:
00001Ar 2  A0 00                    LDY #$0         ;for y = 0 to length of message{acia_write}
00001Cr 2               ACIA_PRINT:
00001Cr 2  B1 2C                    LDA (MSGL),Y
00001Er 2  F0 06                    BEQ ACIA_DONE
000020r 2  20 rr rr                 JSR ACIA_WRITE
000023r 2  C8                       INY
000024r 2  D0 F6                    BNE ACIA_PRINT
000026r 2               ACIA_DONE:
000026r 2  60                       RTS
000027r 2               
000027r 1               .feature force_range
000027r 1               
000027r 1               ; Microsoft BASIC for 6502 (OSI VERSION)
000027r 1               ;
000027r 1               ; ==================================================================================
000027r 1               ; MODIFIED FROM THE ORIGINAL FILES AT http://www.pagetable.com/?p=46
000027r 1               ; MERGED INTO ONE FILE AND MACROS AND CONDITIONAL STATEMENTS REMOVED
000027r 1               ; BY G. SEARLE 2013
000027r 1               ;
000027r 1               ; I/O and dummy load/saves added to the end of this code
000027r 1               ;
000027r 1               ; This then assembles to the OSI version with the following
000027r 1               ; minor changes to the original BASIC code:
000027r 1               ; 1. Control-C call changed
000027r 1               ; 2. Load/save calls changed
000027r 1               ; 3. RAM start set to $0200 instead of $0300
000027r 1               ; 4. ROM start set to $C000
000027r 1               ; 5. Second letter of error messages back to ASCII value (instead of $80+val)
000027r 1               ; ==================================================================================
000027r 1               ;
000027r 1               ; Extract of original header comments follows:
000027r 1               ;
000027r 1               ; (first revision of this distribution, 20 Oct 2008, Michael Steil www.pagetable.com)
000027r 1               ;
000027r 1               ;
000027r 1               ; Name                 Release   MS Version    ROM   9digit  INPUTBUFFER   extensions
000027r 1               ;---------------------------------------------------------------------------------------------------
000027r 1               ; OSI BASIC             1977     1.0 REV 3.2    Y      N          ZP            -
000027r 1               ;
000027r 1               ; Credits:
000027r 1               ; * main work by Michael Steil
000027r 1               ; * function names and all uppercase comments taken from Bob Sander-Cederlof's excellent AppleSoft II disassembly:
000027r 1               ;   http://www.txbobsc.com/scsc/scdocumentor/
000027r 1               ; * Applesoft lite by Tom Greene http://cowgod.org/replica1/applesoft/ helped a lot, too.
000027r 1               ; * Thanks to Joe Zbicak for help with Intellision Keyboard BASIC
000027r 1               ; * This work is dedicated to the memory of my dear hacking pal Michael "acidity" Kollmann.
000027r 1               
000027r 1               .debuginfo +
000027r 1               
000027r 1               .macpack longbranch
000027r 2               .macro  jeq     Target
000027r 2                       .if     .match(Target, 0)
000027r 2                       bne     *+5
000027r 2                       jmp     Target
000027r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000027r 2                               beq     Target
000027r 2                       .else
000027r 2                               bne     *+5
000027r 2                               jmp     Target
000027r 2                       .endif
000027r 2               .endmacro
000027r 2               .macro  jne     Target
000027r 2                       .if     .match(Target, 0)
000027r 2                               beq     *+5
000027r 2                               jmp     Target
000027r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000027r 2                               bne     Target
000027r 2                       .else
000027r 2                               beq     *+5
000027r 2                               jmp     Target
000027r 2                       .endif
000027r 2               .endmacro
000027r 2               .macro  jmi     Target
000027r 2                       .if     .match(Target, 0)
000027r 2                               bpl     *+5
000027r 2                               jmp     Target
000027r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000027r 2                               bmi     Target
000027r 2                       .else
000027r 2                               bpl     *+5
000027r 2                               jmp     Target
000027r 2                       .endif
000027r 2               .endmacro
000027r 2               .macro  jpl     Target
000027r 2                       .if     .match(Target, 0)
000027r 2                               bmi     *+5
000027r 2                               jmp     Target
000027r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000027r 2                               bpl     Target
000027r 2                       .else
000027r 2                               bmi     *+5
000027r 2                               jmp     Target
000027r 2                       .endif
000027r 2               .endmacro
000027r 2               .macro  jcs     Target
000027r 2                       .if     .match(Target, 0)
000027r 2                               bcc     *+5
000027r 2                               jmp     Target
000027r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000027r 2                               bcs     Target
000027r 2                       .else
000027r 2                               bcc     *+5
000027r 2                               jmp     Target
000027r 2                       .endif
000027r 2               .endmacro
000027r 2               .macro  jcc     Target
000027r 2                       .if     .match(Target, 0)
000027r 2                               bcs     *+5
000027r 2                               jmp     Target
000027r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000027r 2                               bcc     Target
000027r 2                       .else
000027r 2                               bcs     *+5
000027r 2                               jmp     Target
000027r 2                       .endif
000027r 2               .endmacro
000027r 2               .macro  jvs     Target
000027r 2                       .if     .match(Target, 0)
000027r 2                               bvc     *+5
000027r 2                               jmp     Target
000027r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000027r 2                               bvs     Target
000027r 2                       .else
000027r 2                               bvc     *+5
000027r 2                               jmp     Target
000027r 2                       .endif
000027r 2               .endmacro
000027r 2               .macro  jvc     Target
000027r 2                       .if     .match(Target, 0)
000027r 2                               bvs     *+5
000027r 2                               jmp     Target
000027r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000027r 2                               bvc     Target
000027r 2                       .else
000027r 2                               bvs     *+5
000027r 2                               jmp     Target
000027r 2                       .endif
000027r 2               .endmacro
000027r 2               
000027r 1               
000027r 1               ; zero page
000027r 1               ZP_START1 = $00
000027r 1               ZP_START2 = $0D
000027r 1               ZP_START3 = $5B
000027r 1               ZP_START4 = $65
000027r 1               
000027r 1               ;extra ZP variables
000027r 1               USR             := $000A
000027r 1               
000027r 1               ; constants
000027r 1               STACK_TOP		:= $FC
000027r 1               SPACE_FOR_GOSUB := $33
000027r 1               NULL_MAX		:= $0A
000027r 1               WIDTH			:= 72
000027r 1               WIDTH2			:= 56
000027r 1               
000027r 1               ; memory layout
000027r 1               RAMSTART2		:= $0200
000027r 1               BYTES_FP		:= 4
000027r 1               BYTES_PER_ELEMENT := BYTES_FP
000027r 1               BYTES_PER_VARIABLE := BYTES_FP+2
000027r 1               MANTISSA_BYTES	:= BYTES_FP-1
000027r 1               BYTES_PER_FRAME := 2*BYTES_FP+8
000027r 1               FOR_STACK1		:= 2*BYTES_FP+5
000027r 1               FOR_STACK2		:= BYTES_FP+4
000027r 1               MAX_EXPON = 10
000027r 1               STACK           := $0100
000027r 1               
000027r 1               INPUTBUFFERX = INPUTBUFFER & $FF00
000027r 1               
000027r 1               CR=13
000027r 1               LF=10
000027r 1               
000027r 1               CRLF_1 := CR
000027r 1               CRLF_2 := LF
000027r 1               
000027r 1               .feature org_per_seg
000027r 1               .zeropage
000000r 1               .org $0000
000000  1               .org ZP_START1
000000  1               GORESTART:
000000  1  xx xx xx     	.res 3
000003  1               GOSTROUT:
000003  1  xx xx xx     	.res 3
000006  1               GOAYINT:
000006  1  xx xx        	.res 2
000008  1               GOGIVEAYF:
000008  1  xx xx        	.res 2
00000A  1               
00000A  1               .org ZP_START2
00000D  1               Z15:
00000D  1  xx           	.res 1
00000E  1               POSX:
00000E  1  xx           	.res 1
00000F  1               Z17:
00000F  1  xx           	.res 1
000010  1               Z18:
000010  1  xx           	.res 1
000011  1               LINNUM:
000011  1               TXPSV:
000011  1  xx xx        	.res 2
000013  1               INPUTBUFFER:
000013  1               
000013  1               .org ZP_START3
00005B  1               CHARAC:
00005B  1  xx           	.res 1
00005C  1               ENDCHR:
00005C  1  xx           	.res 1
00005D  1               EOLPNTR:
00005D  1  xx           	.res 1
00005E  1               DIMFLG:
00005E  1  xx           	.res 1
00005F  1               VALTYP:
00005F  1  xx           	.res 1
000060  1               DATAFLG:
000060  1  xx           	.res 1
000061  1               SUBFLG:
000061  1  xx           	.res 1
000062  1               INPUTFLG:
000062  1  xx           	.res 1
000063  1               CPRMASK:
000063  1  xx           	.res 1
000064  1               Z14:
000064  1  xx           	.res 1
000065  1               
000065  1               .org ZP_START4
000065  1               TEMPPT:
000065  1  xx           	.res 1
000066  1               LASTPT:
000066  1  xx xx        	.res 2
000068  1               TEMPST:
000068  1  xx xx xx xx  	.res 9
00006C  1  xx xx xx xx  
000070  1  xx           
000071  1               INDEX:
000071  1  xx xx        	.res 2
000073  1               DEST:
000073  1  xx xx        	.res 2
000075  1               RESULT:
000075  1  xx xx xx xx  	.res BYTES_FP
000079  1               RESULT_LAST = RESULT + BYTES_FP-1
000079  1               TXTTAB:
000079  1  xx xx        	.res 2
00007B  1               VARTAB:
00007B  1  xx xx        	.res 2
00007D  1               ARYTAB:
00007D  1  xx xx        	.res 2
00007F  1               STREND:
00007F  1  xx xx        	.res 2
000081  1               FRETOP:
000081  1  xx xx        	.res 2
000083  1               FRESPC:
000083  1  xx xx        	.res 2
000085  1               MEMSIZ:
000085  1  xx xx        	.res 2
000087  1               CURLIN:
000087  1  xx xx        	.res 2
000089  1               OLDLIN:
000089  1  xx xx        	.res 2
00008B  1               OLDTEXT:
00008B  1  xx xx        	.res 2
00008D  1               Z8C:
00008D  1  xx xx        	.res 2
00008F  1               DATPTR:
00008F  1  xx xx        	.res 2
000091  1               INPTR:
000091  1  xx xx        	.res 2
000093  1               VARNAM:
000093  1  xx xx        	.res 2
000095  1               VARPNT:
000095  1  xx xx        	.res 2
000097  1               FORPNT:
000097  1  xx xx        	.res 2
000099  1               LASTOP:
000099  1  xx xx        	.res 2
00009B  1               CPRTYP:
00009B  1  xx           	.res 1
00009C  1               FNCNAM:
00009C  1               TEMP3:
00009C  1  xx xx        	.res 2
00009E  1               DSCPTR:
00009E  1  xx xx        	.res 2
0000A0  1               DSCLEN:
0000A0  1  xx xx        	.res 2
0000A2  1               JMPADRS	:= DSCLEN + 1
0000A2  1               
0000A2  1               Z52:
0000A2  1  xx           	.res 1
0000A3  1               ARGEXTENSION:
0000A3  1               TEMP1:
0000A3  1  xx           	.res 1
0000A4  1               HIGHDS:
0000A4  1  xx xx        	.res 2
0000A6  1               HIGHTR:
0000A6  1  xx xx        	.res 2
0000A8  1               INDX:
0000A8  1               TMPEXP:
0000A8  1               TEMP2:
0000A8  1  xx           	.res 1
0000A9  1               EXPON:
0000A9  1  xx           	.res 1
0000AA  1               LOWTR:
0000AA  1               LOWTRX:
0000AA  1  xx           	.res 1
0000AB  1               EXPSGN:
0000AB  1  xx           	.res 1
0000AC  1               FAC:
0000AC  1  xx xx xx xx  	.res BYTES_FP
0000B0  1               FAC_LAST = FAC + BYTES_FP-1
0000B0  1               FACSIGN:
0000B0  1  xx           	.res 1
0000B1  1               SERLEN:
0000B1  1  xx           	.res 1
0000B2  1               SHIFTSIGNEXT:
0000B2  1  xx           	.res 1
0000B3  1               ARG:
0000B3  1  xx xx xx xx  	.res BYTES_FP
0000B7  1               ARG_LAST = ARG + BYTES_FP-1
0000B7  1               ARGSIGN:
0000B7  1  xx           	.res 1
0000B8  1               STRNG1:
0000B8  1  xx xx        	.res 2
0000BA  1               SGNCPR = STRNG1
0000BA  1               FACEXTENSION = STRNG1+1
0000BA  1               STRNG2:
0000BA  1  xx xx        	.res 2
0000BC  1               CHRGET:
0000BC  1               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
0000BC  1               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
0000BC  1               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
0000BC  1               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
0000BC  1               
0000BC  1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr                  .word   nmi
000002r 1  rr rr                  .word   reset
000004r 1  rr rr                  .word   irq
000006r 1               
000006r 1                         .code
000027r 1               
000027r 1  4C rr rr     reset:				jmp Reset
00002Ar 1               
00002Ar 1  40           nmi:					rti
00002Br 1               
00002Br 1  40           irq:					rti
00002Cr 1               
00002Cr 1               ACIA_STATUS_RX_FULL    = 1 << 3
00002Cr 1               
00002Cr 1               TOKEN_ADDRESS_TABLE:
00002Cr 1  rr rr        		.word END-1
00002Er 1  rr rr        		.word FOR-1
000030r 1  rr rr        		.word NEXT-1
000032r 1  rr rr        		.word DATA-1
000034r 1  rr rr        		.word INPUT-1
000036r 1  rr rr        		.word DIM-1
000038r 1  rr rr        		.word READ-1
00003Ar 1  rr rr        		.word LET-1
00003Cr 1               TOKEN_GOTO=$80+(*-TOKEN_ADDRESS_TABLE)/2
00003Cr 1  rr rr        		.word GOTO-1
00003Er 1  rr rr        		.word RUN-1
000040r 1  rr rr        		.word IF-1
000042r 1  rr rr        		.word RESTORE-1
000044r 1               TOKEN_GOSUB=$80+(*-TOKEN_ADDRESS_TABLE)/2
000044r 1  rr rr        		.word GOSUB-1
000046r 1  rr rr        		.word POP-1
000048r 1               TOKEN_REM=$80+(*-TOKEN_ADDRESS_TABLE)/2
000048r 1  rr rr        		.word REM-1
00004Ar 1  rr rr        		.word STOP-1
00004Cr 1  rr rr        		.word ON-1
00004Er 1  rr rr        		.word NULL-1
000050r 1  rr rr        		.word WAIT-1
000052r 1  rr rr        		.word LOAD-1
000054r 1  rr rr        		.word SAVE-1
000056r 1  rr rr        		.word DEF-1
000058r 1  rr rr        		.word POKE-1
00005Ar 1               TOKEN_PRINT=$80+(*-TOKEN_ADDRESS_TABLE)/2
00005Ar 1  rr rr        		.word PRINT-1
00005Cr 1  rr rr        		.word CONT-1
00005Er 1  rr rr        		.word LIST-1
000060r 1  rr rr        		.word CLEAR-1
000062r 1  rr rr        		.word NEW-1
000064r 1               TOKEN_TAB=$00+$80+(*-TOKEN_ADDRESS_TABLE)/2
000064r 1               TOKEN_TO=$01+$80+(*-TOKEN_ADDRESS_TABLE)/2
000064r 1               TOKEN_FN=$02+$80+(*-TOKEN_ADDRESS_TABLE)/2
000064r 1               TOKEN_SPC=$03+$80+(*-TOKEN_ADDRESS_TABLE)/2
000064r 1               TOKEN_THEN=$04+$80+(*-TOKEN_ADDRESS_TABLE)/2
000064r 1               TOKEN_NOT=$05+$80+(*-TOKEN_ADDRESS_TABLE)/2
000064r 1               TOKEN_STEP=$06+$80+(*-TOKEN_ADDRESS_TABLE)/2
000064r 1               TOKEN_PLUS=$07+$80+(*-TOKEN_ADDRESS_TABLE)/2
000064r 1               TOKEN_MINUS=$08+$80+(*-TOKEN_ADDRESS_TABLE)/2
000064r 1               TOKEN_GREATER=$0E+$80+(*-TOKEN_ADDRESS_TABLE)/2
000064r 1               TOKEN_EQUAL=$0F+$80+(*-TOKEN_ADDRESS_TABLE)/2
000064r 1               NUM_TOKENS=(*-TOKEN_ADDRESS_TABLE)/2
000064r 1               
000064r 1               UNFNC:
000064r 1               TOKEN_SGN=$11+$80+(*-TOKEN_ADDRESS_TABLE)/2
000064r 1  rr rr        		.word SGN
000066r 1  rr rr        		.word INT
000068r 1  rr rr        		.word ABS
00006Ar 1  0A 00        		.word USR
00006Cr 1  rr rr        		.word FRE
00006Er 1  rr rr        		.word POS
000070r 1  rr rr        		.word SQR
000072r 1  rr rr        		.word RND
000074r 1  rr rr        		.word LOG
000076r 1  rr rr        		.word EXP
000078r 1  rr rr        		.word COS
00007Ar 1  rr rr        		.word SIN
00007Cr 1  rr rr        		.word TAN
00007Er 1  rr rr        		.word ATN
000080r 1  rr rr        		.word PEEK
000082r 1  rr rr        		.word LEN
000084r 1  rr rr        		.word STR
000086r 1  rr rr        		.word VAL
000088r 1  rr rr        		.word ASC
00008Ar 1  rr rr        		.word CHRSTR
00008Cr 1               TOKEN_LEFTSTR=$11+$80+(*-TOKEN_ADDRESS_TABLE)/2
00008Cr 1  rr rr        		.word LEFTSTR
00008Er 1  rr rr        		.word RIGHTSTR
000090r 1  rr rr        		.word MIDSTR
000092r 1               
000092r 1               MATHTBL:
000092r 1  79                   .byte   $79
000093r 1  rr rr                .word   FADDT-1
000095r 1  79                   .byte   $79
000096r 1  rr rr                .word   FSUBT-1
000098r 1  7B                   .byte   $7B
000099r 1  rr rr                .word   FMULTT-1
00009Br 1  7B                   .byte   $7B
00009Cr 1  rr rr                .word   FDIVT-1
00009Er 1  7F                   .byte   $7F
00009Fr 1  rr rr                .word   FPWRT-1
0000A1r 1  50                   .byte   $50
0000A2r 1  rr rr                .word   TAND-1
0000A4r 1  46                   .byte   $46
0000A5r 1  rr rr                .word   OR-1
0000A7r 1  7D                   .byte   $7D
0000A8r 1  rr rr                .word   NEGOP-1
0000AAr 1  5A                   .byte   $5A
0000ABr 1  rr rr                .word   EQUOP-1
0000ADr 1  64                   .byte   $64
0000AEr 1  rr rr                .word   RELOPS-1
0000B0r 1               
0000B0r 1               TOKEN_NAME_TABLE:
0000B0r 1  45 4E C4     		.byte "EN", $80+'D'
0000B3r 1  46 4F D2     		.byte "FO", $80+'R'
0000B6r 1  4E 45 58 D4  		.byte "NEX", $80+'T'
0000BAr 1  44 41 54 C1  		.byte "DAT", $80+'A'
0000BEr 1  49 4E 50 55  		.byte "INPU", $80+'T'
0000C2r 1  D4           
0000C3r 1  44 49 CD     		.byte "DI", $80+'M'
0000C6r 1  52 45 41 C4  		.byte "REA", $80+'D'
0000CAr 1  4C 45 D4     		.byte "LE", $80+'T'
0000CDr 1  47 4F 54 CF  		.byte "GOT", $80+'O'
0000D1r 1  52 55 CE     		.byte "RU", $80+'N'
0000D4r 1  49 C6        		.byte "I", $80+'F'
0000D6r 1  52 45 53 54  		.byte "RESTOR", $80+'E'
0000DAr 1  4F 52 C5     
0000DDr 1  47 4F 53 55  		.byte "GOSU", $80+'B'
0000E1r 1  C2           
0000E2r 1  52 45 54 55  		.byte "RETUR", $80+'N'
0000E6r 1  52 CE        
0000E8r 1  52 45 CD     		.byte "RE", $80+'M'
0000EBr 1  53 54 4F D0  		.byte "STO", $80+'P'
0000EFr 1  4F CE        		.byte "O", $80+'N'
0000F1r 1  4E 55 4C CC  		.byte "NUL", $80+'L'
0000F5r 1  57 41 49 D4  		.byte "WAI", $80+'T'
0000F9r 1  4C 4F 41 C4  		.byte "LOA", $80+'D'
0000FDr 1  53 41 56 C5  		.byte "SAV", $80+'E'
000101r 1  44 45 C6     		.byte "DE", $80+'F'
000104r 1  50 4F 4B C5  		.byte "POK", $80+'E'
000108r 1  50 52 49 4E  		.byte "PRIN", $80+'T'
00010Cr 1  D4           
00010Dr 1  43 4F 4E D4  		.byte "CON", $80+'T'
000111r 1  4C 49 53 D4  		.byte "LIS", $80+'T'
000115r 1  43 4C 45 41  		.byte "CLEA", $80+'R'
000119r 1  D2           
00011Ar 1  4E 45 D7     		.byte "NE", $80+'W'
00011Dr 1  54 41 42 A8  		.byte "TAB", $80+'('
000121r 1  54 CF        		.byte "T", $80+'O'
000123r 1  46 CE        		.byte "F", $80+'N'
000125r 1  53 50 43 A8  		.byte "SPC", $80+'('
000129r 1  54 48 45 CE  		.byte "THE", $80+'N'
00012Dr 1  4E 4F D4     		.byte "NO", $80+'T'
000130r 1  53 54 45 D0  		.byte "STE", $80+'P'
000134r 1  AB           		.byte "", $80+'+'
000135r 1  AD           		.byte "", $80+'-'
000136r 1  AA           		.byte "", $80+'*'
000137r 1  AF           		.byte "", $80+'/'
000138r 1  DE           		.byte "", $80+'^'
000139r 1  41 4E C4     		.byte "AN", $80+'D'
00013Cr 1  4F D2        		.byte "O", $80+'R'
00013Er 1  BE           		.byte "", $80+'>'
00013Fr 1  BD           		.byte "", $80+'='
000140r 1  BC           		.byte "", $80+'<'
000141r 1  53 47 CE     		.byte "SG", $80+'N'
000144r 1  49 4E D4     		.byte "IN", $80+'T'
000147r 1  41 42 D3     		.byte "AB", $80+'S'
00014Ar 1  55 53 D2     		.byte "US", $80+'R'
00014Dr 1  46 52 C5     		.byte "FR", $80+'E'
000150r 1  50 4F D3     		.byte "PO", $80+'S'
000153r 1  53 51 D2     		.byte "SQ", $80+'R'
000156r 1  52 4E C4     		.byte "RN", $80+'D'
000159r 1  4C 4F C7     		.byte "LO", $80+'G'
00015Cr 1  45 58 D0     		.byte "EX", $80+'P'
00015Fr 1  43 4F D3     		.byte "CO", $80+'S'
000162r 1  53 49 CE     		.byte "SI", $80+'N'
000165r 1  54 41 CE     		.byte "TA", $80+'N'
000168r 1  41 54 CE     		.byte "AT", $80+'N'
00016Br 1  50 45 45 CB  		.byte "PEE", $80+'K'
00016Fr 1  4C 45 CE     		.byte "LE", $80+'N'
000172r 1  53 54 52 A4  		.byte "STR", $80+'$'
000176r 1  56 41 CC     		.byte "VA", $80+'L'
000179r 1  41 53 C3     		.byte "AS", $80+'C'
00017Cr 1  43 48 52 A4  		.byte "CHR", $80+'$'
000180r 1  4C 45 46 54  		.byte "LEFT", $80+'$'
000184r 1  A4           
000185r 1  52 49 47 48  		.byte "RIGHT", $80+'$'
000189r 1  54 A4        
00018Br 1  4D 49 44 A4  		.byte "MID", $80+'$'
00018Fr 1  00           		.byte   0
000190r 1               
000190r 1               ERROR_MESSAGES:
000190r 1               ERR_NOFOR := <(*-ERROR_MESSAGES)
000190r 1  4E 46                .byte "NF"
000192r 1               ERR_SYNTAX := <(*-ERROR_MESSAGES)
000192r 1  53 4E                .byte "SN"
000194r 1               ERR_NOGOSUB := <(*-ERROR_MESSAGES)
000194r 1  52 47                .byte "RG"
000196r 1               ERR_NODATA := <(*-ERROR_MESSAGES)
000196r 1  4F 44                .byte "OD"
000198r 1               ERR_ILLQTY := <(*-ERROR_MESSAGES)
000198r 1  46 43                .byte "FC"
00019Ar 1               ERR_OVERFLOW := <(*-ERROR_MESSAGES)
00019Ar 1  4F 56                .byte "OV"
00019Cr 1               ERR_MEMFULL := <(*-ERROR_MESSAGES)
00019Cr 1  4F 4D                .byte "OM"
00019Er 1               ERR_UNDEFSTAT := <(*-ERROR_MESSAGES)
00019Er 1  55 53                .byte "US"
0001A0r 1               ERR_BADSUBS := <(*-ERROR_MESSAGES)
0001A0r 1  42 53                .byte "BS"
0001A2r 1               ERR_REDIMD := <(*-ERROR_MESSAGES)
0001A2r 1  44 44                .byte "DD"
0001A4r 1               ERR_ZERODIV := <(*-ERROR_MESSAGES)
0001A4r 1  2F 30                .byte "/0"
0001A6r 1               ERR_ILLDIR := <(*-ERROR_MESSAGES)
0001A6r 1  49 44                .byte "ID"
0001A8r 1               ERR_BADTYPE := <(*-ERROR_MESSAGES)
0001A8r 1  54 4D                .byte "TM"
0001AAr 1               ERR_STRLONG := <(*-ERROR_MESSAGES)
0001AAr 1  4C 53                .byte "LS"
0001ACr 1               ERR_FRMCPX := <(*-ERROR_MESSAGES)
0001ACr 1  53 54                .byte "ST"
0001AEr 1               ERR_CANTCONT := <(*-ERROR_MESSAGES)
0001AEr 1  43 4E                .byte "CN"
0001B0r 1               ERR_UNDEFFN := <(*-ERROR_MESSAGES)
0001B0r 1  55 46                .byte "UF"
0001B2r 1               
0001B2r 1               ; global messages: "error", "in", "ready", "break"
0001B2r 1               QT_ERROR:
0001B2r 1  20 45 52 52          .byte   " ERROR"
0001B6r 1  4F 52        
0001B8r 1  00                   .byte   0
0001B9r 1               QT_IN:
0001B9r 1  20 49 4E 20          .byte   " IN "
0001BDr 1  00                   .byte   $00
0001BEr 1               QT_OK:
0001BEr 1  0D 0A 4F 4B  		.byte   CR,LF,"OK",CR,LF
0001C2r 1  0D 0A        
0001C4r 1  00           		.byte	0
0001C5r 1               QT_BREAK:
0001C5r 1  0D 0A 42 52  		.byte CR,LF,"BREAK"
0001C9r 1  45 41 4B     
0001CCr 1  00                   .byte   0
0001CDr 1               
0001CDr 1               ; generic stack and memory management code
0001CDr 1               ; this code is identical across all versions of
0001CDr 1               ; BASIC
0001CDr 1               ; ----------------------------------------------------------------------------
0001CDr 1               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
0001CDr 1               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
0001CDr 1               ;
0001CDr 1               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
0001CDr 1               ; 	= $XXFF IF CALLED FROM "RETURN"
0001CDr 1               ; 	<<< BUG: SHOULD BE $FFXX >>>
0001CDr 1               ;
0001CDr 1               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
0001CDr 1               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
0001CDr 1               ;
0001CDr 1               ;	.EQ. IF FOUND
0001CDr 1               ;	(X) = STACK PNTR OF FRAME FOUND
0001CDr 1               ; ----------------------------------------------------------------------------
0001CDr 1               GTFORPNT:
0001CDr 1  BA                   tsx
0001CEr 1  E8                   inx
0001CFr 1  E8                   inx
0001D0r 1  E8                   inx
0001D1r 1  E8                   inx
0001D2r 1               L2279:
0001D2r 1  BD 01 01             lda     STACK+1,x
0001D5r 1  C9 81                cmp     #$81
0001D7r 1  D0 21                bne     L22A1
0001D9r 1  A5 98                lda     FORPNT+1
0001DBr 1  D0 0A                bne     L228E
0001DDr 1  BD 02 01             lda     STACK+2,x
0001E0r 1  85 97                sta     FORPNT
0001E2r 1  BD 03 01             lda     STACK+3,x
0001E5r 1  85 98                sta     FORPNT+1
0001E7r 1               L228E:
0001E7r 1  DD 03 01             cmp     STACK+3,x
0001EAr 1  D0 07                bne     L229A
0001ECr 1  A5 97                lda     FORPNT
0001EEr 1  DD 02 01             cmp     STACK+2,x
0001F1r 1  F0 07                beq     L22A1
0001F3r 1               L229A:
0001F3r 1  8A                   txa
0001F4r 1  18                   clc
0001F5r 1  69 10                adc     #BYTES_PER_FRAME
0001F7r 1  AA                   tax
0001F8r 1  D0 D8                bne     L2279
0001FAr 1               L22A1:
0001FAr 1  60                   rts
0001FBr 1               ; ----------------------------------------------------------------------------
0001FBr 1               ; MOVE BLOCK OF MEMORY UP
0001FBr 1               ;
0001FBr 1               ; ON ENTRY:
0001FBr 1               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
0001FBr 1               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
0001FBr 1               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
0001FBr 1               ; ----------------------------------------------------------------------------
0001FBr 1               BLTU:
0001FBr 1  20 rr rr             jsr     REASON
0001FEr 1  85 7F                sta     STREND
000200r 1  84 80                sty     STREND+1
000202r 1               BLTU2:
000202r 1  38                   sec
000203r 1  A5 A6                lda     HIGHTR
000205r 1  E5 AA                sbc     LOWTR
000207r 1  85 71                sta     INDEX
000209r 1  A8                   tay
00020Ar 1  A5 A7                lda     HIGHTR+1
00020Cr 1  E5 AB                sbc     LOWTR+1
00020Er 1  AA                   tax
00020Fr 1  E8                   inx
000210r 1  98                   tya
000211r 1  F0 23                beq     L22DD
000213r 1  A5 A6                lda     HIGHTR
000215r 1  38                   sec
000216r 1  E5 71                sbc     INDEX
000218r 1  85 A6                sta     HIGHTR
00021Ar 1  B0 03                bcs     L22C6
00021Cr 1  C6 A7                dec     HIGHTR+1
00021Er 1  38                   sec
00021Fr 1               L22C6:
00021Fr 1  A5 A4                lda     HIGHDS
000221r 1  E5 71                sbc     INDEX
000223r 1  85 A4                sta     HIGHDS
000225r 1  B0 08                bcs     L22D6
000227r 1  C6 A5                dec     HIGHDS+1
000229r 1  90 04                bcc     L22D6
00022Br 1               L22D2:
00022Br 1  B1 A6                lda     (HIGHTR),y
00022Dr 1  91 A4                sta     (HIGHDS),y
00022Fr 1               L22D6:
00022Fr 1  88                   dey
000230r 1  D0 F9                bne     L22D2
000232r 1  B1 A6                lda     (HIGHTR),y
000234r 1  91 A4                sta     (HIGHDS),y
000236r 1               L22DD:
000236r 1  C6 A7                dec     HIGHTR+1
000238r 1  C6 A5                dec     HIGHDS+1
00023Ar 1  CA                   dex
00023Br 1  D0 F2                bne     L22D6
00023Dr 1  60                   rts
00023Er 1               ; ----------------------------------------------------------------------------
00023Er 1               ; CHECK IF ENOUGH ROOM LEFT ON STACK
00023Er 1               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
00023Er 1               ; ----------------------------------------------------------------------------
00023Er 1               CHKMEM:
00023Er 1  0A                   asl     a
00023Fr 1  69 33                adc     #SPACE_FOR_GOSUB
000241r 1  B0 35                bcs     MEMERR
000243r 1  85 71                sta     INDEX
000245r 1  BA                   tsx
000246r 1  E4 71                cpx     INDEX
000248r 1  90 2E                bcc     MEMERR
00024Ar 1  60                   rts
00024Br 1               ; ----------------------------------------------------------------------------
00024Br 1               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
00024Br 1               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
00024Br 1               ; ----------------------------------------------------------------------------
00024Br 1               REASON:
00024Br 1  C4 82                cpy     FRETOP+1
00024Dr 1  90 28                bcc     L231E
00024Fr 1  D0 04                bne     L22FC
000251r 1  C5 81                cmp     FRETOP
000253r 1  90 22                bcc     L231E
000255r 1               L22FC:
000255r 1  48                   pha
000256r 1  A2 08                ldx     #FAC-TEMP1-1
000258r 1  98                   tya
000259r 1               L2300:
000259r 1  48                   pha
00025Ar 1  B5 A3                lda     TEMP1,x
00025Cr 1  CA                   dex
00025Dr 1  10 FA                bpl     L2300
00025Fr 1  20 rr rr             jsr     GARBAG
000262r 1  A2 F8                ldx     #TEMP1-FAC+1
000264r 1               L230B:
000264r 1  68                   pla
000265r 1  95 AC                sta     FAC,x
000267r 1  E8                   inx
000268r 1  30 FA                bmi     L230B
00026Ar 1  68                   pla
00026Br 1  A8                   tay
00026Cr 1  68                   pla
00026Dr 1  C4 82                cpy     FRETOP+1
00026Fr 1  90 06                bcc     L231E
000271r 1  D0 05                bne     MEMERR
000273r 1  C5 81                cmp     FRETOP
000275r 1  B0 01                bcs     MEMERR
000277r 1               L231E:
000277r 1  60                   rts
000278r 1               MEMERR:
000278r 1  A2 0C                ldx     #ERR_MEMFULL
00027Ar 1               ; ----------------------------------------------------------------------------
00027Ar 1               ; HANDLE AN ERROR
00027Ar 1               ;
00027Ar 1               ; (X)=OFFSET IN ERROR MESSAGE TABLE
00027Ar 1               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
00027Ar 1               ; (CURLIN+1) = $FF IF IN DIRECT MODE
00027Ar 1               ; ----------------------------------------------------------------------------
00027Ar 1               ERROR:
00027Ar 1  46 64                lsr     Z14
00027Cr 1  20 rr rr             jsr     CRDO
00027Fr 1  20 rr rr             jsr     OUTQUES
000282r 1  BD rr rr             lda     ERROR_MESSAGES,x
000285r 1  20 rr rr             jsr     OUTDO
000288r 1  BD rr rr             lda     ERROR_MESSAGES+1,x
00028Br 1  20 rr rr             jsr     OUTDO
00028Er 1  20 rr rr             jsr     STKINI
000291r 1  A9 rr                lda     #<QT_ERROR
000293r 1  A0 rr                ldy     #>QT_ERROR
000295r 1               ; ----------------------------------------------------------------------------
000295r 1               ; PRINT STRING AT (Y,A)
000295r 1               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
000295r 1               ; FALL INTO WARM RESTART
000295r 1               ; ----------------------------------------------------------------------------
000295r 1               PRINT_ERROR_LINNUM:
000295r 1  20 rr rr             jsr     STROUT
000298r 1  A4 88                ldy     CURLIN+1
00029Ar 1  C8                   iny
00029Br 1  F0 03                beq     RESTART
00029Dr 1  20 rr rr             jsr     INPRT
0002A0r 1               ; ----------------------------------------------------------------------------
0002A0r 1               ; WARM RESTART ENTRY
0002A0r 1               ; ----------------------------------------------------------------------------
0002A0r 1               RESTART:
0002A0r 1  46 64                lsr     Z14
0002A2r 1  A9 rr                lda     #<QT_OK
0002A4r 1  A0 rr                ldy     #>QT_OK
0002A6r 1  20 03 00             jsr     GOSTROUT
0002A9r 1               L2351:
0002A9r 1  20 rr rr             jsr     INLIN
0002ACr 1  86 C3                stx     TXTPTR
0002AEr 1  84 C4                sty     TXTPTR+1
0002B0r 1  20 BC 00             jsr     CHRGET
0002B3r 1               ; bug in pre-1.1: CHRGET sets Z on '\0'
0002B3r 1               ; and ':' - a line starting with ':' in
0002B3r 1               ; direct mode gets ignored
0002B3r 1  F0 F4                beq     L2351
0002B5r 1  A2 FF                ldx     #$FF
0002B7r 1  86 88                stx     CURLIN+1
0002B9r 1  90 06                bcc     NUMBERED_LINE
0002BBr 1  20 rr rr             jsr     PARSE_INPUT_LINE
0002BEr 1  4C rr rr             jmp     NEWSTT2
0002C1r 1               ; ----------------------------------------------------------------------------
0002C1r 1               ; HANDLE NUMBERED LINE
0002C1r 1               ; ----------------------------------------------------------------------------
0002C1r 1               NUMBERED_LINE:
0002C1r 1  20 rr rr             jsr     LINGET
0002C4r 1  20 rr rr             jsr     PARSE_INPUT_LINE
0002C7r 1  84 5D                sty     EOLPNTR
0002C9r 1  20 rr rr             jsr     FNDLIN
0002CCr 1  90 44                bcc     PUT_NEW_LINE
0002CEr 1  A0 01                ldy     #$01
0002D0r 1  B1 AA                lda     (LOWTR),y
0002D2r 1  85 72                sta     INDEX+1
0002D4r 1  A5 7B                lda     VARTAB
0002D6r 1  85 71                sta     INDEX
0002D8r 1  A5 AB                lda     LOWTR+1
0002DAr 1  85 74                sta     DEST+1
0002DCr 1  A5 AA                lda     LOWTR
0002DEr 1  88                   dey
0002DFr 1  F1 AA                sbc     (LOWTR),y
0002E1r 1  18                   clc
0002E2r 1  65 7B                adc     VARTAB
0002E4r 1  85 7B                sta     VARTAB
0002E6r 1  85 73                sta     DEST
0002E8r 1  A5 7C                lda     VARTAB+1
0002EAr 1  69 FF                adc     #$FF
0002ECr 1  85 7C                sta     VARTAB+1
0002EEr 1  E5 AB                sbc     LOWTR+1
0002F0r 1  AA                   tax
0002F1r 1  38                   sec
0002F2r 1  A5 AA                lda     LOWTR
0002F4r 1  E5 7B                sbc     VARTAB
0002F6r 1  A8                   tay
0002F7r 1  B0 03                bcs     L23A5
0002F9r 1  E8                   inx
0002FAr 1  C6 74                dec     DEST+1
0002FCr 1               L23A5:
0002FCr 1  18                   clc
0002FDr 1  65 71                adc     INDEX
0002FFr 1  90 03                bcc     L23AD
000301r 1  C6 72                dec     INDEX+1
000303r 1  18                   clc
000304r 1               L23AD:
000304r 1  B1 71                lda     (INDEX),y
000306r 1  91 73                sta     (DEST),y
000308r 1  C8                   iny
000309r 1  D0 F9                bne     L23AD
00030Br 1  E6 72                inc     INDEX+1
00030Dr 1  E6 74                inc     DEST+1
00030Fr 1  CA                   dex
000310r 1  D0 F2                bne     L23AD
000312r 1               ; ----------------------------------------------------------------------------
000312r 1               PUT_NEW_LINE:
000312r 1  A5 13                lda     INPUTBUFFER
000314r 1  F0 2F                beq     FIX_LINKS
000316r 1  A5 85                lda     MEMSIZ
000318r 1  A4 86                ldy     MEMSIZ+1
00031Ar 1  85 81                sta     FRETOP
00031Cr 1  84 82                sty     FRETOP+1
00031Er 1  A5 7B                lda     VARTAB
000320r 1  85 A6                sta     HIGHTR
000322r 1  65 5D                adc     EOLPNTR
000324r 1  85 A4                sta     HIGHDS
000326r 1  A4 7C                ldy     VARTAB+1
000328r 1  84 A7                sty     HIGHTR+1
00032Ar 1  90 01                bcc     L23D6
00032Cr 1  C8                   iny
00032Dr 1               L23D6:
00032Dr 1  84 A5                sty     HIGHDS+1
00032Fr 1  20 rr rr             jsr     BLTU
000332r 1  A5 7F                lda     STREND
000334r 1  A4 80                ldy     STREND+1
000336r 1  85 7B                sta     VARTAB
000338r 1  84 7C                sty     VARTAB+1
00033Ar 1  A4 5D                ldy     EOLPNTR
00033Cr 1  88                   dey
00033Dr 1               ; ---COPY LINE INTO PROGRAM-------
00033Dr 1               L23E6:
00033Dr 1  B9 0F 00             lda     INPUTBUFFER-4,y
000340r 1  91 AA                sta     (LOWTR),y
000342r 1  88                   dey
000343r 1  10 F8                bpl     L23E6
000345r 1               ; ----------------------------------------------------------------------------
000345r 1               ; CLEAR ALL VARIABLES
000345r 1               ; RE-ESTABLISH ALL FORWARD LINKS
000345r 1               ; ----------------------------------------------------------------------------
000345r 1               FIX_LINKS:
000345r 1  20 rr rr             jsr     SETPTRS
000348r 1  A5 79                lda     TXTTAB
00034Ar 1  A4 7A                ldy     TXTTAB+1
00034Cr 1  85 71                sta     INDEX
00034Er 1  84 72                sty     INDEX+1
000350r 1  18                   clc
000351r 1               L23FA:
000351r 1  A0 01                ldy     #$01
000353r 1  B1 71                lda     (INDEX),y
000355r 1  D0 03 4C rr          jeq     L2351
000359r 1  rr           
00035Ar 1               
00035Ar 1  A0 04                ldy     #$04
00035Cr 1               L2405:
00035Cr 1  C8                   iny
00035Dr 1  B1 71                lda     (INDEX),y
00035Fr 1  D0 FB                bne     L2405
000361r 1  C8                   iny
000362r 1  98                   tya
000363r 1  65 71                adc     INDEX
000365r 1  AA                   tax
000366r 1  A0 00                ldy     #$00
000368r 1  91 71                sta     (INDEX),y
00036Ar 1  A5 72                lda     INDEX+1
00036Cr 1  69 00                adc     #$00
00036Er 1  C8                   iny
00036Fr 1  91 71                sta     (INDEX),y
000371r 1  86 71                stx     INDEX
000373r 1  85 72                sta     INDEX+1
000375r 1  90 DA                bcc     L23FA	; always
000377r 1               ; ----------------------------------------------------------------------------
000377r 1               L2420:
000377r 1  20 rr rr             jsr     OUTDO
00037Ar 1  CA                   dex
00037Br 1  10 08                bpl     INLIN2
00037Dr 1               L2423:
00037Dr 1  20 rr rr             jsr     OUTDO
000380r 1  20 rr rr             jsr     CRDO
000383r 1               ; ----------------------------------------------------------------------------
000383r 1               ; READ A LINE, AND STRIP OFF SIGN BITS
000383r 1               ; ----------------------------------------------------------------------------
000383r 1               INLIN:
000383r 1  A2 00                ldx     #$00
000385r 1               INLIN2:
000385r 1  20 rr rr             jsr     GETLN
000388r 1  C9 07                cmp     #$07
00038Ar 1  F0 14                beq     L2443
00038Cr 1  C9 0D                cmp     #$0D
00038Er 1  F0 1F                beq     L2453
000390r 1  C9 20                cmp     #$20
000392r 1  90 F1                bcc     INLIN2
000394r 1  C9 7D                cmp     #$7D
000396r 1  B0 ED                bcs     INLIN2
000398r 1  C9 40                cmp     #$40 ; @
00039Ar 1  F0 E1                beq     L2423
00039Cr 1  C9 5F                cmp     #$5F ; _
00039Er 1  F0 D7                beq     L2420
0003A0r 1               L2443:
0003A0r 1  E0 47                cpx     #$47
0003A2r 1  B0 04                bcs     L244C
0003A4r 1  95 13                sta     INPUTBUFFER,x
0003A6r 1  E8                   inx
0003A7r 1  2C                   .byte   $2C
0003A8r 1               L244C:
0003A8r 1  A9 07                lda     #$07 ; BEL
0003AAr 1  20 rr rr             jsr     OUTDO
0003ADr 1  D0 D6                bne     INLIN2
0003AFr 1               L2453:
0003AFr 1  4C rr rr             jmp     L29B9
0003B2r 1               GETLN:
0003B2r 1  20 rr rr             jsr     MONRDKEY
0003B5r 1  EA                   nop
0003B6r 1  EA                   nop
0003B7r 1  EA                   nop
0003B8r 1  EA                   nop
0003B9r 1  EA                   nop
0003BAr 1  EA                   nop
0003BBr 1  EA                   nop
0003BCr 1  EA                   nop
0003BDr 1  EA                   nop
0003BEr 1  EA                   nop
0003BFr 1  EA                   nop
0003C0r 1  EA                   nop
0003C1r 1  EA                   nop
0003C2r 1  EA                   nop
0003C3r 1  29 7F                and     #$7F
0003C5r 1               RDKEY:
0003C5r 1  C9 0F                cmp     #$0F
0003C7r 1  D0 08                bne     L2465
0003C9r 1  48                   pha
0003CAr 1  A5 64                lda     Z14
0003CCr 1  49 FF                eor     #$FF
0003CEr 1  85 64                sta     Z14
0003D0r 1  68                   pla
0003D1r 1               L2465:
0003D1r 1  60                   rts
0003D2r 1               ; ----------------------------------------------------------------------------
0003D2r 1               ; TOKENIZE THE INPUT LINE
0003D2r 1               ; ----------------------------------------------------------------------------
0003D2r 1               PARSE_INPUT_LINE:
0003D2r 1  A6 C3                ldx     TXTPTR
0003D4r 1  A0 04                ldy     #$04
0003D6r 1  84 60                sty     DATAFLG
0003D8r 1               L246C:
0003D8r 1  B5 00                lda     INPUTBUFFERX,x
0003DAr 1  C9 20                cmp     #$20
0003DCr 1  F0 3A                beq     L24AC
0003DEr 1  85 5C                sta     ENDCHR
0003E0r 1  C9 22                cmp     #$22
0003E2r 1  F0 58                beq     L24D0
0003E4r 1  24 60                bit     DATAFLG
0003E6r 1  70 30                bvs     L24AC
0003E8r 1  C9 3F                cmp     #$3F
0003EAr 1  D0 04                bne     L2484
0003ECr 1  A9 97                lda     #TOKEN_PRINT
0003EEr 1  D0 28                bne     L24AC
0003F0r 1               L2484:
0003F0r 1  C9 30                cmp     #$30
0003F2r 1  90 04                bcc     L248C
0003F4r 1  C9 3C                cmp     #$3C
0003F6r 1  90 20                bcc     L24AC
0003F8r 1               ; ----------------------------------------------------------------------------
0003F8r 1               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
0003F8r 1               ; WITH CURRENT CHAR FROM INPUT LINE
0003F8r 1               ; ----------------------------------------------------------------------------
0003F8r 1               L248C:
0003F8r 1  84 BA                sty     STRNG2
0003FAr 1  A0 00                ldy     #$00
0003FCr 1  84 5D                sty     EOLPNTR
0003FEr 1  88                   dey
0003FFr 1  86 C3                stx     TXTPTR
000401r 1  CA                   dex
000402r 1               L2496:
000402r 1  C8                   iny
000403r 1               L2497:
000403r 1  E8                   inx
000404r 1               L2498:
000404r 1  B5 00                lda     INPUTBUFFERX,x
000406r 1  C9 20                cmp     #$20
000408r 1  F0 F9                beq     L2497
00040Ar 1  38                   sec
00040Br 1  F9 rr rr             sbc     TOKEN_NAME_TABLE,y
00040Er 1  F0 F2                beq     L2496
000410r 1  C9 80                cmp     #$80
000412r 1  D0 2F                bne     L24D7
000414r 1  05 5D                ora     EOLPNTR
000416r 1               ; ----------------------------------------------------------------------------
000416r 1               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
000416r 1               ; ----------------------------------------------------------------------------
000416r 1               L24AA:
000416r 1  A4 BA                ldy     STRNG2
000418r 1               L24AC:
000418r 1  E8                   inx
000419r 1  C8                   iny
00041Ar 1  99 0E 00             sta     INPUTBUFFER-5,y
00041Dr 1  B9 0E 00             lda     INPUTBUFFER-5,y
000420r 1  F0 34                beq     L24EA
000422r 1  38                   sec
000423r 1  E9 3A                sbc     #$3A
000425r 1  F0 04                beq     L24BF
000427r 1  C9 49                cmp     #$49
000429r 1  D0 02                bne     L24C1
00042Br 1               L24BF:
00042Br 1  85 60                sta     DATAFLG
00042Dr 1               L24C1:
00042Dr 1  38                   sec
00042Er 1  E9 54                sbc     #TOKEN_REM-':'
000430r 1  D0 A6                bne     L246C
000432r 1  85 5C                sta     ENDCHR
000434r 1               ; ----------------------------------------------------------------------------
000434r 1               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
000434r 1               ; BY COPYING CHARS UP TO ENDCHR.
000434r 1               ; ----------------------------------------------------------------------------
000434r 1               L24C8:
000434r 1  B5 00                lda     INPUTBUFFERX,x
000436r 1  F0 E0                beq     L24AC
000438r 1  C5 5C                cmp     ENDCHR
00043Ar 1  F0 DC                beq     L24AC
00043Cr 1               L24D0:
00043Cr 1  C8                   iny
00043Dr 1  99 0E 00             sta     INPUTBUFFER-5,y
000440r 1  E8                   inx
000441r 1  D0 F1                bne     L24C8
000443r 1               ; ----------------------------------------------------------------------------
000443r 1               ; ADVANCE POINTER TO NEXT TOKEN NAME
000443r 1               ; ----------------------------------------------------------------------------
000443r 1               L24D7:
000443r 1  A6 C3                ldx     TXTPTR
000445r 1  E6 5D                inc     EOLPNTR
000447r 1               L24DB:
000447r 1  C8                   iny
000448r 1  B9 rr rr             lda     MATHTBL+28+1,y
00044Br 1  10 FA                bpl     L24DB
00044Dr 1  B9 rr rr             lda     TOKEN_NAME_TABLE,y
000450r 1  D0 B2                bne     L2498
000452r 1  B5 00                lda     INPUTBUFFERX,x
000454r 1  10 C0                bpl     L24AA
000456r 1               ; ---END OF LINE------------------
000456r 1               L24EA:
000456r 1  99 10 00             sta     INPUTBUFFER-3,y
000459r 1  A9 12                lda     #<INPUTBUFFER-1
00045Br 1  85 C3                sta     TXTPTR
00045Dr 1  60                   rts
00045Er 1               ; ----------------------------------------------------------------------------
00045Er 1               ; SEARCH FOR LINE
00045Er 1               ;
00045Er 1               ; (LINNUM) = LINE # TO FIND
00045Er 1               ; IF NOT FOUND:  CARRY = 0
00045Er 1               ;	LOWTR POINTS AT NEXT LINE
00045Er 1               ; IF FOUND:      CARRY = 1
00045Er 1               ;	LOWTR POINTS AT LINE
00045Er 1               ; ----------------------------------------------------------------------------
00045Er 1               FNDLIN:
00045Er 1  A5 79                lda     TXTTAB
000460r 1  A6 7A                ldx     TXTTAB+1
000462r 1               FL1:
000462r 1  A0 01                ldy     #$01
000464r 1  85 AA                sta     LOWTR
000466r 1  86 AB                stx     LOWTR+1
000468r 1  B1 AA                lda     (LOWTR),y
00046Ar 1  F0 1F                beq     L251F
00046Cr 1  C8                   iny
00046Dr 1  C8                   iny
00046Er 1  A5 12                lda     LINNUM+1
000470r 1  D1 AA                cmp     (LOWTR),y
000472r 1  90 18                bcc     L2520
000474r 1  F0 03                beq     L250D
000476r 1  88                   dey
000477r 1  D0 09                bne     L2516
000479r 1               L250D:
000479r 1  A5 11                lda     LINNUM
00047Br 1  88                   dey
00047Cr 1  D1 AA                cmp     (LOWTR),y
00047Er 1  90 0C                bcc     L2520
000480r 1  F0 0A                beq     L2520
000482r 1               L2516:
000482r 1  88                   dey
000483r 1  B1 AA                lda     (LOWTR),y
000485r 1  AA                   tax
000486r 1  88                   dey
000487r 1  B1 AA                lda     (LOWTR),y
000489r 1  B0 D7                bcs     FL1
00048Br 1               L251F:
00048Br 1  18                   clc
00048Cr 1               L2520:
00048Cr 1  60                   rts
00048Dr 1               ; ----------------------------------------------------------------------------
00048Dr 1               ; "NEW" STATEMENT
00048Dr 1               ; ----------------------------------------------------------------------------
00048Dr 1               NEW:
00048Dr 1  D0 FD                bne     L2520
00048Fr 1               SCRTCH:
00048Fr 1  A9 00                lda     #$00
000491r 1  A8                   tay
000492r 1  91 79                sta     (TXTTAB),y
000494r 1  C8                   iny
000495r 1  91 79                sta     (TXTTAB),y
000497r 1  A5 79                lda     TXTTAB
000499r 1  69 02                adc     #$02
00049Br 1  85 7B                sta     VARTAB
00049Dr 1  A5 7A                lda     TXTTAB+1
00049Fr 1  69 00                adc     #$00
0004A1r 1  85 7C                sta     VARTAB+1
0004A3r 1               ; ----------------------------------------------------------------------------
0004A3r 1               SETPTRS:
0004A3r 1  20 rr rr             jsr     STXTPT
0004A6r 1               ; ----------------------------------------------------------------------------
0004A6r 1               ; "CLEAR" STATEMENT
0004A6r 1               ; ----------------------------------------------------------------------------
0004A6r 1               CLEARC:
0004A6r 1  A5 85                lda     MEMSIZ
0004A8r 1  A4 86                ldy     MEMSIZ+1
0004AAr 1  85 81                sta     FRETOP
0004ACr 1  84 82                sty     FRETOP+1
0004AEr 1  A5 7B                lda     VARTAB
0004B0r 1  A4 7C                ldy     VARTAB+1
0004B2r 1  85 7D                sta     ARYTAB
0004B4r 1  84 7E                sty     ARYTAB+1
0004B6r 1  85 7F                sta     STREND
0004B8r 1  84 80                sty     STREND+1
0004BAr 1  20 rr rr             jsr     RESTORE
0004BDr 1               ; ----------------------------------------------------------------------------
0004BDr 1               STKINI:
0004BDr 1  A2 68                ldx     #TEMPST
0004BFr 1  86 65                stx     TEMPPT
0004C1r 1  68                   pla
0004C2r 1  8D FD 01             sta     STACK+STACK_TOP+1
0004C5r 1  68                   pla
0004C6r 1  8D FE 01             sta     STACK+STACK_TOP+2
0004C9r 1  A2 FC                ldx     #STACK_TOP
0004CBr 1  9A                   txs
0004CCr 1  A9 00                lda     #$00
0004CEr 1  85 8C                sta     OLDTEXT+1
0004D0r 1  85 61                sta     SUBFLG
0004D2r 1               L256A:
0004D2r 1  60                   rts
0004D3r 1               ; ----------------------------------------------------------------------------
0004D3r 1               ; SET TXTPTR TO BEGINNING OF PROGRAM
0004D3r 1               ; ----------------------------------------------------------------------------
0004D3r 1               STXTPT:
0004D3r 1  18                   clc
0004D4r 1  A5 79                lda     TXTTAB
0004D6r 1  69 FF                adc     #$FF
0004D8r 1  85 C3                sta     TXTPTR
0004DAr 1  A5 7A                lda     TXTTAB+1
0004DCr 1  69 FF                adc     #$FF
0004DEr 1  85 C4                sta     TXTPTR+1
0004E0r 1  60                   rts
0004E1r 1               ; ----------------------------------------------------------------------------
0004E1r 1               ; ----------------------------------------------------------------------------
0004E1r 1               ; "LIST" STATEMENT
0004E1r 1               ; ----------------------------------------------------------------------------
0004E1r 1               LIST:
0004E1r 1  90 06                bcc     L2581
0004E3r 1  F0 04                beq     L2581
0004E5r 1  C9 A4                cmp     #TOKEN_MINUS
0004E7r 1  D0 E9                bne     L256A
0004E9r 1               L2581:
0004E9r 1  20 rr rr             jsr     LINGET
0004ECr 1  20 rr rr             jsr     FNDLIN
0004EFr 1  20 C2 00             jsr     CHRGOT
0004F2r 1  F0 0C                beq     L2598
0004F4r 1  C9 A4                cmp     #TOKEN_MINUS
0004F6r 1  D0 94                bne     L2520
0004F8r 1  20 BC 00             jsr     CHRGET
0004FBr 1  20 rr rr             jsr     LINGET
0004FEr 1  D0 8C                bne     L2520
000500r 1               L2598:
000500r 1  68                   pla
000501r 1  68                   pla
000502r 1  A5 11                lda     LINNUM
000504r 1  05 12                ora     LINNUM+1
000506r 1  D0 06                bne     L25A6
000508r 1  A9 FF                lda     #$FF
00050Ar 1  85 11                sta     LINNUM
00050Cr 1  85 12                sta     LINNUM+1
00050Er 1               L25A6:
00050Er 1  A0 01                ldy     #$01
000510r 1  84 60                sty     DATAFLG
000512r 1  B1 AA                lda     (LOWTRX),y
000514r 1  F0 41                beq     L25E5
000516r 1  20 rr rr             jsr     ISCNTC
000519r 1  20 rr rr             jsr     CRDO
00051Cr 1  C8                   iny
00051Dr 1  B1 AA                lda     (LOWTRX),y
00051Fr 1  AA                   tax
000520r 1  C8                   iny
000521r 1  B1 AA                lda     (LOWTRX),y
000523r 1  C5 12                cmp     LINNUM+1
000525r 1  D0 04                bne     L25C1
000527r 1  E4 11                cpx     LINNUM
000529r 1  F0 02                beq     L25C3
00052Br 1               L25C1:
00052Br 1  B0 2A                bcs     L25E5
00052Dr 1               ; ---LIST ONE LINE----------------
00052Dr 1               L25C3:
00052Dr 1  84 97                sty     FORPNT
00052Fr 1  20 rr rr             jsr     LINPRT
000532r 1  A9 20                lda     #$20
000534r 1               L25CA:
000534r 1  A4 97                ldy     FORPNT
000536r 1  29 7F                and     #$7F
000538r 1               L25CE:
000538r 1  20 rr rr             jsr     OUTDO
00053Br 1  C9 22                cmp     #$22
00053Dr 1  D0 06                bne     LA519
00053Fr 1  A5 60                lda     DATAFLG
000541r 1  49 FF                eor     #$FF
000543r 1  85 60                sta     DATAFLG
000545r 1               LA519:
000545r 1  C8                   iny
000546r 1  B1 AA                lda     (LOWTRX),y
000548r 1  D0 10                bne     L25E8
00054Ar 1  A8                   tay
00054Br 1  B1 AA                lda     (LOWTRX),y
00054Dr 1  AA                   tax
00054Er 1  C8                   iny
00054Fr 1  B1 AA                lda     (LOWTRX),y
000551r 1  86 AA                stx     LOWTRX
000553r 1  85 AB                sta     LOWTRX+1
000555r 1  D0 B7                bne     L25A6
000557r 1               L25E5:
000557r 1  4C rr rr             jmp     RESTART
00055Ar 1               L25E8:
00055Ar 1  10 DC                bpl     L25CE
00055Cr 1  C9 FF                cmp     #$FF
00055Er 1  F0 D8                beq     L25CE
000560r 1  24 60                bit     DATAFLG
000562r 1  30 D4                bmi     L25CE
000564r 1  38                   sec
000565r 1  E9 7F                sbc     #$7F
000567r 1  AA                   tax
000568r 1  84 97                sty     FORPNT
00056Ar 1  A0 FF                ldy     #$FF
00056Cr 1               L25F2:
00056Cr 1  CA                   dex
00056Dr 1  F0 08                beq     L25FD
00056Fr 1               L25F5:
00056Fr 1  C8                   iny
000570r 1  B9 rr rr             lda     TOKEN_NAME_TABLE,y
000573r 1  10 FA                bpl     L25F5
000575r 1  30 F5                bmi     L25F2
000577r 1               L25FD:
000577r 1  C8                   iny
000578r 1  B9 rr rr             lda     TOKEN_NAME_TABLE,y
00057Br 1  30 B7                bmi     L25CA
00057Dr 1  20 rr rr             jsr     OUTDO
000580r 1  D0 F5                bne     L25FD	; always
000582r 1               ; ----------------------------------------------------------------------------
000582r 1               ; "FOR" STATEMENT
000582r 1               ;
000582r 1               ; FOR PUSHES 18 BYTES ON THE STACK:
000582r 1               ; 2 -- TXTPTR
000582r 1               ; 2 -- LINE NUMBER
000582r 1               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
000582r 1               ; 1 -- STEP SIGN
000582r 1               ; 5 -- STEP VALUE
000582r 1               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
000582r 1               ; 1 -- FOR TOKEN ($81)
000582r 1               ; ----------------------------------------------------------------------------
000582r 1               FOR:
000582r 1  A9 80                lda     #$80
000584r 1  85 61                sta     SUBFLG
000586r 1  20 rr rr             jsr     LET
000589r 1  20 rr rr             jsr     GTFORPNT
00058Cr 1  D0 05                bne     L2619
00058Er 1  8A                   txa
00058Fr 1  69 0D                adc     #FOR_STACK1
000591r 1  AA                   tax
000592r 1  9A                   txs
000593r 1               L2619:
000593r 1  68                   pla
000594r 1  68                   pla
000595r 1  A9 08                lda     #FOR_STACK2
000597r 1  20 rr rr             jsr     CHKMEM
00059Ar 1  20 rr rr             jsr     DATAN
00059Dr 1  18                   clc
00059Er 1  98                   tya
00059Fr 1  65 C3                adc     TXTPTR
0005A1r 1  48                   pha
0005A2r 1  A5 C4                lda     TXTPTR+1
0005A4r 1  69 00                adc     #$00
0005A6r 1  48                   pha
0005A7r 1  A5 88                lda     CURLIN+1
0005A9r 1  48                   pha
0005AAr 1  A5 87                lda     CURLIN
0005ACr 1  48                   pha
0005ADr 1  A9 9D                lda     #TOKEN_TO
0005AFr 1  20 rr rr             jsr     SYNCHR
0005B2r 1  20 rr rr             jsr     CHKNUM
0005B5r 1  20 rr rr             jsr     FRMNUM
0005B8r 1  A5 B0                lda     FACSIGN
0005BAr 1  09 7F                ora     #$7F
0005BCr 1  25 AD                and     FAC+1
0005BEr 1  85 AD                sta     FAC+1
0005C0r 1  A9 rr                lda     #<STEP
0005C2r 1  A0 rr                ldy     #>STEP
0005C4r 1  85 71                sta     INDEX
0005C6r 1  84 72                sty     INDEX+1
0005C8r 1  4C rr rr             jmp     FRM_STACK3
0005CBr 1               ; ----------------------------------------------------------------------------
0005CBr 1               ; "STEP" PHRASE OF "FOR" STATEMENT
0005CBr 1               ; ----------------------------------------------------------------------------
0005CBr 1               STEP:
0005CBr 1  A9 rr                lda     #<CON_ONE
0005CDr 1  A0 rr                ldy     #>CON_ONE
0005CFr 1  20 rr rr             jsr     LOAD_FAC_FROM_YA
0005D2r 1  20 C2 00             jsr     CHRGOT
0005D5r 1  C9 A2                cmp     #TOKEN_STEP
0005D7r 1  D0 06                bne     L2665
0005D9r 1  20 BC 00             jsr     CHRGET
0005DCr 1  20 rr rr             jsr     FRMNUM
0005DFr 1               L2665:
0005DFr 1  20 rr rr             jsr     SIGN
0005E2r 1  20 rr rr             jsr     FRM_STACK2
0005E5r 1  A5 98                lda     FORPNT+1
0005E7r 1  48                   pha
0005E8r 1  A5 97                lda     FORPNT
0005EAr 1  48                   pha
0005EBr 1  A9 81                lda     #$81
0005EDr 1  48                   pha
0005EEr 1               ; ----------------------------------------------------------------------------
0005EEr 1               ; PERFORM NEXT STATEMENT
0005EEr 1               ; ----------------------------------------------------------------------------
0005EEr 1               NEWSTT:
0005EEr 1  20 rr rr             jsr     ISCNTC
0005F1r 1  A5 C3                lda     TXTPTR
0005F3r 1  A4 C4                ldy     TXTPTR+1
0005F5r 1  F0 06                beq     L2683
0005F7r 1  85 8B                sta     OLDTEXT
0005F9r 1  84 8C                sty     OLDTEXT+1
0005FBr 1  A0 00                ldy     #$00
0005FDr 1               L2683:
0005FDr 1  B1 C3                lda     (TXTPTR),y
0005FFr 1  F0 07                beq     LA5DC	; old: 1 cycle more on generic case
000601r 1  C9 3A                cmp     #$3A
000603r 1  F0 1D                beq     NEWSTT2
000605r 1               SYNERR1:
000605r 1  4C rr rr             jmp     SYNERR
000608r 1               LA5DC:
000608r 1  A0 02                ldy     #$02
00060Ar 1  B1 C3                lda     (TXTPTR),y
00060Cr 1  18                   clc
00060Dr 1  F0 6D                beq     L2701
00060Fr 1  C8                   iny
000610r 1  B1 C3                lda     (TXTPTR),y
000612r 1  85 87                sta     CURLIN
000614r 1  C8                   iny
000615r 1  B1 C3                lda     (TXTPTR),y
000617r 1  85 88                sta     CURLIN+1
000619r 1  98                   tya
00061Ar 1  65 C3                adc     TXTPTR
00061Cr 1  85 C3                sta     TXTPTR
00061Er 1  90 02                bcc     NEWSTT2
000620r 1  E6 C4                inc     TXTPTR+1
000622r 1               NEWSTT2:
000622r 1  20 BC 00             jsr     CHRGET
000625r 1  20 rr rr             jsr     EXECUTE_STATEMENT
000628r 1  4C rr rr             jmp     NEWSTT
00062Br 1               ; ----------------------------------------------------------------------------
00062Br 1               ; EXECUTE A STATEMENT
00062Br 1               ;
00062Br 1               ; (A) IS FIRST CHAR OF STATEMENT
00062Br 1               ; CARRY IS SET
00062Br 1               ; ----------------------------------------------------------------------------
00062Br 1               EXECUTE_STATEMENT:
00062Br 1  F0 78                beq     RET1
00062Dr 1  38                   sec
00062Er 1               EXECUTE_STATEMENT1:
00062Er 1  E9 80                sbc     #$80
000630r 1  B0 03 4C rr          jcc     LET	; old: 1 cycle more on instr.
000634r 1  rr           
000635r 1               
000635r 1  C9 1C                cmp     #NUM_TOKENS
000637r 1  B0 CC                bcs     SYNERR1
000639r 1  0A                   asl     a
00063Ar 1  A8                   tay
00063Br 1  B9 rr rr             lda     TOKEN_ADDRESS_TABLE+1,y
00063Er 1  48                   pha
00063Fr 1  B9 rr rr             lda     TOKEN_ADDRESS_TABLE,y
000642r 1  48                   pha
000643r 1  4C BC 00             jmp     CHRGET
000646r 1               ; ----------------------------------------------------------------------------
000646r 1               ; "RESTORE" STATEMENT
000646r 1               ; ----------------------------------------------------------------------------
000646r 1               RESTORE:
000646r 1  38                   sec
000647r 1  A5 79                lda     TXTTAB
000649r 1  E9 01                sbc     #$01
00064Br 1  A4 7A                ldy     TXTTAB+1
00064Dr 1  B0 01                bcs     SETDA
00064Fr 1  88                   dey
000650r 1               SETDA:
000650r 1  85 8F                sta     DATPTR
000652r 1  84 90                sty     DATPTR+1
000654r 1  60                   rts
000655r 1               ; ----------------------------------------------------------------------------
000655r 1               ; SEE IF CONTROL-C TYPED
000655r 1               ; ----------------------------------------------------------------------------
000655r 1  60           RET2:   rts
000656r 1               ISCNTC:
000656r 1               ; MODIFIED CALL BY G.SEARLE FROM THE ORIGINAL OSI CODE
000656r 1                       ;jsr     MONISCNTC
000656r 1  18                   clc;stache added
000657r 1  EA                   nop
000658r 1  EA                   nop
000659r 1  EA                   nop
00065Ar 1  EA                   nop
00065Br 1  4A                   lsr     a
00065Cr 1  90 F7                bcc     RET2
00065Er 1  20 rr rr             jsr     GETLN
000661r 1  C9 03                cmp     #$03
000663r 1               
000663r 1               
000663r 1               ; runs into "STOP"
000663r 1               ; ----------------------------------------------------------------------------
000663r 1               ; "STOP" STATEMENT
000663r 1               ; ----------------------------------------------------------------------------
000663r 1               STOP:
000663r 1  B0 01                bcs     END2
000665r 1               ; ----------------------------------------------------------------------------
000665r 1               ; "END" STATEMENT
000665r 1               ; ----------------------------------------------------------------------------
000665r 1               END:
000665r 1  18                   clc
000666r 1               END2:
000666r 1  D0 3D                bne     RET1
000668r 1  A5 C3                lda     TXTPTR
00066Ar 1  A4 C4                ldy     TXTPTR+1
00066Cr 1  F0 0C                beq     END4
00066Er 1  85 8B                sta     OLDTEXT
000670r 1  84 8C                sty     OLDTEXT+1
000672r 1               CONTROL_C_TYPED:
000672r 1  A5 87                lda     CURLIN
000674r 1  A4 88                ldy     CURLIN+1
000676r 1  85 89                sta     OLDLIN
000678r 1  84 8A                sty     OLDLIN+1
00067Ar 1               END4:
00067Ar 1  68                   pla
00067Br 1  68                   pla
00067Cr 1               L2701:
00067Cr 1  A9 rr                lda     #<QT_BREAK
00067Er 1  A0 rr                ldy     #>QT_BREAK
000680r 1  A2 00                ldx     #$00
000682r 1  86 64                stx     Z14
000684r 1  90 03                bcc     L270E
000686r 1  4C rr rr             jmp     PRINT_ERROR_LINNUM
000689r 1               L270E:
000689r 1  4C rr rr             jmp     RESTART
00068Cr 1               ; ----------------------------------------------------------------------------
00068Cr 1               ; "CONT" COMMAND
00068Cr 1               ; ----------------------------------------------------------------------------
00068Cr 1               CONT:
00068Cr 1  D0 17                bne     RET1
00068Er 1  A2 1E                ldx     #ERR_CANTCONT
000690r 1  A4 8C                ldy     OLDTEXT+1
000692r 1  D0 03                bne     L271C
000694r 1  4C rr rr             jmp     ERROR
000697r 1               L271C:
000697r 1  A5 8B                lda     OLDTEXT
000699r 1  85 C3                sta     TXTPTR
00069Br 1  84 C4                sty     TXTPTR+1
00069Dr 1  A5 89                lda     OLDLIN
00069Fr 1  A4 8A                ldy     OLDLIN+1
0006A1r 1  85 87                sta     CURLIN
0006A3r 1  84 88                sty     CURLIN+1
0006A5r 1               RET1:
0006A5r 1  60                   rts
0006A6r 1               NULL:
0006A6r 1  20 rr rr             jsr     GETBYT
0006A9r 1  D0 FA                bne     RET1
0006ABr 1  E8                   inx
0006ACr 1  E0 0A                cpx     #NULL_MAX
0006AEr 1  B0 04                bcs     L2739
0006B0r 1  CA                   dex
0006B1r 1  86 0D                stx     Z15
0006B3r 1  60                   rts
0006B4r 1               L2739:
0006B4r 1  4C rr rr             jmp     IQERR
0006B7r 1               CLEAR:
0006B7r 1  D0 EC                bne     RET1
0006B9r 1  4C rr rr             jmp     CLEARC
0006BCr 1               ; ----------------------------------------------------------------------------
0006BCr 1               ; "RUN" COMMAND
0006BCr 1               ; ----------------------------------------------------------------------------
0006BCr 1               RUN:
0006BCr 1  D0 03                bne     L27CF
0006BEr 1  4C rr rr             jmp     SETPTRS
0006C1r 1               L27CF:
0006C1r 1  20 rr rr             jsr     CLEARC
0006C4r 1  4C rr rr             jmp     L27E9
0006C7r 1               ; ----------------------------------------------------------------------------
0006C7r 1               ; "GOSUB" STATEMENT
0006C7r 1               ;
0006C7r 1               ; LEAVES 7 BYTES ON STACK:
0006C7r 1               ; 2 -- RETURN ADDRESS (NEWSTT)
0006C7r 1               ; 2 -- TXTPTR
0006C7r 1               ; 2 -- LINE #
0006C7r 1               ; 1 -- GOSUB TOKEN
0006C7r 1               ; ----------------------------------------------------------------------------
0006C7r 1               GOSUB:
0006C7r 1  A9 03                lda     #$03
0006C9r 1  20 rr rr             jsr     CHKMEM
0006CCr 1  A5 C4                lda     TXTPTR+1
0006CEr 1  48                   pha
0006CFr 1  A5 C3                lda     TXTPTR
0006D1r 1  48                   pha
0006D2r 1  A5 88                lda     CURLIN+1
0006D4r 1  48                   pha
0006D5r 1  A5 87                lda     CURLIN
0006D7r 1  48                   pha
0006D8r 1  A9 8C                lda     #TOKEN_GOSUB
0006DAr 1  48                   pha
0006DBr 1               L27E9:
0006DBr 1  20 C2 00             jsr     CHRGOT
0006DEr 1  20 rr rr             jsr     GOTO
0006E1r 1  4C rr rr             jmp     NEWSTT
0006E4r 1               ; ----------------------------------------------------------------------------
0006E4r 1               ; "GOTO" STATEMENT
0006E4r 1               ; ALSO USED BY "RUN" AND "GOSUB"
0006E4r 1               ; ----------------------------------------------------------------------------
0006E4r 1               GOTO:
0006E4r 1  20 rr rr             jsr     LINGET
0006E7r 1  20 rr rr             jsr     REMN
0006EAr 1  A5 88                lda     CURLIN+1
0006ECr 1  C5 12                cmp     LINNUM+1
0006EEr 1  B0 0B                bcs     L2809
0006F0r 1  98                   tya
0006F1r 1  38                   sec
0006F2r 1  65 C3                adc     TXTPTR
0006F4r 1  A6 C4                ldx     TXTPTR+1
0006F6r 1  90 07                bcc     L280D
0006F8r 1  E8                   inx
0006F9r 1  B0 04                bcs     L280D
0006FBr 1               L2809:
0006FBr 1  A5 79                lda     TXTTAB
0006FDr 1  A6 7A                ldx     TXTTAB+1
0006FFr 1               L280D:
0006FFr 1  20 rr rr             jsr     FL1
000702r 1  90 1E                bcc     UNDERR
000704r 1  A5 AA                lda     LOWTRX
000706r 1  E9 01                sbc     #$01
000708r 1  85 C3                sta     TXTPTR
00070Ar 1  A5 AB                lda     LOWTRX+1
00070Cr 1  E9 00                sbc     #$00
00070Er 1  85 C4                sta     TXTPTR+1
000710r 1               L281E:
000710r 1  60                   rts
000711r 1               ; ----------------------------------------------------------------------------
000711r 1               ; "POP" AND "RETURN" STATEMENTS
000711r 1               ; ----------------------------------------------------------------------------
000711r 1               POP:
000711r 1  D0 FD                bne     L281E
000713r 1  A9 FF                lda     #$FF
000715r 1  85 97                sta     FORPNT
000717r 1  20 rr rr             jsr     GTFORPNT
00071Ar 1  9A                   txs
00071Br 1  C9 8C                cmp     #TOKEN_GOSUB
00071Dr 1  F0 0B                beq     RETURN
00071Fr 1  A2 04                ldx     #ERR_NOGOSUB
000721r 1  2C                   .byte   $2C
000722r 1               UNDERR:
000722r 1  A2 0E                ldx     #ERR_UNDEFSTAT
000724r 1  4C rr rr             jmp     ERROR
000727r 1               ; ----------------------------------------------------------------------------
000727r 1               SYNERR2:
000727r 1  4C rr rr             jmp     SYNERR
00072Ar 1               ; ----------------------------------------------------------------------------
00072Ar 1               RETURN:
00072Ar 1  68                   pla
00072Br 1  68                   pla
00072Cr 1  85 87                sta     CURLIN
00072Er 1  68                   pla
00072Fr 1  85 88                sta     CURLIN+1
000731r 1  68                   pla
000732r 1  85 C3                sta     TXTPTR
000734r 1  68                   pla
000735r 1  85 C4                sta     TXTPTR+1
000737r 1               ; ----------------------------------------------------------------------------
000737r 1               ; "DATA" STATEMENT
000737r 1               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
000737r 1               ; ----------------------------------------------------------------------------
000737r 1               DATA:
000737r 1  20 rr rr             jsr     DATAN
00073Ar 1               ; ----------------------------------------------------------------------------
00073Ar 1               ; ADD (Y) TO TXTPTR
00073Ar 1               ; ----------------------------------------------------------------------------
00073Ar 1               ADDON:
00073Ar 1  98                   tya
00073Br 1  18                   clc
00073Cr 1  65 C3                adc     TXTPTR
00073Er 1  85 C3                sta     TXTPTR
000740r 1  90 02                bcc     L2852
000742r 1  E6 C4                inc     TXTPTR+1
000744r 1               L2852:
000744r 1  60                   rts
000745r 1               ; ----------------------------------------------------------------------------
000745r 1               ; SCAN AHEAD TO NEXT ":" OR EOL
000745r 1               ; ----------------------------------------------------------------------------
000745r 1               DATAN:
000745r 1  A2 3A                ldx     #$3A
000747r 1  2C                   .byte   $2C
000748r 1               REMN:
000748r 1  A2 00                ldx     #$00
00074Ar 1  86 5B                stx     CHARAC
00074Cr 1  A0 00                ldy     #$00
00074Er 1  84 5C                sty     ENDCHR
000750r 1               L285E:
000750r 1  A5 5C                lda     ENDCHR
000752r 1  A6 5B                ldx     CHARAC
000754r 1  85 5B                sta     CHARAC
000756r 1  86 5C                stx     ENDCHR
000758r 1               L2866:
000758r 1  B1 C3                lda     (TXTPTR),y
00075Ar 1  F0 E8                beq     L2852
00075Cr 1  C5 5C                cmp     ENDCHR
00075Er 1  F0 E4                beq     L2852
000760r 1  C8                   iny
000761r 1  C9 22                cmp     #$22
000763r 1  F0 EB                beq     L285E; old: swap & cont is faster
000765r 1  D0 F1                bne     L2866
000767r 1               ; ----------------------------------------------------------------------------
000767r 1               ; "IF" STATEMENT
000767r 1               ; ----------------------------------------------------------------------------
000767r 1               IF:
000767r 1  20 rr rr             jsr     FRMEVL
00076Ar 1  20 C2 00             jsr     CHRGOT
00076Dr 1  C9 88                cmp     #TOKEN_GOTO
00076Fr 1  F0 05                beq     L2884
000771r 1  A9 A0                lda     #TOKEN_THEN
000773r 1  20 rr rr             jsr     SYNCHR
000776r 1               L2884:
000776r 1  A5 AC                lda     FAC
000778r 1  D0 05                bne     L288D
00077Ar 1               ; ----------------------------------------------------------------------------
00077Ar 1               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
00077Ar 1               ; ----------------------------------------------------------------------------
00077Ar 1               REM:
00077Ar 1  20 rr rr             jsr     REMN
00077Dr 1  F0 BB                beq     ADDON
00077Fr 1               L288D:
00077Fr 1  20 C2 00             jsr     CHRGOT
000782r 1  B0 03                bcs     L2895
000784r 1  4C rr rr             jmp     GOTO
000787r 1               L2895:
000787r 1  4C rr rr             jmp     EXECUTE_STATEMENT
00078Ar 1               ; ----------------------------------------------------------------------------
00078Ar 1               ; "ON" STATEMENT
00078Ar 1               ;
00078Ar 1               ; ON <EXP> GOTO <LIST>
00078Ar 1               ; ON <EXP> GOSUB <LIST>
00078Ar 1               ; ----------------------------------------------------------------------------
00078Ar 1               ON:
00078Ar 1  20 rr rr             jsr     GETBYT
00078Dr 1  48                   pha
00078Er 1  C9 8C                cmp     #TOKEN_GOSUB
000790r 1  F0 04                beq     L28A4
000792r 1               L28A0:
000792r 1  C9 88                cmp     #TOKEN_GOTO
000794r 1  D0 91                bne     SYNERR2
000796r 1               L28A4:
000796r 1  C6 AF                dec     FAC_LAST
000798r 1  D0 04                bne     L28AC
00079Ar 1  68                   pla
00079Br 1  4C rr rr             jmp     EXECUTE_STATEMENT1
00079Er 1               L28AC:
00079Er 1  20 BC 00             jsr     CHRGET
0007A1r 1  20 rr rr             jsr     LINGET
0007A4r 1  C9 2C                cmp     #$2C
0007A6r 1  F0 EE                beq     L28A4
0007A8r 1  68                   pla
0007A9r 1               L28B7:
0007A9r 1  60                   rts
0007AAr 1               ; ----------------------------------------------------------------------------
0007AAr 1               ; CONVERT LINE NUMBER
0007AAr 1               ; ----------------------------------------------------------------------------
0007AAr 1               LINGET:
0007AAr 1  A2 00                ldx     #$00
0007ACr 1  86 11                stx     LINNUM
0007AEr 1  86 12                stx     LINNUM+1
0007B0r 1               L28BE:
0007B0r 1  B0 F7                bcs     L28B7
0007B2r 1  E9 2F                sbc     #$2F
0007B4r 1  85 5B                sta     CHARAC
0007B6r 1  A5 12                lda     LINNUM+1
0007B8r 1  85 71                sta     INDEX
0007BAr 1  C9 19                cmp     #$19
0007BCr 1  B0 D4                bcs     L28A0
0007BEr 1               ; <<<<<DANGEROUS CODE>>>>>
0007BEr 1               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
0007BEr 1               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
0007BEr 1               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
0007BEr 1               ; FOR OTHER CALLS TO LINGET.
0007BEr 1               ;
0007BEr 1               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
0007BEr 1               ; THEN TYPE "GO TO 437761".
0007BEr 1               ;
0007BEr 1               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
0007BEr 1               ; THE PROBLEM.  ($AB00 - $ABFF)
0007BEr 1               ; <<<<<DANGEROUS CODE>>>>>
0007BEr 1  A5 11                lda     LINNUM
0007C0r 1  0A                   asl     a
0007C1r 1  26 71                rol     INDEX
0007C3r 1  0A                   asl     a
0007C4r 1  26 71                rol     INDEX
0007C6r 1  65 11                adc     LINNUM
0007C8r 1  85 11                sta     LINNUM
0007CAr 1  A5 71                lda     INDEX
0007CCr 1  65 12                adc     LINNUM+1
0007CEr 1  85 12                sta     LINNUM+1
0007D0r 1  06 11                asl     LINNUM
0007D2r 1  26 12                rol     LINNUM+1
0007D4r 1  A5 11                lda     LINNUM
0007D6r 1  65 5B                adc     CHARAC
0007D8r 1  85 11                sta     LINNUM
0007DAr 1  90 02                bcc     L28EC
0007DCr 1  E6 12                inc     LINNUM+1
0007DEr 1               L28EC:
0007DEr 1  20 BC 00             jsr     CHRGET
0007E1r 1  4C rr rr             jmp     L28BE
0007E4r 1               ; ----------------------------------------------------------------------------
0007E4r 1               ; "LET" STATEMENT
0007E4r 1               ;
0007E4r 1               ; LET <VAR> = <EXP>
0007E4r 1               ; <VAR> = <EXP>
0007E4r 1               ; ----------------------------------------------------------------------------
0007E4r 1               LET:
0007E4r 1  20 rr rr             jsr     PTRGET
0007E7r 1  85 97                sta     FORPNT
0007E9r 1  84 98                sty     FORPNT+1
0007EBr 1  A9 AB                lda     #TOKEN_EQUAL
0007EDr 1  20 rr rr             jsr     SYNCHR
0007F0r 1  A5 5F                lda     VALTYP
0007F2r 1  48                   pha
0007F3r 1  20 rr rr             jsr     FRMEVL
0007F6r 1  68                   pla
0007F7r 1  2A                   rol     a
0007F8r 1  20 rr rr             jsr     CHKVAL
0007FBr 1  D0 03                bne     LETSTRING
0007FDr 1               ; ----------------------------------------------------------------------------
0007FDr 1               ; REAL VARIABLE = EXPRESSION
0007FDr 1               ; ----------------------------------------------------------------------------
0007FDr 1  4C rr rr             jmp     SETFOR
000800r 1               LETSTRING:
000800r 1               ; ----------------------------------------------------------------------------
000800r 1               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
000800r 1               ; ----------------------------------------------------------------------------
000800r 1  A0 02                ldy     #$02
000802r 1  B1 AE                lda     (FAC_LAST-1),y
000804r 1  C5 82                cmp     FRETOP+1
000806r 1  90 17                bcc     L2946
000808r 1  D0 07                bne     L2938
00080Ar 1  88                   dey
00080Br 1  B1 AE                lda     (FAC_LAST-1),y
00080Dr 1  C5 81                cmp     FRETOP
00080Fr 1  90 0E                bcc     L2946
000811r 1               L2938:
000811r 1  A4 AF                ldy     FAC_LAST
000813r 1  C4 7C                cpy     VARTAB+1
000815r 1  90 08                bcc     L2946
000817r 1  D0 0D                bne     L294D
000819r 1  A5 AE                lda     FAC_LAST-1
00081Br 1  C5 7B                cmp     VARTAB
00081Dr 1  B0 07                bcs     L294D
00081Fr 1               L2946:
00081Fr 1  A5 AE                lda     FAC_LAST-1
000821r 1  A4 AF                ldy     FAC_LAST
000823r 1  4C rr rr             jmp     L2963
000826r 1               L294D:
000826r 1  A0 00                ldy     #$00
000828r 1  B1 AE                lda     (FAC_LAST-1),y
00082Ar 1  20 rr rr             jsr     STRINI
00082Dr 1  A5 9E                lda     DSCPTR
00082Fr 1  A4 9F                ldy     DSCPTR+1
000831r 1  85 B8                sta     STRNG1
000833r 1  84 B9                sty     STRNG1+1
000835r 1  20 rr rr             jsr     MOVINS
000838r 1  A9 AC                lda     #FAC
00083Ar 1  A0 00                ldy     #$00
00083Cr 1               L2963:
00083Cr 1  85 9E                sta     DSCPTR
00083Er 1  84 9F                sty     DSCPTR+1
000840r 1  20 rr rr             jsr     FRETMS
000843r 1  A0 00                ldy     #$00
000845r 1  B1 9E                lda     (DSCPTR),y
000847r 1  91 97                sta     (FORPNT),y
000849r 1  C8                   iny
00084Ar 1  B1 9E                lda     (DSCPTR),y
00084Cr 1  91 97                sta     (FORPNT),y
00084Er 1  C8                   iny
00084Fr 1  B1 9E                lda     (DSCPTR),y
000851r 1  91 97                sta     (FORPNT),y
000853r 1  60                   rts
000854r 1               PRSTRING:
000854r 1  20 rr rr             jsr     STRPRT
000857r 1               L297E:
000857r 1  20 C2 00             jsr     CHRGOT
00085Ar 1               ; ----------------------------------------------------------------------------
00085Ar 1               ; "PRINT" STATEMENT
00085Ar 1               ; ----------------------------------------------------------------------------
00085Ar 1               PRINT:
00085Ar 1  F0 3B                beq     CRDO
00085Cr 1               PRINT2:
00085Cr 1  F0 57                beq     L29DD
00085Er 1  C9 9C                cmp     #TOKEN_TAB
000860r 1  F0 6B                beq     L29F5
000862r 1  C9 9F                cmp     #TOKEN_SPC
000864r 1  F0 67                beq     L29F5
000866r 1  C9 2C                cmp     #','
000868r 1  F0 4C                beq     L29DE
00086Ar 1  C9 3B                cmp     #$3B
00086Cr 1  F0 7A                beq     L2A0D
00086Er 1  20 rr rr             jsr     FRMEVL
000871r 1  24 5F                bit     VALTYP
000873r 1  30 DF                bmi     PRSTRING
000875r 1  20 rr rr             jsr     FOUT
000878r 1  20 rr rr             jsr     STRLIT
00087Br 1  A0 00                ldy     #$00
00087Dr 1  B1 AE                lda     (FAC_LAST-1),y
00087Fr 1  18                   clc
000880r 1  65 0E                adc     POSX
000882r 1  C5 0F                cmp     Z17
000884r 1  90 03                bcc     L29B1
000886r 1  20 rr rr             jsr     CRDO
000889r 1               L29B1:
000889r 1  20 rr rr             jsr     STRPRT
00088Cr 1  20 rr rr             jsr     OUTSP
00088Fr 1  D0 C6                bne     L297E ; branch always
000891r 1               L29B9:
000891r 1  A0 00                ldy     #$00
000893r 1  94 13                sty     INPUTBUFFER,x
000895r 1  A2 12                ldx     #LINNUM+1
000897r 1               CRDO:
000897r 1  A9 0D                lda     #CRLF_1
000899r 1  85 0E                sta     POSX
00089Br 1  20 rr rr             jsr     OUTDO
00089Er 1  A9 0A                lda     #CRLF_2
0008A0r 1  20 rr rr             jsr     OUTDO
0008A3r 1               PRINTNULLS:
0008A3r 1  8A                   txa
0008A4r 1  48                   pha
0008A5r 1  A6 0D                ldx     Z15
0008A7r 1  F0 08                beq     L29D9
0008A9r 1  A9 00                lda     #$00
0008ABr 1               L29D3:
0008ABr 1  20 rr rr             jsr     OUTDO
0008AEr 1  CA                   dex
0008AFr 1  D0 FA                bne     L29D3
0008B1r 1               L29D9:
0008B1r 1  86 0E                stx     POSX
0008B3r 1  68                   pla
0008B4r 1  AA                   tax
0008B5r 1               L29DD:
0008B5r 1  60                   rts
0008B6r 1               L29DE:
0008B6r 1  A5 0E                lda     POSX
0008B8r 1  C5 10                cmp     Z18
0008BAr 1  90 06                bcc     L29EA
0008BCr 1  20 rr rr             jsr     CRDO
0008BFr 1  4C rr rr             jmp     L2A0D
0008C2r 1               L29EA:
0008C2r 1  38                   sec
0008C3r 1               L29EB:
0008C3r 1  E9 0E                sbc     #$0E
0008C5r 1  B0 FC                bcs     L29EB
0008C7r 1  49 FF                eor     #$FF
0008C9r 1  69 01                adc     #$01
0008CBr 1  D0 14                bne     L2A08
0008CDr 1               L29F5:
0008CDr 1  48                   pha
0008CEr 1  20 rr rr             jsr     GTBYTC
0008D1r 1  C9 29                cmp     #')'
0008D3r 1  D0 66                bne     SYNERR4
0008D5r 1  68                   pla
0008D6r 1  C9 9C                cmp     #TOKEN_TAB
0008D8r 1  D0 08                bne     L2A0A
0008DAr 1  8A                   txa
0008DBr 1  E5 0E                sbc     POSX
0008DDr 1  90 09                bcc     L2A0D
0008DFr 1  F0 07                beq     L2A0D
0008E1r 1               L2A08:
0008E1r 1  AA                   tax
0008E2r 1               L2A0A:
0008E2r 1  20 rr rr             jsr     OUTSP
0008E5r 1  CA                   dex
0008E6r 1  D0 FA                bne     L2A0A
0008E8r 1               L2A0D:
0008E8r 1  20 BC 00             jsr     CHRGET
0008EBr 1  4C rr rr             jmp     PRINT2
0008EEr 1               ; ----------------------------------------------------------------------------
0008EEr 1               ; PRINT STRING AT (Y,A)
0008EEr 1               ; ----------------------------------------------------------------------------
0008EEr 1               STROUT:
0008EEr 1  20 rr rr             jsr     STRLIT
0008F1r 1               ; ----------------------------------------------------------------------------
0008F1r 1               ; PRINT STRING AT (FACMO,FACLO)
0008F1r 1               ; ----------------------------------------------------------------------------
0008F1r 1               STRPRT:
0008F1r 1  20 rr rr             jsr     FREFAC
0008F4r 1  AA                   tax
0008F5r 1  A0 00                ldy     #$00
0008F7r 1  E8                   inx
0008F8r 1               L2A22:
0008F8r 1  CA                   dex
0008F9r 1  F0 BA                beq     L29DD
0008FBr 1  B1 71                lda     (INDEX),y
0008FDr 1  20 rr rr             jsr     OUTDO
000900r 1  C8                   iny
000901r 1  C9 0D                cmp     #$0D
000903r 1  D0 F3                bne     L2A22
000905r 1  20 rr rr             jsr     PRINTNULLS
000908r 1  4C rr rr             jmp     L2A22
00090Br 1               ; ----------------------------------------------------------------------------
00090Br 1               OUTSP:
00090Br 1  A9 20                lda     #$20
00090Dr 1  2C                   .byte   $2C
00090Er 1               OUTQUES:
00090Er 1  A9 3F                lda     #$3F
000910r 1               ; ----------------------------------------------------------------------------
000910r 1               ; PRINT CHAR FROM (A)
000910r 1               ; ----------------------------------------------------------------------------
000910r 1               OUTDO:
000910r 1  24 64                bit     Z14
000912r 1  30 18                bmi     L2A56
000914r 1               ; Commodore forgot to remove this in CBM1
000914r 1  48                   pha
000915r 1  C9 20                cmp     #$20
000917r 1  90 0B                bcc     L2A4E
000919r 1  A5 0E                lda     POSX
00091Br 1  C5 0F                cmp     Z17
00091Dr 1  D0 03                bne     L2A4C
00091Fr 1  20 rr rr             jsr     CRDO
000922r 1               L2A4C:
000922r 1  E6 0E                inc     POSX
000924r 1               L2A4E:
000924r 1               ; Commodore forgot to remove this in CBM1
000924r 1  68                   pla
000925r 1  20 rr rr             jsr     MONCOUT
000928r 1  EA                   nop
000929r 1  EA                   nop
00092Ar 1  EA                   nop
00092Br 1  EA                   nop
00092Cr 1               L2A56:
00092Cr 1  29 FF                and     #$FF
00092Er 1  60                   rts
00092Fr 1               ; ----------------------------------------------------------------------------
00092Fr 1               ; ???
00092Fr 1               ; ----------------------------------------------------------------------------
00092Fr 1               ; ----------------------------------------------------------------------------
00092Fr 1               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
00092Fr 1               ; IN NUMERIC FIELD.  MUST DISTINGUISH
00092Fr 1               ; BETWEEN INPUT, READ, AND GET
00092Fr 1               ; ----------------------------------------------------------------------------
00092Fr 1               INPUTERR:
00092Fr 1  A5 62                lda     INPUTFLG
000931r 1  F0 0B                beq     RESPERR	; INPUT
000933r 1               ; without this, it treats GET errors
000933r 1               ; like READ errors
000933r 1  A5 8D                lda     Z8C
000935r 1  A4 8E                ldy     Z8C+1
000937r 1  85 87                sta     CURLIN
000939r 1  84 88                sty     CURLIN+1
00093Br 1               SYNERR4:
00093Br 1  4C rr rr             jmp     SYNERR
00093Er 1               RESPERR:
00093Er 1  A9 rr                lda     #<ERRREENTRY
000940r 1  A0 rr                ldy     #>ERRREENTRY
000942r 1  20 rr rr             jsr     STROUT
000945r 1  A5 8B                lda     OLDTEXT
000947r 1  A4 8C                ldy     OLDTEXT+1
000949r 1  85 C3                sta     TXTPTR
00094Br 1  84 C4                sty     TXTPTR+1
00094Dr 1  60                   rts
00094Er 1               ; ----------------------------------------------------------------------------
00094Er 1               ; "GET" STATEMENT
00094Er 1               ; ----------------------------------------------------------------------------
00094Er 1               GET:
00094Er 1               ; ----------------------------------------------------------------------------
00094Er 1               ; "INPUT#" STATEMENT
00094Er 1               ; ----------------------------------------------------------------------------
00094Er 1               ; ----------------------------------------------------------------------------
00094Er 1               ; "INPUT" STATEMENT
00094Er 1               ; ----------------------------------------------------------------------------
00094Er 1               INPUT:
00094Er 1  46 64                lsr     Z14
000950r 1  C9 22                cmp     #$22
000952r 1  D0 0B                bne     L2A9E
000954r 1  20 rr rr             jsr     STRTXT
000957r 1  A9 3B                lda     #$3B
000959r 1  20 rr rr             jsr     SYNCHR
00095Cr 1  20 rr rr             jsr     STRPRT
00095Fr 1               L2A9E:
00095Fr 1  20 rr rr             jsr     ERRDIR
000962r 1  A9 2C                lda     #$2C
000964r 1  85 12                sta     INPUTBUFFER-1
000966r 1  20 rr rr             jsr     NXIN
000969r 1  A5 13                lda     INPUTBUFFER
00096Br 1  D0 12                bne     L2ABE
00096Dr 1  18                   clc
00096Er 1  4C rr rr             jmp     CONTROL_C_TYPED
000971r 1               NXIN:
000971r 1  20 rr rr             jsr     OUTQUES	; '?'
000974r 1  20 rr rr             jsr     OUTSP
000977r 1  4C rr rr             jmp     INLIN
00097Ar 1               ; ----------------------------------------------------------------------------
00097Ar 1               ; "GETC" STATEMENT
00097Ar 1               ; ----------------------------------------------------------------------------
00097Ar 1               ; ----------------------------------------------------------------------------
00097Ar 1               ; "READ" STATEMENT
00097Ar 1               ; ----------------------------------------------------------------------------
00097Ar 1               READ:
00097Ar 1  A6 8F                ldx     DATPTR
00097Cr 1  A4 90                ldy     DATPTR+1
00097Er 1               ; AppleSoft II, too
00097Er 1  A9                   .byte   $A9	; LDA #$98
00097Fr 1               L2ABE:
00097Fr 1  98                   tya
000980r 1               ; ----------------------------------------------------------------------------
000980r 1               ; PROCESS INPUT LIST
000980r 1               ;
000980r 1               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
000980r 1               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
000980r 1               ; 				$40 FOR GET
000980r 1               ;				$98 FOR READ
000980r 1               ; ----------------------------------------------------------------------------
000980r 1  85 62                sta     INPUTFLG
000982r 1  86 91                stx     INPTR
000984r 1  84 92                sty     INPTR+1
000986r 1               PROCESS_INPUT_ITEM:
000986r 1  20 rr rr             jsr     PTRGET
000989r 1  85 97                sta     FORPNT
00098Br 1  84 98                sty     FORPNT+1
00098Dr 1  A5 C3                lda     TXTPTR
00098Fr 1  A4 C4                ldy     TXTPTR+1
000991r 1  85 11                sta     TXPSV
000993r 1  84 12                sty     TXPSV+1
000995r 1  A6 91                ldx     INPTR
000997r 1  A4 92                ldy     INPTR+1
000999r 1  86 C3                stx     TXTPTR
00099Br 1  84 C4                sty     TXTPTR+1
00099Dr 1  20 C2 00             jsr     CHRGOT
0009A0r 1  D0 0E                bne     INSTART
0009A2r 1  24 62                bit     INPUTFLG
0009A4r 1               ; BUG: The beq/bne L2AF8 below is supposed
0009A4r 1               ; to be always taken. For this to happen,
0009A4r 1               ; the last load must be a 0 for beq
0009A4r 1               ; and != 0 for bne. The original Microsoft
0009A4r 1               ; code had ldx/ldy/bne here, which was only
0009A4r 1               ; correct for a non-ZP INPUTBUFFER. Commodore
0009A4r 1               ; fixed it in CBMBASIC V1 by swapping the
0009A4r 1               ; ldx and the ldy. It was broken on KIM,
0009A4r 1               ; but okay on APPLE and CBM2, because
0009A4r 1               ; these used a non-ZP INPUTBUFFER.
0009A4r 1               ; Microsoft fixed this somewhere after KIM
0009A4r 1               ; and before MICROTAN, by using beq instead
0009A4r 1               ; of bne in the ZP case.
0009A4r 1  30 62                bmi     FINDATA
0009A6r 1  20 rr rr             jsr     OUTQUES
0009A9r 1  20 rr rr             jsr     NXIN
0009ACr 1  86 C3                stx     TXTPTR
0009AEr 1  84 C4                sty     TXTPTR+1
0009B0r 1               ; ----------------------------------------------------------------------------
0009B0r 1               INSTART:
0009B0r 1  20 BC 00             jsr     CHRGET
0009B3r 1  24 5F                bit     VALTYP
0009B5r 1  10 24                bpl     L2B34
0009B7r 1  85 5B                sta     CHARAC
0009B9r 1  C9 22                cmp     #$22
0009BBr 1  F0 07                beq     L2B1D
0009BDr 1  A9 3A                lda     #$3A
0009BFr 1  85 5B                sta     CHARAC
0009C1r 1  A9 2C                lda     #$2C
0009C3r 1  18                   clc
0009C4r 1               L2B1D:
0009C4r 1  85 5C                sta     ENDCHR
0009C6r 1  A5 C3                lda     TXTPTR
0009C8r 1  A4 C4                ldy     TXTPTR+1
0009CAr 1  69 00                adc     #$00
0009CCr 1  90 01                bcc     L2B28
0009CEr 1  C8                   iny
0009CFr 1               L2B28:
0009CFr 1  20 rr rr             jsr     STRLT2
0009D2r 1  20 rr rr             jsr     POINT
0009D5r 1  20 rr rr             jsr     LETSTRING
0009D8r 1  4C rr rr             jmp     INPUT_MORE
0009DBr 1               ; ----------------------------------------------------------------------------
0009DBr 1               L2B34:
0009DBr 1  20 rr rr             jsr     FIN
0009DEr 1  20 rr rr             jsr     SETFOR
0009E1r 1               ; ----------------------------------------------------------------------------
0009E1r 1               INPUT_MORE:
0009E1r 1  20 C2 00             jsr     CHRGOT
0009E4r 1  F0 07                beq     L2B48
0009E6r 1  C9 2C                cmp     #$2C
0009E8r 1  F0 03                beq     L2B48
0009EAr 1  4C rr rr             jmp     INPUTERR
0009EDr 1               L2B48:
0009EDr 1  A5 C3                lda     TXTPTR
0009EFr 1  A4 C4                ldy     TXTPTR+1
0009F1r 1  85 91                sta     INPTR
0009F3r 1  84 92                sty     INPTR+1
0009F5r 1  A5 11                lda     TXPSV
0009F7r 1  A4 12                ldy     TXPSV+1
0009F9r 1  85 C3                sta     TXTPTR
0009FBr 1  84 C4                sty     TXTPTR+1
0009FDr 1  20 C2 00             jsr     CHRGOT
000A00r 1  F0 2C                beq     INPDONE
000A02r 1  20 rr rr             jsr     CHKCOM
000A05r 1  4C rr rr             jmp     PROCESS_INPUT_ITEM
000A08r 1               ; ----------------------------------------------------------------------------
000A08r 1               FINDATA:
000A08r 1  20 rr rr             jsr     DATAN
000A0Br 1  C8                   iny
000A0Cr 1  AA                   tax
000A0Dr 1  D0 12                bne     L2B7C
000A0Fr 1  A2 06                ldx     #ERR_NODATA
000A11r 1  C8                   iny
000A12r 1  B1 C3                lda     (TXTPTR),y
000A14r 1  F0 69                beq     GERR
000A16r 1  C8                   iny
000A17r 1  B1 C3                lda     (TXTPTR),y
000A19r 1  85 8D                sta     Z8C
000A1Br 1  C8                   iny
000A1Cr 1  B1 C3                lda     (TXTPTR),y
000A1Er 1  C8                   iny
000A1Fr 1  85 8E                sta     Z8C+1
000A21r 1               L2B7C:
000A21r 1  B1 C3                lda     (TXTPTR),y
000A23r 1  AA                   tax
000A24r 1  20 rr rr             jsr     ADDON
000A27r 1  E0 83                cpx     #$83
000A29r 1  D0 DD                bne     FINDATA
000A2Br 1  4C rr rr             jmp     INSTART
000A2Er 1               ; ---NO MORE INPUT REQUESTED------
000A2Er 1               INPDONE:
000A2Er 1  A5 91                lda     INPTR
000A30r 1  A4 92                ldy     INPTR+1
000A32r 1  A6 62                ldx     INPUTFLG
000A34r 1  F0 03                beq     L2B94 ; INPUT
000A36r 1  4C rr rr             jmp     SETDA
000A39r 1               L2B94:
000A39r 1  A0 00                ldy     #$00
000A3Br 1  B1 91                lda     (INPTR),y
000A3Dr 1  F0 07                beq     L2BA1
000A3Fr 1  A9 rr                lda     #<ERREXTRA
000A41r 1  A0 rr                ldy     #>ERREXTRA
000A43r 1  4C rr rr             jmp     STROUT
000A46r 1               L2BA1:
000A46r 1  60                   rts
000A47r 1               ; ----------------------------------------------------------------------------
000A47r 1               ERREXTRA:
000A47r 1  3F 45 58 54          .byte   "?EXTRA IGNORED"
000A4Br 1  52 41 20 49  
000A4Fr 1  47 4E 4F 52  
000A55r 1               
000A55r 1               
000A55r 1  0D 0A 00             .byte   $0D,$0A,$00
000A58r 1               ERRREENTRY:
000A58r 1  3F 52 45 44          .byte   "?REDO FROM START"
000A5Cr 1  4F 20 46 52  
000A60r 1  4F 4D 20 53  
000A68r 1               
000A68r 1               
000A68r 1  0D 0A 00             .byte   $0D,$0A,$00
000A6Br 1               ; ----------------------------------------------------------------------------
000A6Br 1               ; "NEXT" STATEMENT
000A6Br 1               ; ----------------------------------------------------------------------------
000A6Br 1               NEXT:
000A6Br 1  D0 04                bne     NEXT1
000A6Dr 1  A0 00                ldy     #$00
000A6Fr 1  F0 03                beq     NEXT2
000A71r 1               NEXT1:
000A71r 1  20 rr rr             jsr     PTRGET
000A74r 1               NEXT2:
000A74r 1  85 97                sta     FORPNT
000A76r 1  84 98                sty     FORPNT+1
000A78r 1  20 rr rr             jsr     GTFORPNT
000A7Br 1  F0 04                beq     NEXT3
000A7Dr 1  A2 00                ldx     #$00
000A7Fr 1               GERR:
000A7Fr 1  F0 68                beq     JERROR
000A81r 1               NEXT3:
000A81r 1  9A                   txs
000A82r 1  E8                   inx
000A83r 1  E8                   inx
000A84r 1  E8                   inx
000A85r 1  E8                   inx
000A86r 1  8A                   txa
000A87r 1  E8                   inx
000A88r 1  E8                   inx
000A89r 1  E8                   inx
000A8Ar 1  E8                   inx
000A8Br 1  E8                   inx
000A8Cr 1  86 73                stx     DEST
000A8Er 1  A0 01                ldy     #>STACK
000A90r 1  20 rr rr             jsr     LOAD_FAC_FROM_YA
000A93r 1  BA                   tsx
000A94r 1  BD 08 01             lda     STACK+BYTES_FP+4,x
000A97r 1  85 B0                sta     FACSIGN
000A99r 1  A5 97                lda     FORPNT
000A9Br 1  A4 98                ldy     FORPNT+1
000A9Dr 1  20 rr rr             jsr     FADD
000AA0r 1  20 rr rr             jsr     SETFOR
000AA3r 1  A0 01                ldy     #>STACK
000AA5r 1  20 rr rr             jsr     FCOMP2
000AA8r 1  BA                   tsx
000AA9r 1  38                   sec
000AAAr 1  FD 08 01             sbc     STACK+BYTES_FP+4,x
000AADr 1  F0 17                beq     L2C22
000AAFr 1  BD 0D 01             lda     STACK+2*BYTES_FP+5,x
000AB2r 1  85 87                sta     CURLIN
000AB4r 1  BD 0E 01             lda     STACK+2*BYTES_FP+6,x
000AB7r 1  85 88                sta     CURLIN+1
000AB9r 1  BD 10 01             lda     STACK+2*BYTES_FP+8,x
000ABCr 1  85 C3                sta     TXTPTR
000ABEr 1  BD 0F 01             lda     STACK+2*BYTES_FP+7,x
000AC1r 1  85 C4                sta     TXTPTR+1
000AC3r 1               L2C1F:
000AC3r 1  4C rr rr             jmp     NEWSTT
000AC6r 1               L2C22:
000AC6r 1  8A                   txa
000AC7r 1  69 0F                adc     #2*BYTES_FP+7
000AC9r 1  AA                   tax
000ACAr 1  9A                   txs
000ACBr 1  20 C2 00             jsr     CHRGOT
000ACEr 1  C9 2C                cmp     #$2C
000AD0r 1  D0 F1                bne     L2C1F
000AD2r 1  20 BC 00             jsr     CHRGET
000AD5r 1  20 rr rr             jsr     NEXT1
000AD8r 1               ; ----------------------------------------------------------------------------
000AD8r 1               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
000AD8r 1               ; ----------------------------------------------------------------------------
000AD8r 1               FRMNUM:
000AD8r 1  20 rr rr             jsr     FRMEVL
000ADBr 1               ; ----------------------------------------------------------------------------
000ADBr 1               ; MAKE SURE (FAC) IS NUMERIC
000ADBr 1               ; ----------------------------------------------------------------------------
000ADBr 1               CHKNUM:
000ADBr 1  18                   clc
000ADCr 1  24                   .byte   $24
000ADDr 1               ; ----------------------------------------------------------------------------
000ADDr 1               ; MAKE SURE (FAC) IS STRING
000ADDr 1               ; ----------------------------------------------------------------------------
000ADDr 1               CHKSTR:
000ADDr 1  38                   sec
000ADEr 1               ; ----------------------------------------------------------------------------
000ADEr 1               ; MAKE SURE (FAC) IS CORRECT TYPE
000ADEr 1               ; IF C=0, TYPE MUST BE NUMERIC
000ADEr 1               ; IF C=1, TYPE MUST BE STRING
000ADEr 1               ; ----------------------------------------------------------------------------
000ADEr 1               CHKVAL:
000ADEr 1  24 5F                bit     VALTYP
000AE0r 1  30 03                bmi     L2C41
000AE2r 1  B0 03                bcs     L2C43
000AE4r 1               L2C40:
000AE4r 1  60                   rts
000AE5r 1               L2C41:
000AE5r 1  B0 FD                bcs     L2C40
000AE7r 1               L2C43:
000AE7r 1  A2 18                ldx     #ERR_BADTYPE
000AE9r 1               JERROR:
000AE9r 1  4C rr rr             jmp     ERROR
000AECr 1               ; ----------------------------------------------------------------------------
000AECr 1               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
000AECr 1               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
000AECr 1               ; EXPRESSIONS.
000AECr 1               ; ----------------------------------------------------------------------------
000AECr 1               FRMEVL:
000AECr 1  A6 C3                ldx     TXTPTR
000AEEr 1  D0 02                bne     L2C4E
000AF0r 1  C6 C4                dec     TXTPTR+1
000AF2r 1               L2C4E:
000AF2r 1  C6 C3                dec     TXTPTR
000AF4r 1  A2 00                ldx     #$00
000AF6r 1  24                   .byte   $24
000AF7r 1               FRMEVL1:
000AF7r 1  48                   pha
000AF8r 1  8A                   txa
000AF9r 1  48                   pha
000AFAr 1  A9 01                lda     #$01
000AFCr 1  20 rr rr             jsr     CHKMEM
000AFFr 1  20 rr rr             jsr     FRM_ELEMENT
000B02r 1  A9 00                lda     #$00
000B04r 1  85 9B                sta     CPRTYP
000B06r 1               FRMEVL2:
000B06r 1  20 C2 00             jsr     CHRGOT
000B09r 1               L2C65:
000B09r 1  38                   sec
000B0Ar 1  E9 AA                sbc     #TOKEN_GREATER
000B0Cr 1  90 17                bcc     L2C81
000B0Er 1  C9 03                cmp     #$03
000B10r 1  B0 13                bcs     L2C81
000B12r 1  C9 01                cmp     #$01
000B14r 1  2A                   rol     a
000B15r 1  49 01                eor     #$01
000B17r 1  45 9B                eor     CPRTYP
000B19r 1  C5 9B                cmp     CPRTYP
000B1Br 1  90 61                bcc     SNTXERR
000B1Dr 1  85 9B                sta     CPRTYP
000B1Fr 1  20 BC 00             jsr     CHRGET
000B22r 1  4C rr rr             jmp     L2C65
000B25r 1               L2C81:
000B25r 1  A6 9B                ldx     CPRTYP
000B27r 1  D0 2C                bne     FRM_RELATIONAL
000B29r 1  B0 78                bcs     L2D02
000B2Br 1  69 07                adc     #$07
000B2Dr 1  90 74                bcc     L2D02
000B2Fr 1  65 5F                adc     VALTYP
000B31r 1  D0 03                bne     L2C92
000B33r 1  4C rr rr             jmp     CAT
000B36r 1               L2C92:
000B36r 1  69 FF                adc     #$FF
000B38r 1  85 71                sta     INDEX
000B3Ar 1  0A                   asl     a
000B3Br 1  65 71                adc     INDEX
000B3Dr 1  A8                   tay
000B3Er 1               FRM_PRECEDENCE_TEST:
000B3Er 1  68                   pla
000B3Fr 1  D9 rr rr             cmp     MATHTBL,y
000B42r 1  B0 64                bcs     FRM_PERFORM1
000B44r 1  20 rr rr             jsr     CHKNUM
000B47r 1               L2CA3:
000B47r 1  48                   pha
000B48r 1               L2CA4:
000B48r 1  20 rr rr             jsr     FRM_RECURSE
000B4Br 1  68                   pla
000B4Cr 1  A4 99                ldy     LASTOP
000B4Er 1  10 17                bpl     PREFNC
000B50r 1  AA                   tax
000B51r 1  F0 53                beq     GOEX
000B53r 1  D0 5C                bne     FRM_PERFORM2
000B55r 1               ; ----------------------------------------------------------------------------
000B55r 1               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
000B55r 1               ; ----------------------------------------------------------------------------
000B55r 1               FRM_RELATIONAL:
000B55r 1  46 5F                lsr     VALTYP
000B57r 1  8A                   txa
000B58r 1  2A                   rol     a
000B59r 1  A6 C3                ldx     TXTPTR
000B5Br 1  D0 02                bne     L2CBB
000B5Dr 1  C6 C4                dec     TXTPTR+1
000B5Fr 1               L2CBB:
000B5Fr 1  C6 C3                dec     TXTPTR
000B61r 1  A0 1B                ldy     #$1B
000B63r 1  85 9B                sta     CPRTYP
000B65r 1  D0 D7                bne     FRM_PRECEDENCE_TEST
000B67r 1               PREFNC:
000B67r 1  D9 rr rr             cmp     MATHTBL,y
000B6Ar 1  B0 45                bcs     FRM_PERFORM2
000B6Cr 1  90 D9                bcc     L2CA3
000B6Er 1               ; ----------------------------------------------------------------------------
000B6Er 1               ; STACK THIS OPERATION AND CALL FRMEVL FOR
000B6Er 1               ; ANOTHER ONE
000B6Er 1               ; ----------------------------------------------------------------------------
000B6Er 1               FRM_RECURSE:
000B6Er 1  B9 rr rr             lda     MATHTBL+2,y
000B71r 1  48                   pha
000B72r 1  B9 rr rr             lda     MATHTBL+1,y
000B75r 1  48                   pha
000B76r 1  20 rr rr             jsr     FRM_STACK1
000B79r 1  A5 9B                lda     CPRTYP
000B7Br 1  4C rr rr             jmp     FRMEVL1
000B7Er 1               SNTXERR:
000B7Er 1  4C rr rr             jmp     SYNERR
000B81r 1               ; ----------------------------------------------------------------------------
000B81r 1               ; STACK (FAC)
000B81r 1               ; THREE ENTRY POINTS:
000B81r 1               ; 	1, FROM FRMEVL
000B81r 1               ;	2, FROM "STEP"
000B81r 1               ;	3, FROM "FOR"
000B81r 1               ; ----------------------------------------------------------------------------
000B81r 1               FRM_STACK1:
000B81r 1  A5 B0                lda     FACSIGN
000B83r 1  BE rr rr             ldx     MATHTBL,y
000B86r 1               ; ----------------------------------------------------------------------------
000B86r 1               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
000B86r 1               ; ----------------------------------------------------------------------------
000B86r 1               FRM_STACK2:
000B86r 1  A8                   tay
000B87r 1  68                   pla
000B88r 1  85 71                sta     INDEX
000B8Ar 1  E6 71                inc     INDEX ; bug: assumes not on page boundary
000B8Cr 1               ; bug exists on AppleSoft II
000B8Cr 1  68                   pla
000B8Dr 1  85 72                sta     INDEX+1
000B8Fr 1  98                   tya
000B90r 1  48                   pha
000B91r 1               ; ----------------------------------------------------------------------------
000B91r 1               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
000B91r 1               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
000B91r 1               ; ----------------------------------------------------------------------------
000B91r 1               FRM_STACK3:
000B91r 1  20 rr rr             jsr     ROUND_FAC
000B94r 1  A5 AF                lda     FAC+3
000B96r 1  48                   pha
000B97r 1  A5 AE                lda     FAC+2
000B99r 1  48                   pha
000B9Ar 1  A5 AD                lda     FAC+1
000B9Cr 1  48                   pha
000B9Dr 1  A5 AC                lda     FAC
000B9Fr 1  48                   pha
000BA0r 1  6C 71 00             jmp     (INDEX)
000BA3r 1               L2D02:
000BA3r 1  A0 FF                ldy     #$FF
000BA5r 1  68                   pla
000BA6r 1               GOEX:
000BA6r 1  F0 20                beq     EXIT
000BA8r 1               ; ----------------------------------------------------------------------------
000BA8r 1               ; PERFORM STACKED OPERATION
000BA8r 1               ;
000BA8r 1               ; (A) = PRECEDENCE BYTE
000BA8r 1               ; STACK:  1 -- CPRMASK
000BA8r 1               ;	5 -- (ARG)
000BA8r 1               ;	2 -- ADDR OF PERFORMER
000BA8r 1               ; ----------------------------------------------------------------------------
000BA8r 1               FRM_PERFORM1:
000BA8r 1  C9 64                cmp     #$64
000BAAr 1  F0 03                beq     L2D0E
000BACr 1  20 rr rr             jsr     CHKNUM
000BAFr 1               L2D0E:
000BAFr 1  84 99                sty     LASTOP
000BB1r 1               FRM_PERFORM2:
000BB1r 1  68                   pla
000BB2r 1  4A                   lsr     a
000BB3r 1  85 63                sta     CPRMASK
000BB5r 1  68                   pla
000BB6r 1  85 B3                sta     ARG
000BB8r 1  68                   pla
000BB9r 1  85 B4                sta     ARG+1
000BBBr 1  68                   pla
000BBCr 1  85 B5                sta     ARG+2
000BBEr 1  68                   pla
000BBFr 1  85 B6                sta     ARG+3
000BC1r 1  68                   pla
000BC2r 1  85 B7                sta     ARGSIGN
000BC4r 1  45 B0                eor     FACSIGN
000BC6r 1  85 B8                sta     SGNCPR
000BC8r 1               EXIT:
000BC8r 1  A5 AC                lda     FAC
000BCAr 1  60                   rts
000BCBr 1               ; ----------------------------------------------------------------------------
000BCBr 1               ; GET ELEMENT IN EXPRESSION
000BCBr 1               ;
000BCBr 1               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
000BCBr 1               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
000BCBr 1               ; ----------------------------------------------------------------------------
000BCBr 1               FRM_ELEMENT:
000BCBr 1  A9 00                lda     #$00
000BCDr 1  85 5F                sta     VALTYP
000BCFr 1               L2D31:
000BCFr 1  20 BC 00             jsr     CHRGET
000BD2r 1  B0 03                bcs     L2D39
000BD4r 1               L2D36:
000BD4r 1  4C rr rr             jmp     FIN
000BD7r 1               L2D39:
000BD7r 1  20 rr rr             jsr     ISLETC
000BDAr 1  B0 67                bcs     FRM_VARIABLE
000BDCr 1               CON_PI:
000BDCr 1  C9 2E                cmp     #$2E
000BDEr 1  F0 F4                beq     L2D36
000BE0r 1  C9 A4                cmp     #TOKEN_MINUS
000BE2r 1  F0 58                beq     MIN
000BE4r 1  C9 A3                cmp     #TOKEN_PLUS
000BE6r 1  F0 E7                beq     L2D31
000BE8r 1  C9 22                cmp     #$22
000BEAr 1  D0 0F                bne     NOT_
000BECr 1               ; ----------------------------------------------------------------------------
000BECr 1               ; STRING CONSTANT ELEMENT
000BECr 1               ;
000BECr 1               ; SET Y,A = (TXTPTR)+CARRY
000BECr 1               ; ----------------------------------------------------------------------------
000BECr 1               STRTXT:
000BECr 1  A5 C3                lda     TXTPTR
000BEEr 1  A4 C4                ldy     TXTPTR+1
000BF0r 1  69 00                adc     #$00
000BF2r 1  90 01                bcc     L2D57
000BF4r 1  C8                   iny
000BF5r 1               L2D57:
000BF5r 1  20 rr rr             jsr     STRLIT
000BF8r 1  4C rr rr             jmp     POINT
000BFBr 1               ; ----------------------------------------------------------------------------
000BFBr 1               ; "NOT" FUNCTION
000BFBr 1               ; IF FAC=0, RETURN FAC=1
000BFBr 1               ; IF FAC<>0, RETURN FAC=0
000BFBr 1               ; ----------------------------------------------------------------------------
000BFBr 1               NOT_:
000BFBr 1  C9 A1                cmp     #TOKEN_NOT
000BFDr 1  D0 13                bne     L2D74
000BFFr 1  A0 18                ldy     #$18
000C01r 1  D0 3B                bne     EQUL
000C03r 1               ; ----------------------------------------------------------------------------
000C03r 1               ; COMPARISON FOR EQUALITY (= OPERATOR)
000C03r 1               ; ALSO USED TO EVALUATE "NOT" FUNCTION
000C03r 1               ; ----------------------------------------------------------------------------
000C03r 1               EQUOP:
000C03r 1  20 rr rr             jsr     AYINT
000C06r 1  A5 AF                lda     FAC_LAST
000C08r 1  49 FF                eor     #$FF
000C0Ar 1  A8                   tay
000C0Br 1  A5 AE                lda     FAC_LAST-1
000C0Dr 1  49 FF                eor     #$FF
000C0Fr 1  4C rr rr             jmp     GIVAYF
000C12r 1               L2D74:
000C12r 1  C9 9E                cmp     #TOKEN_FN
000C14r 1  D0 03                bne     L2D7B
000C16r 1  4C rr rr             jmp     L31F3
000C19r 1               L2D7B:
000C19r 1  C9 AD                cmp     #TOKEN_SGN
000C1Br 1  90 03                bcc     PARCHK
000C1Dr 1  4C rr rr             jmp     UNARY
000C20r 1               ; ----------------------------------------------------------------------------
000C20r 1               ; EVALUATE "(EXPRESSION)"
000C20r 1               ; ----------------------------------------------------------------------------
000C20r 1               PARCHK:
000C20r 1  20 rr rr             jsr     CHKOPN
000C23r 1  20 rr rr             jsr     FRMEVL
000C26r 1               CHKCLS:
000C26r 1  A9 29                lda     #$29
000C28r 1  2C                   .byte   $2C
000C29r 1               CHKOPN:
000C29r 1  A9 28                lda     #$28
000C2Br 1  2C                   .byte   $2C
000C2Cr 1               CHKCOM:
000C2Cr 1  A9 2C                lda     #$2C
000C2Er 1               ; ----------------------------------------------------------------------------
000C2Er 1               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
000C2Er 1               ; ----------------------------------------------------------------------------
000C2Er 1               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
000C2Er 1  A0 00                ldy     #$00
000C30r 1  D1 C3                cmp     (TXTPTR),y
000C32r 1  D0 03                bne     SYNERR
000C34r 1  4C BC 00             jmp     CHRGET
000C37r 1               ; ----------------------------------------------------------------------------
000C37r 1               SYNERR:
000C37r 1  A2 02                ldx     #ERR_SYNTAX
000C39r 1  4C rr rr             jmp     ERROR
000C3Cr 1               ; ----------------------------------------------------------------------------
000C3Cr 1               MIN:
000C3Cr 1  A0 15                ldy     #$15
000C3Er 1               EQUL:
000C3Er 1  68                   pla
000C3Fr 1  68                   pla
000C40r 1  4C rr rr             jmp     L2CA4
000C43r 1               ; ----------------------------------------------------------------------------
000C43r 1               FRM_VARIABLE:
000C43r 1  20 rr rr             jsr     PTRGET
000C46r 1               FRM_VARIABLE_CALL	= *-1
000C46r 1  85 AE                sta     FAC_LAST-1
000C48r 1  84 AF                sty     FAC_LAST
000C4Ar 1  A6 5F                ldx     VALTYP
000C4Cr 1  F0 01                beq     L2DB1
000C4Er 1               ; bugfix?
000C4Er 1               ; fixed on AppleSoft II, not on any CBM
000C4Er 1  60                   rts
000C4Fr 1               L2DB1:
000C4Fr 1  4C rr rr             jmp     LOAD_FAC_FROM_YA
000C52r 1               ; ----------------------------------------------------------------------------
000C52r 1               UNARY:
000C52r 1  0A                   asl     a
000C53r 1  48                   pha
000C54r 1  AA                   tax
000C55r 1  20 BC 00             jsr     CHRGET
000C58r 1  E0 81                cpx     #<(TOKEN_LEFTSTR*2-1)
000C5Ar 1  90 20                bcc     L2DEF
000C5Cr 1  20 rr rr             jsr     CHKOPN
000C5Fr 1  20 rr rr             jsr     FRMEVL
000C62r 1  20 rr rr             jsr     CHKCOM
000C65r 1  20 rr rr             jsr     CHKSTR
000C68r 1  68                   pla
000C69r 1  AA                   tax
000C6Ar 1  A5 AF                lda     FAC_LAST
000C6Cr 1  48                   pha
000C6Dr 1  A5 AE                lda     FAC_LAST-1
000C6Fr 1  48                   pha
000C70r 1  8A                   txa
000C71r 1  48                   pha
000C72r 1  20 rr rr             jsr     GETBYT
000C75r 1  68                   pla
000C76r 1  A8                   tay
000C77r 1  8A                   txa
000C78r 1  48                   pha
000C79r 1  4C rr rr             jmp     L2DF4
000C7Cr 1               L2DEF:
000C7Cr 1  20 rr rr             jsr     PARCHK
000C7Fr 1  68                   pla
000C80r 1  A8                   tay
000C81r 1               L2DF4:
000C81r 1  B9 rr rr             lda     UNFNC+($80-TOKEN_SGN)*2,y
000C84r 1  85 A2                sta     JMPADRS+1
000C86r 1  B9 rr rr             lda     UNFNC+($80-TOKEN_SGN)*2+1,y
000C89r 1  85 A3                sta     JMPADRS+2
000C8Br 1  20 A1 00             jsr     JMPADRS
000C8Er 1  4C rr rr             jmp     CHKNUM
000C91r 1               ; ----------------------------------------------------------------------------
000C91r 1               OR:
000C91r 1  A0 FF                ldy     #$FF
000C93r 1  2C                   .byte   $2C
000C94r 1               ; ----------------------------------------------------------------------------
000C94r 1               TAND:
000C94r 1  A0 00                ldy     #$00
000C96r 1  84 5D                sty     EOLPNTR
000C98r 1  20 rr rr             jsr     AYINT
000C9Br 1  A5 AE                lda     FAC_LAST-1
000C9Dr 1  45 5D                eor     EOLPNTR
000C9Fr 1  85 5B                sta     CHARAC
000CA1r 1  A5 AF                lda     FAC_LAST
000CA3r 1  45 5D                eor     EOLPNTR
000CA5r 1  85 5C                sta     ENDCHR
000CA7r 1  20 rr rr             jsr     COPY_ARG_TO_FAC
000CAAr 1  20 rr rr             jsr     AYINT
000CADr 1  A5 AF                lda     FAC_LAST
000CAFr 1  45 5D                eor     EOLPNTR
000CB1r 1  25 5C                and     ENDCHR
000CB3r 1  45 5D                eor     EOLPNTR
000CB5r 1  A8                   tay
000CB6r 1  A5 AE                lda     FAC_LAST-1
000CB8r 1  45 5D                eor     EOLPNTR
000CBAr 1  25 5B                and     CHARAC
000CBCr 1  45 5D                eor     EOLPNTR
000CBEr 1  4C rr rr             jmp     GIVAYF
000CC1r 1               ; ----------------------------------------------------------------------------
000CC1r 1               ; PERFORM RELATIONAL OPERATIONS
000CC1r 1               ; ----------------------------------------------------------------------------
000CC1r 1               RELOPS:
000CC1r 1  20 rr rr             jsr     CHKVAL
000CC4r 1  B0 13                bcs     STRCMP
000CC6r 1  A5 B7                lda     ARGSIGN
000CC8r 1  09 7F                ora     #$7F
000CCAr 1  25 B4                and     ARG+1
000CCCr 1  85 B4                sta     ARG+1
000CCEr 1  A9 B3                lda     #<ARG
000CD0r 1  A0 00                ldy     #$00
000CD2r 1  20 rr rr             jsr     FCOMP
000CD5r 1  AA                   tax
000CD6r 1  4C rr rr             jmp     NUMCMP
000CD9r 1               ; ----------------------------------------------------------------------------
000CD9r 1               ; STRING COMPARISON
000CD9r 1               ; ----------------------------------------------------------------------------
000CD9r 1               STRCMP:
000CD9r 1  A9 00                lda     #$00
000CDBr 1  85 5F                sta     VALTYP
000CDDr 1  C6 9B                dec     CPRTYP
000CDFr 1  20 rr rr             jsr     FREFAC
000CE2r 1  85 AC                sta     FAC
000CE4r 1  86 AD                stx     FAC+1
000CE6r 1  84 AE                sty     FAC+2
000CE8r 1  A5 B5                lda     ARG_LAST-1
000CEAr 1  A4 B6                ldy     ARG_LAST
000CECr 1  20 rr rr             jsr     FRETMP
000CEFr 1  86 B5                stx     ARG_LAST-1
000CF1r 1  84 B6                sty     ARG_LAST
000CF3r 1  AA                   tax
000CF4r 1  38                   sec
000CF5r 1  E5 AC                sbc     FAC
000CF7r 1  F0 08                beq     L2E74
000CF9r 1  A9 01                lda     #$01
000CFBr 1  90 04                bcc     L2E74
000CFDr 1  A6 AC                ldx     FAC
000CFFr 1  A9 FF                lda     #$FF
000D01r 1               L2E74:
000D01r 1  85 B0                sta     FACSIGN
000D03r 1  A0 FF                ldy     #$FF
000D05r 1  E8                   inx
000D06r 1               STRCMP1:
000D06r 1  C8                   iny
000D07r 1  CA                   dex
000D08r 1  D0 07                bne     L2E84
000D0Ar 1  A6 B0                ldx     FACSIGN
000D0Cr 1               NUMCMP:
000D0Cr 1  30 0F                bmi     CMPDONE
000D0Er 1  18                   clc
000D0Fr 1  90 0C                bcc     CMPDONE
000D11r 1               L2E84:
000D11r 1  B1 B5                lda     (ARG_LAST-1),y
000D13r 1  D1 AD                cmp     (FAC+1),y
000D15r 1  F0 EF                beq     STRCMP1
000D17r 1  A2 FF                ldx     #$FF
000D19r 1  B0 02                bcs     CMPDONE
000D1Br 1  A2 01                ldx     #$01
000D1Dr 1               CMPDONE:
000D1Dr 1  E8                   inx
000D1Er 1  8A                   txa
000D1Fr 1  2A                   rol     a
000D20r 1  25 63                and     CPRMASK
000D22r 1  F0 02                beq     L2E99
000D24r 1  A9 FF                lda     #$FF
000D26r 1               L2E99:
000D26r 1  4C rr rr             jmp     FLOAT
000D29r 1               ; ----------------------------------------------------------------------------
000D29r 1               ; "DIM" STATEMENT
000D29r 1               ; ----------------------------------------------------------------------------
000D29r 1               NXDIM:
000D29r 1  20 rr rr             jsr     CHKCOM
000D2Cr 1               DIM:
000D2Cr 1  AA                   tax
000D2Dr 1  20 rr rr             jsr     PTRGET2
000D30r 1  20 C2 00             jsr     CHRGOT
000D33r 1  D0 F4                bne     NXDIM
000D35r 1  60                   rts
000D36r 1               ; ----------------------------------------------------------------------------
000D36r 1               ; PTRGET -- GENERAL VARIABLE SCAN
000D36r 1               ;
000D36r 1               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
000D36r 1               ; VARTAB AND ARYTAB FOR THE NAME.
000D36r 1               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
000D36r 1               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
000D36r 1               ;
000D36r 1               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
000D36r 1               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
000D36r 1               ;		ELSE = 0
000D36r 1               ;
000D36r 1               ;	SUBFLG -- = $00
000D36r 1               ;		= $40 IF CALLED FROM "GETARYPT"
000D36r 1               ; ----------------------------------------------------------------------------
000D36r 1               PTRGET:
000D36r 1  A2 00                ldx     #$00
000D38r 1  20 C2 00             jsr     CHRGOT
000D3Br 1               PTRGET2:
000D3Br 1  86 5E                stx     DIMFLG
000D3Dr 1               PTRGET3:
000D3Dr 1  85 93                sta     VARNAM
000D3Fr 1  20 C2 00             jsr     CHRGOT
000D42r 1  20 rr rr             jsr     ISLETC
000D45r 1  B0 03                bcs     NAMOK
000D47r 1  4C rr rr             jmp     SYNERR
000D4Ar 1               NAMOK:
000D4Ar 1  A2 00                ldx     #$00
000D4Cr 1  86 5F                stx     VALTYP
000D4Er 1  20 BC 00             jsr     CHRGET
000D51r 1  90 05                bcc     L2ECD
000D53r 1  20 rr rr             jsr     ISLETC
000D56r 1  90 0B                bcc     L2ED8
000D58r 1               L2ECD:
000D58r 1  AA                   tax
000D59r 1               L2ECE:
000D59r 1  20 BC 00             jsr     CHRGET
000D5Cr 1  90 FB                bcc     L2ECE
000D5Er 1  20 rr rr             jsr     ISLETC
000D61r 1  B0 F6                bcs     L2ECE
000D63r 1               L2ED8:
000D63r 1  C9 24                cmp     #$24
000D65r 1  D0 0B                bne     L2EF9
000D67r 1  A9 FF                lda     #$FF
000D69r 1  85 5F                sta     VALTYP
000D6Br 1  8A                   txa
000D6Cr 1  09 80                ora     #$80
000D6Er 1  AA                   tax
000D6Fr 1  20 BC 00             jsr     CHRGET
000D72r 1               L2EF9:
000D72r 1  86 94                stx     VARNAM+1
000D74r 1  38                   sec
000D75r 1  05 61                ora     SUBFLG
000D77r 1  E9 28                sbc     #$28
000D79r 1  D0 03                bne     L2F05
000D7Br 1  4C rr rr             jmp     ARRAY
000D7Er 1               L2F05:
000D7Er 1  A9 00                lda     #$00
000D80r 1  85 61                sta     SUBFLG
000D82r 1  A5 7B                lda     VARTAB
000D84r 1  A6 7C                ldx     VARTAB+1
000D86r 1  A0 00                ldy     #$00
000D88r 1               L2F0F:
000D88r 1  86 AB                stx     LOWTR+1
000D8Ar 1               L2F11:
000D8Ar 1  85 AA                sta     LOWTR
000D8Cr 1  E4 7E                cpx     ARYTAB+1
000D8Er 1  D0 04                bne     L2F1B
000D90r 1  C5 7D                cmp     ARYTAB
000D92r 1  F0 22                beq     NAMENOTFOUND
000D94r 1               L2F1B:
000D94r 1  A5 93                lda     VARNAM
000D96r 1  D1 AA                cmp     (LOWTR),y
000D98r 1  D0 08                bne     L2F29
000D9Ar 1  A5 94                lda     VARNAM+1
000D9Cr 1  C8                   iny
000D9Dr 1  D1 AA                cmp     (LOWTR),y
000D9Fr 1  F0 61                beq     SET_VARPNT_AND_YA
000DA1r 1  88                   dey
000DA2r 1               L2F29:
000DA2r 1  18                   clc
000DA3r 1  A5 AA                lda     LOWTR
000DA5r 1  69 06                adc     #BYTES_PER_VARIABLE
000DA7r 1  90 E1                bcc     L2F11
000DA9r 1  E8                   inx
000DAAr 1  D0 DC                bne     L2F0F
000DACr 1               ; ----------------------------------------------------------------------------
000DACr 1               ; CHECK IF (A) IS ASCII LETTER A-Z
000DACr 1               ;
000DACr 1               ; RETURN CARRY = 1 IF A-Z
000DACr 1               ;	= 0 IF NOT
000DACr 1               ; ----------------------------------------------------------------------------
000DACr 1               ISLETC:
000DACr 1  C9 41                cmp     #$41
000DAEr 1  90 05                bcc     L2F3C
000DB0r 1  E9 5B                sbc     #$5B
000DB2r 1  38                   sec
000DB3r 1  E9 A5                sbc     #$A5
000DB5r 1               L2F3C:
000DB5r 1  60                   rts
000DB6r 1               ; ----------------------------------------------------------------------------
000DB6r 1               ; VARIABLE NOT FOUND, SO MAKE ONE
000DB6r 1               ; ----------------------------------------------------------------------------
000DB6r 1               NAMENOTFOUND:
000DB6r 1  68                   pla
000DB7r 1  48                   pha
000DB8r 1  C9 rr                cmp     #<FRM_VARIABLE_CALL
000DBAr 1  D0 07                bne     MAKENEWVARIABLE
000DBCr 1  A9 rr                lda     #<C_ZERO
000DBEr 1  A0 rr                ldy     #>C_ZERO
000DC0r 1  60                   rts
000DC1r 1               ; ----------------------------------------------------------------------------
000DC1r 1               C_ZERO:
000DC1r 1  00 00                .byte   $00,$00
000DC3r 1               ; ----------------------------------------------------------------------------
000DC3r 1               ; MAKE A NEW SIMPLE VARIABLE
000DC3r 1               ;
000DC3r 1               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
000DC3r 1               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
000DC3r 1               ; ----------------------------------------------------------------------------
000DC3r 1               MAKENEWVARIABLE:
000DC3r 1  A5 7D                lda     ARYTAB
000DC5r 1  A4 7E                ldy     ARYTAB+1
000DC7r 1  85 AA                sta     LOWTR
000DC9r 1  84 AB                sty     LOWTR+1
000DCBr 1  A5 7F                lda     STREND
000DCDr 1  A4 80                ldy     STREND+1
000DCFr 1  85 A6                sta     HIGHTR
000DD1r 1  84 A7                sty     HIGHTR+1
000DD3r 1  18                   clc
000DD4r 1  69 06                adc     #BYTES_PER_VARIABLE
000DD6r 1  90 01                bcc     L2F68
000DD8r 1  C8                   iny
000DD9r 1               L2F68:
000DD9r 1  85 A4                sta     HIGHDS
000DDBr 1  84 A5                sty     HIGHDS+1
000DDDr 1  20 rr rr             jsr     BLTU
000DE0r 1  A5 A4                lda     HIGHDS
000DE2r 1  A4 A5                ldy     HIGHDS+1
000DE4r 1  C8                   iny
000DE5r 1  85 7D                sta     ARYTAB
000DE7r 1  84 7E                sty     ARYTAB+1
000DE9r 1  A0 00                ldy     #$00
000DEBr 1  A5 93                lda     VARNAM
000DEDr 1  91 AA                sta     (LOWTR),y
000DEFr 1  C8                   iny
000DF0r 1  A5 94                lda     VARNAM+1
000DF2r 1  91 AA                sta     (LOWTR),y
000DF4r 1  A9 00                lda     #$00
000DF6r 1  C8                   iny
000DF7r 1  91 AA                sta     (LOWTR),y
000DF9r 1  C8                   iny
000DFAr 1  91 AA                sta     (LOWTR),y
000DFCr 1  C8                   iny
000DFDr 1  91 AA                sta     (LOWTR),y
000DFFr 1  C8                   iny
000E00r 1  91 AA                sta     (LOWTR),y
000E02r 1               ; ----------------------------------------------------------------------------
000E02r 1               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
000E02r 1               ; ----------------------------------------------------------------------------
000E02r 1               SET_VARPNT_AND_YA:
000E02r 1  A5 AA                lda     LOWTR
000E04r 1  18                   clc
000E05r 1  69 02                adc     #$02
000E07r 1  A4 AB                ldy     LOWTR+1
000E09r 1  90 01                bcc     L2F9E
000E0Br 1  C8                   iny
000E0Cr 1               L2F9E:
000E0Cr 1  85 95                sta     VARPNT
000E0Er 1  84 96                sty     VARPNT+1
000E10r 1  60                   rts
000E11r 1               ; ----------------------------------------------------------------------------
000E11r 1               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
000E11r 1               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
000E11r 1               ; ----------------------------------------------------------------------------
000E11r 1               GETARY:
000E11r 1  A5 5D                lda     EOLPNTR
000E13r 1  0A                   asl     a
000E14r 1  69 05                adc     #$05
000E16r 1  65 AA                adc     LOWTR
000E18r 1  A4 AB                ldy     LOWTR+1
000E1Ar 1  90 01                bcc     L2FAF
000E1Cr 1  C8                   iny
000E1Dr 1               L2FAF:
000E1Dr 1  85 A4                sta     HIGHDS
000E1Fr 1  84 A5                sty     HIGHDS+1
000E21r 1  60                   rts
000E22r 1               ; ----------------------------------------------------------------------------
000E22r 1               NEG32768:
000E22r 1  90 80 00 00          .byte   $90,$80,$00,$00
000E26r 1               ; ----------------------------------------------------------------------------
000E26r 1               ; EVALUATE NUMERIC FORMULA AT TXTPTR
000E26r 1               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
000E26r 1               ; IN FAC+3,4
000E26r 1               ; ----------------------------------------------------------------------------
000E26r 1               MAKINT:
000E26r 1  20 BC 00             jsr     CHRGET
000E29r 1  20 rr rr             jsr     FRMNUM
000E2Cr 1               ; ----------------------------------------------------------------------------
000E2Cr 1               ; CONVERT FAC TO INTEGER
000E2Cr 1               ; MUST BE POSITIVE AND LESS THAN 32768
000E2Cr 1               ; ----------------------------------------------------------------------------
000E2Cr 1               MKINT:
000E2Cr 1  A5 B0                lda     FACSIGN
000E2Er 1  30 0D                bmi     MI1
000E30r 1               ; ----------------------------------------------------------------------------
000E30r 1               ; CONVERT FAC TO INTEGER
000E30r 1               ; MUST BE -32767 <= FAC <= 32767
000E30r 1               ; ----------------------------------------------------------------------------
000E30r 1               AYINT:
000E30r 1  A5 AC                lda     FAC
000E32r 1  C9 90                cmp     #$90
000E34r 1  90 09                bcc     MI2
000E36r 1  A9 rr                lda     #<NEG32768
000E38r 1  A0 rr                ldy     #>NEG32768
000E3Ar 1  20 rr rr             jsr     FCOMP
000E3Dr 1               MI1:
000E3Dr 1  D0 74                bne     IQERR
000E3Fr 1               MI2:
000E3Fr 1  4C rr rr             jmp     QINT
000E42r 1               ; ----------------------------------------------------------------------------
000E42r 1               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
000E42r 1               ; ----------------------------------------------------------------------------
000E42r 1               ARRAY:
000E42r 1  A5 5E                lda     DIMFLG
000E44r 1  48                   pha
000E45r 1  A5 5F                lda     VALTYP
000E47r 1  48                   pha
000E48r 1  A0 00                ldy     #$00
000E4Ar 1               L2FDE:
000E4Ar 1  98                   tya
000E4Br 1  48                   pha
000E4Cr 1  A5 94                lda     VARNAM+1
000E4Er 1  48                   pha
000E4Fr 1  A5 93                lda     VARNAM
000E51r 1  48                   pha
000E52r 1  20 rr rr             jsr     MAKINT
000E55r 1  68                   pla
000E56r 1  85 93                sta     VARNAM
000E58r 1  68                   pla
000E59r 1  85 94                sta     VARNAM+1
000E5Br 1  68                   pla
000E5Cr 1  A8                   tay
000E5Dr 1  BA                   tsx
000E5Er 1  BD 02 01             lda     STACK+2,x
000E61r 1  48                   pha
000E62r 1  BD 01 01             lda     STACK+1,x
000E65r 1  48                   pha
000E66r 1  A5 AE                lda     FAC_LAST-1
000E68r 1  9D 02 01             sta     STACK+2,x
000E6Br 1  A5 AF                lda     FAC_LAST
000E6Dr 1  9D 01 01             sta     STACK+1,x
000E70r 1  C8                   iny
000E71r 1  20 C2 00             jsr     CHRGOT
000E74r 1  C9 2C                cmp     #$2C
000E76r 1  F0 D2                beq     L2FDE
000E78r 1  84 5D                sty     EOLPNTR
000E7Ar 1  20 rr rr             jsr     CHKCLS
000E7Dr 1  68                   pla
000E7Er 1  85 5F                sta     VALTYP
000E80r 1  68                   pla
000E81r 1  85 5E                sta     DIMFLG
000E83r 1               ; ----------------------------------------------------------------------------
000E83r 1               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
000E83r 1               ; ----------------------------------------------------------------------------
000E83r 1  A6 7D                ldx     ARYTAB
000E85r 1  A5 7E                lda     ARYTAB+1
000E87r 1               L301F:
000E87r 1  86 AA                stx     LOWTR
000E89r 1  85 AB                sta     LOWTR+1
000E8Br 1  C5 80                cmp     STREND+1
000E8Dr 1  D0 04                bne     L302B
000E8Fr 1  E4 7F                cpx     STREND
000E91r 1  F0 39                beq     MAKE_NEW_ARRAY
000E93r 1               L302B:
000E93r 1  A0 00                ldy     #$00
000E95r 1  B1 AA                lda     (LOWTR),y
000E97r 1  C8                   iny
000E98r 1  C5 93                cmp     VARNAM
000E9Ar 1  D0 06                bne     L303A
000E9Cr 1  A5 94                lda     VARNAM+1
000E9Er 1  D1 AA                cmp     (LOWTR),y
000EA0r 1  F0 16                beq     USE_OLD_ARRAY
000EA2r 1               L303A:
000EA2r 1  C8                   iny
000EA3r 1  B1 AA                lda     (LOWTR),y
000EA5r 1  18                   clc
000EA6r 1  65 AA                adc     LOWTR
000EA8r 1  AA                   tax
000EA9r 1  C8                   iny
000EAAr 1  B1 AA                lda     (LOWTR),y
000EACr 1  65 AB                adc     LOWTR+1
000EAEr 1  90 D7                bcc     L301F
000EB0r 1               ; ----------------------------------------------------------------------------
000EB0r 1               ; ERROR:  BAD SUBSCRIPTS
000EB0r 1               ; ----------------------------------------------------------------------------
000EB0r 1               SUBERR:
000EB0r 1  A2 10                ldx     #ERR_BADSUBS
000EB2r 1  2C                   .byte   $2C
000EB3r 1               ; ----------------------------------------------------------------------------
000EB3r 1               ; ERROR:  ILLEGAL QUANTITY
000EB3r 1               ; ----------------------------------------------------------------------------
000EB3r 1               IQERR:
000EB3r 1  A2 08                ldx     #ERR_ILLQTY
000EB5r 1               JER:
000EB5r 1  4C rr rr             jmp     ERROR
000EB8r 1               ; ----------------------------------------------------------------------------
000EB8r 1               ; FOUND THE ARRAY
000EB8r 1               ; ----------------------------------------------------------------------------
000EB8r 1               USE_OLD_ARRAY:
000EB8r 1  A2 12                ldx     #ERR_REDIMD
000EBAr 1  A5 5E                lda     DIMFLG
000EBCr 1  D0 F7                bne     JER
000EBEr 1  20 rr rr             jsr     GETARY
000EC1r 1  A5 5D                lda     EOLPNTR
000EC3r 1  A0 04                ldy     #$04
000EC5r 1  D1 AA                cmp     (LOWTR),y
000EC7r 1  D0 E7                bne     SUBERR
000EC9r 1  4C rr rr             jmp     FIND_ARRAY_ELEMENT
000ECCr 1               ; ----------------------------------------------------------------------------
000ECCr 1               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
000ECCr 1               ; ----------------------------------------------------------------------------
000ECCr 1               MAKE_NEW_ARRAY:
000ECCr 1  20 rr rr             jsr     GETARY
000ECFr 1  20 rr rr             jsr     REASON
000ED2r 1  A9 00                lda     #$00
000ED4r 1  A8                   tay
000ED5r 1  85 BB                sta     STRNG2+1
000ED7r 1  A2 04                ldx     #BYTES_PER_ELEMENT
000ED9r 1  86 BA                stx     STRNG2
000EDBr 1  A5 93                lda     VARNAM
000EDDr 1  91 AA                sta     (LOWTR),y
000EDFr 1  C8                   iny
000EE0r 1  A5 94                lda     VARNAM+1
000EE2r 1  91 AA                sta     (LOWTR),y
000EE4r 1  A5 5D                lda     EOLPNTR
000EE6r 1  C8                   iny
000EE7r 1  C8                   iny
000EE8r 1  C8                   iny
000EE9r 1  91 AA                sta     (LOWTR),y
000EEBr 1               L308A:
000EEBr 1  A2 0B                ldx     #$0B
000EEDr 1  A9 00                lda     #$00
000EEFr 1  24 5E                bit     DIMFLG
000EF1r 1  50 08                bvc     L309A
000EF3r 1  68                   pla
000EF4r 1  18                   clc
000EF5r 1  69 01                adc     #$01
000EF7r 1  AA                   tax
000EF8r 1  68                   pla
000EF9r 1  69 00                adc     #$00
000EFBr 1               L309A:
000EFBr 1  C8                   iny
000EFCr 1  91 AA                sta     (LOWTR),y
000EFEr 1  C8                   iny
000EFFr 1  8A                   txa
000F00r 1  91 AA                sta     (LOWTR),y
000F02r 1  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000F05r 1  86 BA                stx     STRNG2
000F07r 1  85 BB                sta     STRNG2+1
000F09r 1  A4 71                ldy     INDEX
000F0Br 1  C6 5D                dec     EOLPNTR
000F0Dr 1  D0 DC                bne     L308A
000F0Fr 1  65 A5                adc     HIGHDS+1
000F11r 1  B0 5D                bcs     GME
000F13r 1  85 A5                sta     HIGHDS+1
000F15r 1  A8                   tay
000F16r 1  8A                   txa
000F17r 1  65 A4                adc     HIGHDS
000F19r 1  90 03                bcc     L30BD
000F1Br 1  C8                   iny
000F1Cr 1  F0 52                beq     GME
000F1Er 1               L30BD:
000F1Er 1  20 rr rr             jsr     REASON
000F21r 1  85 7F                sta     STREND
000F23r 1  84 80                sty     STREND+1
000F25r 1  A9 00                lda     #$00
000F27r 1  E6 BB                inc     STRNG2+1
000F29r 1  A4 BA                ldy     STRNG2
000F2Br 1  F0 05                beq     L30D1
000F2Dr 1               L30CC:
000F2Dr 1  88                   dey
000F2Er 1  91 A4                sta     (HIGHDS),y
000F30r 1  D0 FB                bne     L30CC
000F32r 1               L30D1:
000F32r 1  C6 A5                dec     HIGHDS+1
000F34r 1  C6 BB                dec     STRNG2+1
000F36r 1  D0 F5                bne     L30CC
000F38r 1  E6 A5                inc     HIGHDS+1
000F3Ar 1  38                   sec
000F3Br 1  A5 7F                lda     STREND
000F3Dr 1  E5 AA                sbc     LOWTR
000F3Fr 1  A0 02                ldy     #$02
000F41r 1  91 AA                sta     (LOWTR),y
000F43r 1  A5 80                lda     STREND+1
000F45r 1  C8                   iny
000F46r 1  E5 AB                sbc     LOWTR+1
000F48r 1  91 AA                sta     (LOWTR),y
000F4Ar 1  A5 5E                lda     DIMFLG
000F4Cr 1  D0 58                bne     RTS9
000F4Er 1  C8                   iny
000F4Fr 1               ; ----------------------------------------------------------------------------
000F4Fr 1               ; FIND SPECIFIED ARRAY ELEMENT
000F4Fr 1               ;
000F4Fr 1               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
000F4Fr 1               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
000F4Fr 1               ; ----------------------------------------------------------------------------
000F4Fr 1               FIND_ARRAY_ELEMENT:
000F4Fr 1  B1 AA                lda     (LOWTR),y
000F51r 1  85 5D                sta     EOLPNTR
000F53r 1  A9 00                lda     #$00
000F55r 1  85 BA                sta     STRNG2
000F57r 1               L30F6:
000F57r 1  85 BB                sta     STRNG2+1
000F59r 1  C8                   iny
000F5Ar 1  68                   pla
000F5Br 1  AA                   tax
000F5Cr 1  85 AE                sta     FAC_LAST-1
000F5Er 1  68                   pla
000F5Fr 1  85 AF                sta     FAC_LAST
000F61r 1  D1 AA                cmp     (LOWTR),y
000F63r 1  90 0E                bcc     FAE2
000F65r 1  D0 06                bne     GSE
000F67r 1  C8                   iny
000F68r 1  8A                   txa
000F69r 1  D1 AA                cmp     (LOWTR),y
000F6Br 1  90 07                bcc     FAE3
000F6Dr 1               ; ----------------------------------------------------------------------------
000F6Dr 1               GSE:
000F6Dr 1  4C rr rr             jmp     SUBERR
000F70r 1               GME:
000F70r 1  4C rr rr             jmp     MEMERR
000F73r 1               ; ----------------------------------------------------------------------------
000F73r 1               FAE2:
000F73r 1  C8                   iny
000F74r 1               FAE3:
000F74r 1  A5 BB                lda     STRNG2+1
000F76r 1  05 BA                ora     STRNG2
000F78r 1  18                   clc
000F79r 1  F0 0A                beq     L3124
000F7Br 1  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000F7Er 1  8A                   txa
000F7Fr 1  65 AE                adc     FAC_LAST-1
000F81r 1  AA                   tax
000F82r 1  98                   tya
000F83r 1  A4 71                ldy     INDEX
000F85r 1               L3124:
000F85r 1  65 AF                adc     FAC_LAST
000F87r 1  86 BA                stx     STRNG2
000F89r 1  C6 5D                dec     EOLPNTR
000F8Br 1  D0 CA                bne     L30F6
000F8Dr 1  06 BA                asl     STRNG2
000F8Fr 1  2A                   rol     a
000F90r 1  B0 DB                bcs     GSE
000F92r 1  06 BA                asl     STRNG2
000F94r 1  2A                   rol     a
000F95r 1  B0 D6                bcs     GSE
000F97r 1  A8                   tay
000F98r 1  A5 BA                lda     STRNG2
000F9Ar 1  65 A4                adc     HIGHDS
000F9Cr 1  85 95                sta     VARPNT
000F9Er 1  98                   tya
000F9Fr 1  65 A5                adc     HIGHDS+1
000FA1r 1  85 96                sta     VARPNT+1
000FA3r 1  A8                   tay
000FA4r 1  A5 95                lda     VARPNT
000FA6r 1               RTS9:
000FA6r 1  60                   rts
000FA7r 1               ; ----------------------------------------------------------------------------
000FA7r 1               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
000FA7r 1               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
000FA7r 1               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
000FA7r 1               ; ----------------------------------------------------------------------------
000FA7r 1               MULTIPLY_SUBSCRIPT:
000FA7r 1  84 71                sty     INDEX
000FA9r 1  B1 AA                lda     (LOWTR),y
000FABr 1  85 76                sta     RESULT_LAST-2
000FADr 1  88                   dey
000FAEr 1  B1 AA                lda     (LOWTR),y
000FB0r 1  85 77                sta     RESULT_LAST-1
000FB2r 1  A9 10                lda     #$10
000FB4r 1  85 A8                sta     INDX
000FB6r 1  A2 00                ldx     #$00
000FB8r 1  A0 00                ldy     #$00
000FBAr 1               L3163:
000FBAr 1  8A                   txa
000FBBr 1  0A                   asl     a
000FBCr 1  AA                   tax
000FBDr 1  98                   tya
000FBEr 1  2A                   rol     a
000FBFr 1  A8                   tay
000FC0r 1  B0 AE                bcs     GME
000FC2r 1  06 BA                asl     STRNG2
000FC4r 1  26 BB                rol     STRNG2+1
000FC6r 1  90 0B                bcc     L317C
000FC8r 1  18                   clc
000FC9r 1  8A                   txa
000FCAr 1  65 76                adc     RESULT_LAST-2
000FCCr 1  AA                   tax
000FCDr 1  98                   tya
000FCEr 1  65 77                adc     RESULT_LAST-1
000FD0r 1  A8                   tay
000FD1r 1  B0 9D                bcs     GME
000FD3r 1               L317C:
000FD3r 1  C6 A8                dec     INDX
000FD5r 1  D0 E3                bne     L3163
000FD7r 1  60                   rts
000FD8r 1               ; ----------------------------------------------------------------------------
000FD8r 1               ; "FRE" FUNCTION
000FD8r 1               ;
000FD8r 1               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
000FD8r 1               ; ----------------------------------------------------------------------------
000FD8r 1               FRE:
000FD8r 1  A5 5F                lda     VALTYP
000FDAr 1  F0 03                beq     L3188
000FDCr 1  20 rr rr             jsr     FREFAC
000FDFr 1               L3188:
000FDFr 1  20 rr rr             jsr     GARBAG
000FE2r 1  38                   sec
000FE3r 1  A5 81                lda     FRETOP
000FE5r 1  E5 7F                sbc     STREND
000FE7r 1  A8                   tay
000FE8r 1  A5 82                lda     FRETOP+1
000FEAr 1  E5 80                sbc     STREND+1
000FECr 1               ; FALL INTO GIVAYF TO FLOAT THE VALUE
000FECr 1               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
000FECr 1               ; ----------------------------------------------------------------------------
000FECr 1               ; FLOAT THE SIGNED INTEGER IN A,Y
000FECr 1               ; ----------------------------------------------------------------------------
000FECr 1               GIVAYF:
000FECr 1  A2 00                ldx     #$00
000FEEr 1  86 5F                stx     VALTYP
000FF0r 1  85 AD                sta     FAC+1
000FF2r 1  84 AE                sty     FAC+2
000FF4r 1  A2 90                ldx     #$90
000FF6r 1  4C rr rr             jmp     FLOAT1
000FF9r 1               POS:
000FF9r 1  A4 0E                ldy     POSX
000FFBr 1               ; ----------------------------------------------------------------------------
000FFBr 1               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
000FFBr 1               ; ----------------------------------------------------------------------------
000FFBr 1               SNGFLT:
000FFBr 1  A9 00                lda     #$00
000FFDr 1  F0 ED                beq     GIVAYF
000FFFr 1               ; ----------------------------------------------------------------------------
000FFFr 1               ; CHECK FOR DIRECT OR RUNNING MODE
000FFFr 1               ; GIVING ERROR IF DIRECT MODE
000FFFr 1               ; ----------------------------------------------------------------------------
000FFFr 1               ERRDIR:
000FFFr 1  A6 88                ldx     CURLIN+1
001001r 1  E8                   inx
001002r 1  D0 A2                bne     RTS9
001004r 1  A2 16                ldx     #ERR_ILLDIR
001006r 1               L31AF:
001006r 1  4C rr rr             jmp     ERROR
001009r 1               DEF:
001009r 1  20 rr rr             jsr     FNC
00100Cr 1  20 rr rr             jsr     ERRDIR
00100Fr 1  20 rr rr             jsr     CHKOPN
001012r 1  A9 80                lda     #$80
001014r 1  85 61                sta     SUBFLG
001016r 1  20 rr rr             jsr     PTRGET
001019r 1  20 rr rr             jsr     CHKNUM
00101Cr 1  20 rr rr             jsr     CHKCLS
00101Fr 1  A9 AB                lda     #TOKEN_EQUAL
001021r 1  20 rr rr             jsr     SYNCHR
001024r 1  A5 96                lda     VARPNT+1
001026r 1  48                   pha
001027r 1  A5 95                lda     VARPNT
001029r 1  48                   pha
00102Ar 1  A5 C4                lda     TXTPTR+1
00102Cr 1  48                   pha
00102Dr 1  A5 C3                lda     TXTPTR
00102Fr 1  48                   pha
001030r 1  20 rr rr             jsr     DATA
001033r 1  4C rr rr             jmp     L3250
001036r 1               FNC:
001036r 1  A9 9E                lda     #TOKEN_FN
001038r 1  20 rr rr             jsr     SYNCHR
00103Br 1  09 80                ora     #$80
00103Dr 1  85 61                sta     SUBFLG
00103Fr 1  20 rr rr             jsr     PTRGET3
001042r 1  85 9C                sta     FNCNAM
001044r 1  84 9D                sty     FNCNAM+1
001046r 1  4C rr rr             jmp     CHKNUM
001049r 1               L31F3:
001049r 1  20 rr rr             jsr     FNC
00104Cr 1  A5 9D                lda     FNCNAM+1
00104Er 1  48                   pha
00104Fr 1  A5 9C                lda     FNCNAM
001051r 1  48                   pha
001052r 1  20 rr rr             jsr     PARCHK
001055r 1  20 rr rr             jsr     CHKNUM
001058r 1  68                   pla
001059r 1  85 9C                sta     FNCNAM
00105Br 1  68                   pla
00105Cr 1  85 9D                sta     FNCNAM+1
00105Er 1  A0 02                ldy     #$02
001060r 1  A2 20                ldx     #ERR_UNDEFFN
001062r 1  B1 9C                lda     (FNCNAM),y
001064r 1  F0 A0                beq     L31AF
001066r 1  85 95                sta     VARPNT
001068r 1  AA                   tax
001069r 1  C8                   iny
00106Ar 1  B1 9C                lda     (FNCNAM),y
00106Cr 1  85 96                sta     VARPNT+1
00106Er 1               L3219:
00106Er 1  B1 95                lda     (VARPNT),y
001070r 1  48                   pha
001071r 1  88                   dey
001072r 1  10 FA                bpl     L3219
001074r 1  A4 96                ldy     VARPNT+1
001076r 1  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
001079r 1  A5 C4                lda     TXTPTR+1
00107Br 1  48                   pha
00107Cr 1  A5 C3                lda     TXTPTR
00107Er 1  48                   pha
00107Fr 1  B1 9C                lda     (FNCNAM),y
001081r 1  85 C3                sta     TXTPTR
001083r 1  C8                   iny
001084r 1  B1 9C                lda     (FNCNAM),y
001086r 1  85 C4                sta     TXTPTR+1
001088r 1  A5 96                lda     VARPNT+1
00108Ar 1  48                   pha
00108Br 1  A5 95                lda     VARPNT
00108Dr 1  48                   pha
00108Er 1  20 rr rr             jsr     FRMNUM
001091r 1  68                   pla
001092r 1  85 9C                sta     FNCNAM
001094r 1  68                   pla
001095r 1  85 9D                sta     FNCNAM+1
001097r 1  20 C2 00             jsr     CHRGOT
00109Ar 1  F0 03                beq     L324A
00109Cr 1  4C rr rr             jmp     SYNERR
00109Fr 1               L324A:
00109Fr 1  68                   pla
0010A0r 1  85 C3                sta     TXTPTR
0010A2r 1  68                   pla
0010A3r 1  85 C4                sta     TXTPTR+1
0010A5r 1               L3250:
0010A5r 1  A0 00                ldy     #$00
0010A7r 1  68                   pla
0010A8r 1  91 9C                sta     (FNCNAM),y
0010AAr 1  68                   pla
0010ABr 1  C8                   iny
0010ACr 1  91 9C                sta     (FNCNAM),y
0010AEr 1  68                   pla
0010AFr 1  C8                   iny
0010B0r 1  91 9C                sta     (FNCNAM),y
0010B2r 1  68                   pla
0010B3r 1  C8                   iny
0010B4r 1  91 9C                sta     (FNCNAM),y
0010B6r 1  60                   rts
0010B7r 1               ; ----------------------------------------------------------------------------
0010B7r 1               ; "STR$" FUNCTION
0010B7r 1               ; ----------------------------------------------------------------------------
0010B7r 1               STR:
0010B7r 1  20 rr rr             jsr     CHKNUM
0010BAr 1  A0 00                ldy     #$00
0010BCr 1  20 rr rr             jsr     FOUT1
0010BFr 1  68                   pla
0010C0r 1  68                   pla
0010C1r 1  A9 FF                lda     #$FF
0010C3r 1  A0 00                ldy     #$00
0010C5r 1  F0 12                beq     STRLIT
0010C7r 1               ; ----------------------------------------------------------------------------
0010C7r 1               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
0010C7r 1               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
0010C7r 1               ; ----------------------------------------------------------------------------
0010C7r 1               STRINI:
0010C7r 1  A6 AE                ldx     FAC_LAST-1
0010C9r 1  A4 AF                ldy     FAC_LAST
0010CBr 1  86 9E                stx     DSCPTR
0010CDr 1  84 9F                sty     DSCPTR+1
0010CFr 1               ; ----------------------------------------------------------------------------
0010CFr 1               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
0010CFr 1               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
0010CFr 1               ; ----------------------------------------------------------------------------
0010CFr 1               STRSPA:
0010CFr 1  20 rr rr             jsr     GETSPA
0010D2r 1  86 AD                stx     FAC+1
0010D4r 1  84 AE                sty     FAC+2
0010D6r 1  85 AC                sta     FAC
0010D8r 1  60                   rts
0010D9r 1               ; ----------------------------------------------------------------------------
0010D9r 1               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
0010D9r 1               ; AND TERMINATED BY $00 OR QUOTATION MARK
0010D9r 1               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
0010D9r 1               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
0010D9r 1               ; ----------------------------------------------------------------------------
0010D9r 1               STRLIT:
0010D9r 1  A2 22                ldx     #$22
0010DBr 1  86 5B                stx     CHARAC
0010DDr 1  86 5C                stx     ENDCHR
0010DFr 1               ; ----------------------------------------------------------------------------
0010DFr 1               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
0010DFr 1               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
0010DFr 1               ;
0010DFr 1               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
0010DFr 1               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
0010DFr 1               ; ----------------------------------------------------------------------------
0010DFr 1               STRLT2:
0010DFr 1  85 B8                sta     STRNG1
0010E1r 1  84 B9                sty     STRNG1+1
0010E3r 1  85 AD                sta     FAC+1
0010E5r 1  84 AE                sty     FAC+2
0010E7r 1  A0 FF                ldy     #$FF
0010E9r 1               L3298:
0010E9r 1  C8                   iny
0010EAr 1  B1 B8                lda     (STRNG1),y
0010ECr 1  F0 0C                beq     L32A9
0010EEr 1  C5 5B                cmp     CHARAC
0010F0r 1  F0 04                beq     L32A5
0010F2r 1  C5 5C                cmp     ENDCHR
0010F4r 1  D0 F3                bne     L3298
0010F6r 1               L32A5:
0010F6r 1  C9 22                cmp     #$22
0010F8r 1  F0 01                beq     L32AA
0010FAr 1               L32A9:
0010FAr 1  18                   clc
0010FBr 1               L32AA:
0010FBr 1  84 AC                sty     FAC
0010FDr 1  98                   tya
0010FEr 1  65 B8                adc     STRNG1
001100r 1  85 BA                sta     STRNG2
001102r 1  A6 B9                ldx     STRNG1+1
001104r 1  90 01                bcc     L32B6
001106r 1  E8                   inx
001107r 1               L32B6:
001107r 1  86 BB                stx     STRNG2+1
001109r 1  A5 B9                lda     STRNG1+1
00110Br 1  D0 0B                bne     PUTNEW
00110Dr 1  98                   tya
00110Er 1  20 rr rr             jsr     STRINI
001111r 1  A6 B8                ldx     STRNG1
001113r 1  A4 B9                ldy     STRNG1+1
001115r 1  20 rr rr             jsr     MOVSTR
001118r 1               ; ----------------------------------------------------------------------------
001118r 1               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
001118r 1               ;
001118r 1               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
001118r 1               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
001118r 1               ; ----------------------------------------------------------------------------
001118r 1               PUTNEW:
001118r 1  A6 65                ldx     TEMPPT
00111Ar 1  E0 71                cpx     #TEMPST+9
00111Cr 1  D0 05                bne     PUTEMP
00111Er 1  A2 1C                ldx     #ERR_FRMCPX
001120r 1               JERR:
001120r 1  4C rr rr             jmp     ERROR
001123r 1               PUTEMP:
001123r 1  A5 AC                lda     FAC
001125r 1  95 00                sta     0,x
001127r 1  A5 AD                lda     FAC+1
001129r 1  95 01                sta     1,x
00112Br 1  A5 AE                lda     FAC+2
00112Dr 1  95 02                sta     2,x
00112Fr 1  A0 00                ldy     #$00
001131r 1  86 AE                stx     FAC_LAST-1
001133r 1  84 AF                sty     FAC_LAST
001135r 1  88                   dey
001136r 1  84 5F                sty     VALTYP
001138r 1  86 66                stx     LASTPT
00113Ar 1  E8                   inx
00113Br 1  E8                   inx
00113Cr 1  E8                   inx
00113Dr 1  86 65                stx     TEMPPT
00113Fr 1  60                   rts
001140r 1               ; ----------------------------------------------------------------------------
001140r 1               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
001140r 1               ; (A)=# BYTES SPACE TO MAKE
001140r 1               ;
001140r 1               ; RETURN WITH (A) SAME,
001140r 1               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
001140r 1               ; ----------------------------------------------------------------------------
001140r 1               GETSPA:
001140r 1  46 60                lsr     DATAFLG
001142r 1               L32F1:
001142r 1  48                   pha
001143r 1  49 FF                eor     #$FF
001145r 1  38                   sec
001146r 1  65 81                adc     FRETOP
001148r 1  A4 82                ldy     FRETOP+1
00114Ar 1  B0 01                bcs     L32FC
00114Cr 1  88                   dey
00114Dr 1               L32FC:
00114Dr 1  C4 80                cpy     STREND+1
00114Fr 1  90 11                bcc     L3311
001151r 1  D0 04                bne     L3306
001153r 1  C5 7F                cmp     STREND
001155r 1  90 0B                bcc     L3311
001157r 1               L3306:
001157r 1  85 81                sta     FRETOP
001159r 1  84 82                sty     FRETOP+1
00115Br 1  85 83                sta     FRESPC
00115Dr 1  84 84                sty     FRESPC+1
00115Fr 1  AA                   tax
001160r 1  68                   pla
001161r 1  60                   rts
001162r 1               L3311:
001162r 1  A2 0C                ldx     #ERR_MEMFULL
001164r 1  A5 60                lda     DATAFLG
001166r 1  30 B8                bmi     JERR
001168r 1  20 rr rr             jsr     GARBAG
00116Br 1  A9 80                lda     #$80
00116Dr 1  85 60                sta     DATAFLG
00116Fr 1  68                   pla
001170r 1  D0 D0                bne     L32F1
001172r 1               ; ----------------------------------------------------------------------------
001172r 1               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
001172r 1               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
001172r 1               ; BELOW STRING AREA DOWN TO STREND.
001172r 1               ; ----------------------------------------------------------------------------
001172r 1               GARBAG:
001172r 1  A6 85                ldx     MEMSIZ
001174r 1  A5 86                lda     MEMSIZ+1
001176r 1               FINDHIGHESTSTRING:
001176r 1  86 81                stx     FRETOP
001178r 1  85 82                sta     FRETOP+1
00117Ar 1  A0 00                ldy     #$00
00117Cr 1  84 9D                sty     FNCNAM+1
00117Er 1  A5 7F                lda     STREND
001180r 1  A6 80                ldx     STREND+1
001182r 1  85 AA                sta     LOWTR
001184r 1  86 AB                stx     LOWTR+1
001186r 1  A9 68                lda     #TEMPST
001188r 1  A2 00                ldx     #$00
00118Ar 1  85 71                sta     INDEX
00118Cr 1  86 72                stx     INDEX+1
00118Er 1               L333D:
00118Er 1  C5 65                cmp     TEMPPT
001190r 1  F0 05                beq     L3346
001192r 1  20 rr rr             jsr     CHECK_VARIABLE
001195r 1  F0 F7                beq     L333D
001197r 1               L3346:
001197r 1  A9 06                lda     #BYTES_PER_VARIABLE
001199r 1  85 A0                sta     DSCLEN
00119Br 1  A5 7B                lda     VARTAB
00119Dr 1  A6 7C                ldx     VARTAB+1
00119Fr 1  85 71                sta     INDEX
0011A1r 1  86 72                stx     INDEX+1
0011A3r 1               L3352:
0011A3r 1  E4 7E                cpx     ARYTAB+1
0011A5r 1  D0 04                bne     L335A
0011A7r 1  C5 7D                cmp     ARYTAB
0011A9r 1  F0 05                beq     L335F
0011ABr 1               L335A:
0011ABr 1  20 rr rr             jsr     CHECK_SIMPLE_VARIABLE
0011AEr 1  F0 F3                beq     L3352
0011B0r 1               L335F:
0011B0r 1  85 A4                sta     HIGHDS
0011B2r 1  86 A5                stx     HIGHDS+1
0011B4r 1  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
0011B6r 1  85 A0                sta     DSCLEN
0011B8r 1               L3367:
0011B8r 1  A5 A4                lda     HIGHDS
0011BAr 1  A6 A5                ldx     HIGHDS+1
0011BCr 1               L336B:
0011BCr 1  E4 80                cpx     STREND+1
0011BEr 1  D0 07                bne     L3376
0011C0r 1  C5 7F                cmp     STREND
0011C2r 1  D0 03                bne     L3376
0011C4r 1  4C rr rr             jmp     MOVE_HIGHEST_STRING_TO_TOP
0011C7r 1               L3376:
0011C7r 1  85 71                sta     INDEX
0011C9r 1  86 72                stx     INDEX+1
0011CBr 1  A0 01                ldy     #$01
0011CDr 1  B1 71                lda     (INDEX),y
0011CFr 1  08                   php
0011D0r 1  C8                   iny
0011D1r 1  B1 71                lda     (INDEX),y
0011D3r 1  65 A4                adc     HIGHDS
0011D5r 1  85 A4                sta     HIGHDS
0011D7r 1  C8                   iny
0011D8r 1  B1 71                lda     (INDEX),y
0011DAr 1  65 A5                adc     HIGHDS+1
0011DCr 1  85 A5                sta     HIGHDS+1
0011DEr 1  28                   plp
0011DFr 1  10 D7                bpl     L3367
0011E1r 1  C8                   iny
0011E2r 1  B1 71                lda     (INDEX),y
0011E4r 1  0A                   asl     a
0011E5r 1  69 05                adc     #$05
0011E7r 1  65 71                adc     INDEX
0011E9r 1  85 71                sta     INDEX
0011EBr 1  90 02                bcc     L33A7
0011EDr 1  E6 72                inc     INDEX+1
0011EFr 1               L33A7:
0011EFr 1  A6 72                ldx     INDEX+1
0011F1r 1               L33A9:
0011F1r 1  E4 A5                cpx     HIGHDS+1
0011F3r 1  D0 04                bne     L33B1
0011F5r 1  C5 A4                cmp     HIGHDS
0011F7r 1  F0 C3                beq     L336B
0011F9r 1               L33B1:
0011F9r 1  20 rr rr             jsr     CHECK_VARIABLE
0011FCr 1  F0 F3                beq     L33A9
0011FEr 1               ; ----------------------------------------------------------------------------
0011FEr 1               ; PROCESS A SIMPLE VARIABLE
0011FEr 1               ; ----------------------------------------------------------------------------
0011FEr 1               CHECK_SIMPLE_VARIABLE:
0011FEr 1  C8                   iny
0011FFr 1  B1 71                lda     (INDEX),y
001201r 1  10 30                bpl     CHECK_BUMP
001203r 1  C8                   iny
001204r 1               ; ----------------------------------------------------------------------------
001204r 1               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
001204r 1               ; ----------------------------------------------------------------------------
001204r 1               CHECK_VARIABLE:
001204r 1  B1 71                lda     (INDEX),y
001206r 1  F0 2B                beq     CHECK_BUMP
001208r 1  C8                   iny
001209r 1  B1 71                lda     (INDEX),y
00120Br 1  AA                   tax
00120Cr 1  C8                   iny
00120Dr 1  B1 71                lda     (INDEX),y
00120Fr 1  C5 82                cmp     FRETOP+1
001211r 1  90 06                bcc     L33D5
001213r 1  D0 1E                bne     CHECK_BUMP
001215r 1  E4 81                cpx     FRETOP
001217r 1  B0 1A                bcs     CHECK_BUMP
001219r 1               L33D5:
001219r 1  C5 AB                cmp     LOWTR+1
00121Br 1  90 16                bcc     CHECK_BUMP
00121Dr 1  D0 04                bne     L33DF
00121Fr 1  E4 AA                cpx     LOWTR
001221r 1  90 10                bcc     CHECK_BUMP
001223r 1               L33DF:
001223r 1  86 AA                stx     LOWTR
001225r 1  85 AB                sta     LOWTR+1
001227r 1  A5 71                lda     INDEX
001229r 1  A6 72                ldx     INDEX+1
00122Br 1  85 9C                sta     FNCNAM
00122Dr 1  86 9D                stx     FNCNAM+1
00122Fr 1  A5 A0                lda     DSCLEN
001231r 1  85 A2                sta     Z52
001233r 1               ; ----------------------------------------------------------------------------
001233r 1               ; ADD (DSCLEN) TO PNTR IN INDEX
001233r 1               ; RETURN WITH Y=0, PNTR ALSO IN X,A
001233r 1               ; ----------------------------------------------------------------------------
001233r 1               CHECK_BUMP:
001233r 1  A5 A0                lda     DSCLEN
001235r 1  18                   clc
001236r 1  65 71                adc     INDEX
001238r 1  85 71                sta     INDEX
00123Ar 1  90 02                bcc     L33FA
00123Cr 1  E6 72                inc     INDEX+1
00123Er 1               L33FA:
00123Er 1  A6 72                ldx     INDEX+1
001240r 1  A0 00                ldy     #$00
001242r 1  60                   rts
001243r 1               ; ----------------------------------------------------------------------------
001243r 1               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
001243r 1               ; TO TOP AND GO BACK FOR ANOTHER
001243r 1               ; ----------------------------------------------------------------------------
001243r 1               MOVE_HIGHEST_STRING_TO_TOP:
001243r 1  A6 9D                ldx     FNCNAM+1
001245r 1  F0 F7                beq     L33FA
001247r 1  A5 A2                lda     Z52
001249r 1  29 04                and     #$04
00124Br 1  4A                   lsr     a
00124Cr 1  A8                   tay
00124Dr 1  85 A2                sta     Z52
00124Fr 1  B1 9C                lda     (FNCNAM),y
001251r 1  65 AA                adc     LOWTR
001253r 1  85 A6                sta     HIGHTR
001255r 1  A5 AB                lda     LOWTR+1
001257r 1  69 00                adc     #$00
001259r 1  85 A7                sta     HIGHTR+1
00125Br 1  A5 81                lda     FRETOP
00125Dr 1  A6 82                ldx     FRETOP+1
00125Fr 1  85 A4                sta     HIGHDS
001261r 1  86 A5                stx     HIGHDS+1
001263r 1  20 rr rr             jsr     BLTU2
001266r 1  A4 A2                ldy     Z52
001268r 1  C8                   iny
001269r 1  A5 A4                lda     HIGHDS
00126Br 1  91 9C                sta     (FNCNAM),y
00126Dr 1  AA                   tax
00126Er 1  E6 A5                inc     HIGHDS+1
001270r 1  A5 A5                lda     HIGHDS+1
001272r 1  C8                   iny
001273r 1  91 9C                sta     (FNCNAM),y
001275r 1  4C rr rr             jmp     FINDHIGHESTSTRING
001278r 1               ; ----------------------------------------------------------------------------
001278r 1               ; CONCATENATE TWO STRINGS
001278r 1               ; ----------------------------------------------------------------------------
001278r 1               CAT:
001278r 1  A5 AF                lda     FAC_LAST
00127Ar 1  48                   pha
00127Br 1  A5 AE                lda     FAC_LAST-1
00127Dr 1  48                   pha
00127Er 1  20 rr rr             jsr     FRM_ELEMENT
001281r 1  20 rr rr             jsr     CHKSTR
001284r 1  68                   pla
001285r 1  85 B8                sta     STRNG1
001287r 1  68                   pla
001288r 1  85 B9                sta     STRNG1+1
00128Ar 1  A0 00                ldy     #$00
00128Cr 1  B1 B8                lda     (STRNG1),y
00128Er 1  18                   clc
00128Fr 1  71 AE                adc     (FAC_LAST-1),y
001291r 1  90 05                bcc     L3454
001293r 1  A2 1A                ldx     #ERR_STRLONG
001295r 1  4C rr rr             jmp     ERROR
001298r 1               L3454:
001298r 1  20 rr rr             jsr     STRINI
00129Br 1  20 rr rr             jsr     MOVINS
00129Er 1  A5 9E                lda     DSCPTR
0012A0r 1  A4 9F                ldy     DSCPTR+1
0012A2r 1  20 rr rr             jsr     FRETMP
0012A5r 1  20 rr rr             jsr     MOVSTR1
0012A8r 1  A5 B8                lda     STRNG1
0012AAr 1  A4 B9                ldy     STRNG1+1
0012ACr 1  20 rr rr             jsr     FRETMP
0012AFr 1  20 rr rr             jsr     PUTNEW
0012B2r 1  4C rr rr             jmp     FRMEVL2
0012B5r 1               ; ----------------------------------------------------------------------------
0012B5r 1               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
0012B5r 1               ; AND MOVE DESCRIBED STRING TO (FRESPC)
0012B5r 1               ; ----------------------------------------------------------------------------
0012B5r 1               MOVINS:
0012B5r 1  A0 00                ldy     #$00
0012B7r 1  B1 B8                lda     (STRNG1),y
0012B9r 1  48                   pha
0012BAr 1  C8                   iny
0012BBr 1  B1 B8                lda     (STRNG1),y
0012BDr 1  AA                   tax
0012BEr 1  C8                   iny
0012BFr 1  B1 B8                lda     (STRNG1),y
0012C1r 1  A8                   tay
0012C2r 1  68                   pla
0012C3r 1               ; ----------------------------------------------------------------------------
0012C3r 1               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
0012C3r 1               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
0012C3r 1               ; ----------------------------------------------------------------------------
0012C3r 1               MOVSTR:
0012C3r 1  86 71                stx     INDEX
0012C5r 1  84 72                sty     INDEX+1
0012C7r 1               MOVSTR1:
0012C7r 1  A8                   tay
0012C8r 1  F0 0A                beq     L3490
0012CAr 1  48                   pha
0012CBr 1               L3487:
0012CBr 1  88                   dey
0012CCr 1  B1 71                lda     (INDEX),y
0012CEr 1  91 83                sta     (FRESPC),y
0012D0r 1  98                   tya
0012D1r 1  D0 F8                bne     L3487
0012D3r 1  68                   pla
0012D4r 1               L3490:
0012D4r 1  18                   clc
0012D5r 1  65 83                adc     FRESPC
0012D7r 1  85 83                sta     FRESPC
0012D9r 1  90 02                bcc     L3499
0012DBr 1  E6 84                inc     FRESPC+1
0012DDr 1               L3499:
0012DDr 1  60                   rts
0012DEr 1               ; ----------------------------------------------------------------------------
0012DEr 1               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
0012DEr 1               ; ----------------------------------------------------------------------------
0012DEr 1               FRESTR:
0012DEr 1  20 rr rr             jsr     CHKSTR
0012E1r 1               ; ----------------------------------------------------------------------------
0012E1r 1               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
0012E1r 1               ; A TEMPORARY STRING, RELEASE IT.
0012E1r 1               ; ----------------------------------------------------------------------------
0012E1r 1               FREFAC:
0012E1r 1  A5 AE                lda     FAC_LAST-1
0012E3r 1  A4 AF                ldy     FAC_LAST
0012E5r 1               ; ----------------------------------------------------------------------------
0012E5r 1               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
0012E5r 1               ; A TEMPORARY STRING, RELEASE IT.
0012E5r 1               ; ----------------------------------------------------------------------------
0012E5r 1               FRETMP:
0012E5r 1  85 71                sta     INDEX
0012E7r 1  84 72                sty     INDEX+1
0012E9r 1  20 rr rr             jsr     FRETMS
0012ECr 1  08                   php
0012EDr 1  A0 00                ldy     #$00
0012EFr 1  B1 71                lda     (INDEX),y
0012F1r 1  48                   pha
0012F2r 1  C8                   iny
0012F3r 1  B1 71                lda     (INDEX),y
0012F5r 1  AA                   tax
0012F6r 1  C8                   iny
0012F7r 1  B1 71                lda     (INDEX),y
0012F9r 1  A8                   tay
0012FAr 1  68                   pla
0012FBr 1  28                   plp
0012FCr 1  D0 13                bne     L34CD
0012FEr 1  C4 82                cpy     FRETOP+1
001300r 1  D0 0F                bne     L34CD
001302r 1  E4 81                cpx     FRETOP
001304r 1  D0 0B                bne     L34CD
001306r 1  48                   pha
001307r 1  18                   clc
001308r 1  65 81                adc     FRETOP
00130Ar 1  85 81                sta     FRETOP
00130Cr 1  90 02                bcc     L34CC
00130Er 1  E6 82                inc     FRETOP+1
001310r 1               L34CC:
001310r 1  68                   pla
001311r 1               L34CD:
001311r 1  86 71                stx     INDEX
001313r 1  84 72                sty     INDEX+1
001315r 1  60                   rts
001316r 1               ; ----------------------------------------------------------------------------
001316r 1               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
001316r 1               ; ----------------------------------------------------------------------------
001316r 1               FRETMS:
001316r 1  C4 67                cpy     LASTPT+1
001318r 1  D0 0C                bne     L34E2
00131Ar 1  C5 66                cmp     LASTPT
00131Cr 1  D0 08                bne     L34E2
00131Er 1  85 65                sta     TEMPPT
001320r 1  E9 03                sbc     #$03
001322r 1  85 66                sta     LASTPT
001324r 1  A0 00                ldy     #$00
001326r 1               L34E2:
001326r 1  60                   rts
001327r 1               ; ----------------------------------------------------------------------------
001327r 1               ; "CHR$" FUNCTION
001327r 1               ; ----------------------------------------------------------------------------
001327r 1               CHRSTR:
001327r 1  20 rr rr             jsr     CONINT
00132Ar 1  8A                   txa
00132Br 1  48                   pha
00132Cr 1  A9 01                lda     #$01
00132Er 1  20 rr rr             jsr     STRSPA
001331r 1  68                   pla
001332r 1  A0 00                ldy     #$00
001334r 1  91 AD                sta     (FAC+1),y
001336r 1  68                   pla
001337r 1  68                   pla
001338r 1  4C rr rr             jmp     PUTNEW
00133Br 1               ; ----------------------------------------------------------------------------
00133Br 1               ; "LEFT$" FUNCTION
00133Br 1               ; ----------------------------------------------------------------------------
00133Br 1               LEFTSTR:
00133Br 1  20 rr rr             jsr     SUBSTRING_SETUP
00133Er 1  D1 9E                cmp     (DSCPTR),y
001340r 1  98                   tya
001341r 1               SUBSTRING1:
001341r 1  90 04                bcc     L3503
001343r 1  B1 9E                lda     (DSCPTR),y
001345r 1  AA                   tax
001346r 1  98                   tya
001347r 1               L3503:
001347r 1  48                   pha
001348r 1               SUBSTRING2:
001348r 1  8A                   txa
001349r 1               SUBSTRING3:
001349r 1  48                   pha
00134Ar 1  20 rr rr             jsr     STRSPA
00134Dr 1  A5 9E                lda     DSCPTR
00134Fr 1  A4 9F                ldy     DSCPTR+1
001351r 1  20 rr rr             jsr     FRETMP
001354r 1  68                   pla
001355r 1  A8                   tay
001356r 1  68                   pla
001357r 1  18                   clc
001358r 1  65 71                adc     INDEX
00135Ar 1  85 71                sta     INDEX
00135Cr 1  90 02                bcc     L351C
00135Er 1  E6 72                inc     INDEX+1
001360r 1               L351C:
001360r 1  98                   tya
001361r 1  20 rr rr             jsr     MOVSTR1
001364r 1  4C rr rr             jmp     PUTNEW
001367r 1               ; ----------------------------------------------------------------------------
001367r 1               ; "RIGHT$" FUNCTION
001367r 1               ; ----------------------------------------------------------------------------
001367r 1               RIGHTSTR:
001367r 1  20 rr rr             jsr     SUBSTRING_SETUP
00136Ar 1  18                   clc
00136Br 1  F1 9E                sbc     (DSCPTR),y
00136Dr 1  49 FF                eor     #$FF
00136Fr 1  4C rr rr             jmp     SUBSTRING1
001372r 1               ; ----------------------------------------------------------------------------
001372r 1               ; "MID$" FUNCTION
001372r 1               ; ----------------------------------------------------------------------------
001372r 1               MIDSTR:
001372r 1  A9 FF                lda     #$FF
001374r 1  85 AF                sta     FAC_LAST
001376r 1  20 C2 00             jsr     CHRGOT
001379r 1  C9 29                cmp     #$29
00137Br 1  F0 06                beq     L353F
00137Dr 1  20 rr rr             jsr     CHKCOM
001380r 1  20 rr rr             jsr     GETBYT
001383r 1               L353F:
001383r 1  20 rr rr             jsr     SUBSTRING_SETUP
001386r 1  CA                   dex
001387r 1  8A                   txa
001388r 1  48                   pha
001389r 1  18                   clc
00138Ar 1  A2 00                ldx     #$00
00138Cr 1  F1 9E                sbc     (DSCPTR),y
00138Er 1  B0 B8                bcs     SUBSTRING2
001390r 1  49 FF                eor     #$FF
001392r 1  C5 AF                cmp     FAC_LAST
001394r 1  90 B3                bcc     SUBSTRING3
001396r 1  A5 AF                lda     FAC_LAST
001398r 1  B0 AF                bcs     SUBSTRING3
00139Ar 1               ; ----------------------------------------------------------------------------
00139Ar 1               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
00139Ar 1               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
00139Ar 1               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
00139Ar 1               ; ----------------------------------------------------------------------------
00139Ar 1               SUBSTRING_SETUP:
00139Ar 1  20 rr rr             jsr     CHKCLS
00139Dr 1  68                   pla
00139Er 1  85 A2                sta     JMPADRS+1
0013A0r 1  68                   pla
0013A1r 1  85 A3                sta     JMPADRS+2
0013A3r 1  68                   pla
0013A4r 1  68                   pla
0013A5r 1  68                   pla
0013A6r 1  AA                   tax
0013A7r 1  68                   pla
0013A8r 1  85 9E                sta     DSCPTR
0013AAr 1  68                   pla
0013ABr 1  85 9F                sta     DSCPTR+1
0013ADr 1  A0 00                ldy     #$00
0013AFr 1  8A                   txa
0013B0r 1  F0 21                beq     GOIQ
0013B2r 1  E6 A2                inc     JMPADRS+1
0013B4r 1  6C A2 00             jmp     (JMPADRS+1)
0013B7r 1               ; ----------------------------------------------------------------------------
0013B7r 1               ; "LEN" FUNCTION
0013B7r 1               ; ----------------------------------------------------------------------------
0013B7r 1               LEN:
0013B7r 1  20 rr rr             jsr     GETSTR
0013BAr 1               SNGFLT1:
0013BAr 1  4C rr rr             jmp     SNGFLT
0013BDr 1               ; ----------------------------------------------------------------------------
0013BDr 1               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
0013BDr 1               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
0013BDr 1               ; ----------------------------------------------------------------------------
0013BDr 1               GETSTR:
0013BDr 1  20 rr rr             jsr     FRESTR
0013C0r 1  A2 00                ldx     #$00
0013C2r 1  86 5F                stx     VALTYP
0013C4r 1  A8                   tay
0013C5r 1  60                   rts
0013C6r 1               ; ----------------------------------------------------------------------------
0013C6r 1               ; "ASC" FUNCTION
0013C6r 1               ; ----------------------------------------------------------------------------
0013C6r 1               ASC:
0013C6r 1  20 rr rr             jsr     GETSTR
0013C9r 1  F0 08                beq     GOIQ
0013CBr 1  A0 00                ldy     #$00
0013CDr 1  B1 71                lda     (INDEX),y
0013CFr 1  A8                   tay
0013D0r 1  4C rr rr             jmp     SNGFLT1
0013D3r 1               ; ----------------------------------------------------------------------------
0013D3r 1               GOIQ:
0013D3r 1  4C rr rr             jmp     IQERR
0013D6r 1               ; ----------------------------------------------------------------------------
0013D6r 1               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
0013D6r 1               ; TO SINGLE BYTE IN X-REG
0013D6r 1               ; ----------------------------------------------------------------------------
0013D6r 1               GTBYTC:
0013D6r 1  20 BC 00             jsr     CHRGET
0013D9r 1               ; ----------------------------------------------------------------------------
0013D9r 1               ; EVALUATE EXPRESSION AT TXTPTR, AND
0013D9r 1               ; CONVERT IT TO SINGLE BYTE IN X-REG
0013D9r 1               ; ----------------------------------------------------------------------------
0013D9r 1               GETBYT:
0013D9r 1  20 rr rr             jsr     FRMNUM
0013DCr 1               ; ----------------------------------------------------------------------------
0013DCr 1               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
0013DCr 1               ; ----------------------------------------------------------------------------
0013DCr 1               CONINT:
0013DCr 1  20 rr rr             jsr     MKINT
0013DFr 1  A6 AE                ldx     FAC_LAST-1
0013E1r 1  D0 F0                bne     GOIQ
0013E3r 1  A6 AF                ldx     FAC_LAST
0013E5r 1  4C C2 00             jmp     CHRGOT
0013E8r 1               ; ----------------------------------------------------------------------------
0013E8r 1               ; "VAL" FUNCTION
0013E8r 1               ; ----------------------------------------------------------------------------
0013E8r 1               VAL:
0013E8r 1  20 rr rr             jsr     GETSTR
0013EBr 1  D0 03                bne     L35AC
0013EDr 1  4C rr rr             jmp     ZERO_FAC
0013F0r 1               L35AC:
0013F0r 1  A6 C3                ldx     TXTPTR
0013F2r 1  A4 C4                ldy     TXTPTR+1
0013F4r 1  86 BA                stx     STRNG2
0013F6r 1  84 BB                sty     STRNG2+1
0013F8r 1  A6 71                ldx     INDEX
0013FAr 1  86 C3                stx     TXTPTR
0013FCr 1  18                   clc
0013FDr 1  65 71                adc     INDEX
0013FFr 1  85 73                sta     DEST
001401r 1  A6 72                ldx     INDEX+1
001403r 1  86 C4                stx     TXTPTR+1
001405r 1  90 01                bcc     L35C4
001407r 1  E8                   inx
001408r 1               L35C4:
001408r 1  86 74                stx     DEST+1
00140Ar 1  A0 00                ldy     #$00
00140Cr 1  B1 73                lda     (DEST),y
00140Er 1  48                   pha
00140Fr 1  A9 00                lda     #$00
001411r 1  91 73                sta     (DEST),y
001413r 1  20 C2 00             jsr     CHRGOT
001416r 1  20 rr rr             jsr     FIN
001419r 1  68                   pla
00141Ar 1  A0 00                ldy     #$00
00141Cr 1  91 73                sta     (DEST),y
00141Er 1               ; ----------------------------------------------------------------------------
00141Er 1               ; COPY STRNG2 INTO TXTPTR
00141Er 1               ; ----------------------------------------------------------------------------
00141Er 1               POINT:
00141Er 1  A6 BA                ldx     STRNG2
001420r 1  A4 BB                ldy     STRNG2+1
001422r 1  86 C3                stx     TXTPTR
001424r 1  84 C4                sty     TXTPTR+1
001426r 1  60                   rts
001427r 1               ; ----------------------------------------------------------------------------
001427r 1               ; ----------------------------------------------------------------------------
001427r 1               ; ----------------------------------------------------------------------------
001427r 1               ; ----------------------------------------------------------------------------
001427r 1               ; EVALUATE "EXP1,EXP2"
001427r 1               ;
001427r 1               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
001427r 1               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
001427r 1               ; ----------------------------------------------------------------------------
001427r 1               GTNUM:
001427r 1  20 rr rr             jsr     FRMNUM
00142Ar 1  20 rr rr             jsr     GETADR
00142Dr 1               ; ----------------------------------------------------------------------------
00142Dr 1               ; EVALUATE ",EXPRESSION"
00142Dr 1               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
00142Dr 1               ; ----------------------------------------------------------------------------
00142Dr 1               COMBYTE:
00142Dr 1  20 rr rr             jsr     CHKCOM
001430r 1  4C rr rr             jmp     GETBYT
001433r 1               ; ----------------------------------------------------------------------------
001433r 1               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
001433r 1               ; ----------------------------------------------------------------------------
001433r 1               GETADR:
001433r 1  A5 B0                lda     FACSIGN
001435r 1  30 9C                bmi     GOIQ
001437r 1  A5 AC                lda     FAC
001439r 1  C9 91                cmp     #$91
00143Br 1  B0 96                bcs     GOIQ
00143Dr 1  20 rr rr             jsr     QINT
001440r 1  A5 AE                lda     FAC_LAST-1
001442r 1  A4 AF                ldy     FAC_LAST
001444r 1  84 11                sty     LINNUM
001446r 1  85 12                sta     LINNUM+1
001448r 1  60                   rts
001449r 1               ; ----------------------------------------------------------------------------
001449r 1               ; "PEEK" FUNCTION
001449r 1               ; ----------------------------------------------------------------------------
001449r 1               PEEK:
001449r 1  20 rr rr             jsr     GETADR
00144Cr 1  A0 00                ldy     #$00
00144Er 1               ; disallow PEEK between $C000 and $DFFF
00144Er 1  B1 11                lda     (LINNUM),y
001450r 1  A8                   tay
001451r 1  4C rr rr             jmp     SNGFLT
001454r 1               ; ----------------------------------------------------------------------------
001454r 1               ; "POKE" STATEMENT
001454r 1               ; ----------------------------------------------------------------------------
001454r 1               POKE:
001454r 1  20 rr rr             jsr     GTNUM
001457r 1  8A                   txa
001458r 1  A0 00                ldy     #$00
00145Ar 1  91 11                sta     (LINNUM),y
00145Cr 1  60                   rts
00145Dr 1               ; ----------------------------------------------------------------------------
00145Dr 1               ; "WAIT" STATEMENT
00145Dr 1               ; ----------------------------------------------------------------------------
00145Dr 1               WAIT:
00145Dr 1  20 rr rr             jsr     GTNUM
001460r 1  86 97                stx     FORPNT
001462r 1  A2 00                ldx     #$00
001464r 1  20 C2 00             jsr     CHRGOT
001467r 1  F0 03                beq     L3628
001469r 1  20 rr rr             jsr     COMBYTE
00146Cr 1               L3628:
00146Cr 1  86 98                stx     FORPNT+1
00146Er 1  A0 00                ldy     #$00
001470r 1               L362C:
001470r 1  B1 11                lda     (LINNUM),y
001472r 1  45 98                eor     FORPNT+1
001474r 1  25 97                and     FORPNT
001476r 1  F0 F8                beq     L362C
001478r 1               RTS3:
001478r 1  60                   rts
001479r 1               TEMP1X = TEMP1+(5-BYTES_FP)
001479r 1               ; ----------------------------------------------------------------------------
001479r 1               ; ADD 0.5 TO FAC
001479r 1               ; ----------------------------------------------------------------------------
001479r 1               FADDH:
001479r 1  A9 rr                lda     #<CON_HALF
00147Br 1  A0 rr                ldy     #>CON_HALF
00147Dr 1  4C rr rr             jmp     FADD
001480r 1               ; ----------------------------------------------------------------------------
001480r 1               ; FAC = (Y,A) - FAC
001480r 1               ; ----------------------------------------------------------------------------
001480r 1               FSUB:
001480r 1  20 rr rr             jsr     LOAD_ARG_FROM_YA
001483r 1               ; ----------------------------------------------------------------------------
001483r 1               ; FAC = ARG - FAC
001483r 1               ; ----------------------------------------------------------------------------
001483r 1               FSUBT:
001483r 1  A5 B0                lda     FACSIGN
001485r 1  49 FF                eor     #$FF
001487r 1  85 B0                sta     FACSIGN
001489r 1  45 B7                eor     ARGSIGN
00148Br 1  85 B8                sta     SGNCPR
00148Dr 1  A5 AC                lda     FAC
00148Fr 1  4C rr rr             jmp     FADDT
001492r 1               ; ----------------------------------------------------------------------------
001492r 1               ; Commodore BASIC V2 Easter Egg
001492r 1               ; ----------------------------------------------------------------------------
001492r 1               ; ----------------------------------------------------------------------------
001492r 1               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
001492r 1               ; ----------------------------------------------------------------------------
001492r 1               FADD1:
001492r 1  20 rr rr             jsr     SHIFT_RIGHT
001495r 1  90 3C                bcc     FADD3
001497r 1               ; ----------------------------------------------------------------------------
001497r 1               ; FAC = (Y,A) + FAC
001497r 1               ; ----------------------------------------------------------------------------
001497r 1               FADD:
001497r 1  20 rr rr             jsr     LOAD_ARG_FROM_YA
00149Ar 1               ; ----------------------------------------------------------------------------
00149Ar 1               ; FAC = ARG + FAC
00149Ar 1               ; ----------------------------------------------------------------------------
00149Ar 1               FADDT:
00149Ar 1  D0 03                bne     L365B
00149Cr 1  4C rr rr             jmp     COPY_ARG_TO_FAC
00149Fr 1               L365B:
00149Fr 1  A6 B9                ldx     FACEXTENSION
0014A1r 1  86 A3                stx     ARGEXTENSION
0014A3r 1  A2 B3                ldx     #ARG
0014A5r 1  A5 B3                lda     ARG
0014A7r 1               FADD2:
0014A7r 1  A8                   tay
0014A8r 1  F0 CE                beq     RTS3
0014AAr 1  38                   sec
0014ABr 1  E5 AC                sbc     FAC
0014ADr 1  F0 24                beq     FADD3
0014AFr 1  90 12                bcc     L367F
0014B1r 1  84 AC                sty     FAC
0014B3r 1  A4 B7                ldy     ARGSIGN
0014B5r 1  84 B0                sty     FACSIGN
0014B7r 1  49 FF                eor     #$FF
0014B9r 1  69 00                adc     #$00
0014BBr 1  A0 00                ldy     #$00
0014BDr 1  84 A3                sty     ARGEXTENSION
0014BFr 1  A2 AC                ldx     #FAC
0014C1r 1  D0 04                bne     L3683
0014C3r 1               L367F:
0014C3r 1  A0 00                ldy     #$00
0014C5r 1  84 B9                sty     FACEXTENSION
0014C7r 1               L3683:
0014C7r 1  C9 F9                cmp     #$F9
0014C9r 1  30 C7                bmi     FADD1
0014CBr 1  A8                   tay
0014CCr 1  A5 B9                lda     FACEXTENSION
0014CEr 1  56 01                lsr     1,x
0014D0r 1  20 rr rr             jsr     SHIFT_RIGHT4
0014D3r 1               FADD3:
0014D3r 1  24 B8                bit     SGNCPR
0014D5r 1  10 4C                bpl     FADD4
0014D7r 1  A0 AC                ldy     #FAC
0014D9r 1  E0 B3                cpx     #ARG
0014DBr 1  F0 02                beq     L369B
0014DDr 1  A0 B3                ldy     #ARG
0014DFr 1               L369B:
0014DFr 1  38                   sec
0014E0r 1  49 FF                eor     #$FF
0014E2r 1  65 A3                adc     ARGEXTENSION
0014E4r 1  85 B9                sta     FACEXTENSION
0014E6r 1  B9 03 00             lda     3,y
0014E9r 1  F5 03                sbc     3,x
0014EBr 1  85 AF                sta     FAC+3
0014EDr 1  B9 02 00             lda     2,y
0014F0r 1  F5 02                sbc     2,x
0014F2r 1  85 AE                sta     FAC+2
0014F4r 1  B9 01 00             lda     1,y
0014F7r 1  F5 01                sbc     1,x
0014F9r 1  85 AD                sta     FAC+1
0014FBr 1               ; ----------------------------------------------------------------------------
0014FBr 1               ; NORMALIZE VALUE IN FAC
0014FBr 1               ; ----------------------------------------------------------------------------
0014FBr 1               NORMALIZE_FAC1:
0014FBr 1  B0 03                bcs     NORMALIZE_FAC2
0014FDr 1  20 rr rr             jsr     COMPLEMENT_FAC
001500r 1               NORMALIZE_FAC2:
001500r 1  A0 00                ldy     #$00
001502r 1  98                   tya
001503r 1  18                   clc
001504r 1               L36C7:
001504r 1  A6 AD                ldx     FAC+1
001506r 1  D0 3E                bne     NORMALIZE_FAC4
001508r 1  A6 AE                ldx     FAC+2
00150Ar 1  86 AD                stx     FAC+1
00150Cr 1  A6 AF                ldx     FAC+3
00150Er 1  86 AE                stx     FAC+2
001510r 1  A6 B9                ldx     FACEXTENSION
001512r 1  86 AF                stx     FAC+3
001514r 1  84 B9                sty     FACEXTENSION
001516r 1  69 08                adc     #$08
001518r 1               ; bugfix?
001518r 1               ; fix does not exist on AppleSoft 2
001518r 1  C9 18                cmp     #MANTISSA_BYTES*8
00151Ar 1  D0 E8                bne     L36C7
00151Cr 1               ; ----------------------------------------------------------------------------
00151Cr 1               ; SET FAC = 0
00151Cr 1               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
00151Cr 1               ; ----------------------------------------------------------------------------
00151Cr 1               ZERO_FAC:
00151Cr 1  A9 00                lda     #$00
00151Er 1               STA_IN_FAC_SIGN_AND_EXP:
00151Er 1  85 AC                sta     FAC
001520r 1               STA_IN_FAC_SIGN:
001520r 1  85 B0                sta     FACSIGN
001522r 1  60                   rts
001523r 1               ; ----------------------------------------------------------------------------
001523r 1               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
001523r 1               ; ----------------------------------------------------------------------------
001523r 1               FADD4:
001523r 1  65 A3                adc     ARGEXTENSION
001525r 1  85 B9                sta     FACEXTENSION
001527r 1  A5 AF                lda     FAC+3
001529r 1  65 B6                adc     ARG+3
00152Br 1  85 AF                sta     FAC+3
00152Dr 1  A5 AE                lda     FAC+2
00152Fr 1  65 B5                adc     ARG+2
001531r 1  85 AE                sta     FAC+2
001533r 1  A5 AD                lda     FAC+1
001535r 1  65 B4                adc     ARG+1
001537r 1  85 AD                sta     FAC+1
001539r 1  4C rr rr             jmp     NORMALIZE_FAC5
00153Cr 1               ; ----------------------------------------------------------------------------
00153Cr 1               ; FINISH NORMALIZING FAC
00153Cr 1               ; ----------------------------------------------------------------------------
00153Cr 1               NORMALIZE_FAC3:
00153Cr 1  69 01                adc     #$01
00153Er 1  06 B9                asl     FACEXTENSION
001540r 1  26 AF                rol     FAC+3
001542r 1  26 AE                rol     FAC+2
001544r 1  26 AD                rol     FAC+1
001546r 1               NORMALIZE_FAC4:
001546r 1  10 F4                bpl     NORMALIZE_FAC3
001548r 1  38                   sec
001549r 1  E5 AC                sbc     FAC
00154Br 1  B0 CF                bcs     ZERO_FAC
00154Dr 1  49 FF                eor     #$FF
00154Fr 1  69 01                adc     #$01
001551r 1  85 AC                sta     FAC
001553r 1               NORMALIZE_FAC5:
001553r 1  90 0C                bcc     L3764
001555r 1               NORMALIZE_FAC6:
001555r 1  E6 AC                inc     FAC
001557r 1  F0 36                beq     OVERFLOW
001559r 1  66 AD                ror     FAC+1
00155Br 1  66 AE                ror     FAC+2
00155Dr 1  66 AF                ror     FAC+3
00155Fr 1  66 B9                ror     FACEXTENSION
001561r 1               L3764:
001561r 1  60                   rts
001562r 1               ; ----------------------------------------------------------------------------
001562r 1               ; 2'S COMPLEMENT OF FAC
001562r 1               ; ----------------------------------------------------------------------------
001562r 1               COMPLEMENT_FAC:
001562r 1  A5 B0                lda     FACSIGN
001564r 1  49 FF                eor     #$FF
001566r 1  85 B0                sta     FACSIGN
001568r 1               ; ----------------------------------------------------------------------------
001568r 1               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
001568r 1               ; ----------------------------------------------------------------------------
001568r 1               COMPLEMENT_FAC_MANTISSA:
001568r 1  A5 AD                lda     FAC+1
00156Ar 1  49 FF                eor     #$FF
00156Cr 1  85 AD                sta     FAC+1
00156Er 1  A5 AE                lda     FAC+2
001570r 1  49 FF                eor     #$FF
001572r 1  85 AE                sta     FAC+2
001574r 1  A5 AF                lda     FAC+3
001576r 1  49 FF                eor     #$FF
001578r 1  85 AF                sta     FAC+3
00157Ar 1  A5 B9                lda     FACEXTENSION
00157Cr 1  49 FF                eor     #$FF
00157Er 1  85 B9                sta     FACEXTENSION
001580r 1  E6 B9                inc     FACEXTENSION
001582r 1  D0 0A                bne     RTS12
001584r 1               ; ----------------------------------------------------------------------------
001584r 1               ; INCREMENT FAC MANTISSA
001584r 1               ; ----------------------------------------------------------------------------
001584r 1               INCREMENT_FAC_MANTISSA:
001584r 1  E6 AF                inc     FAC+3
001586r 1  D0 06                bne     RTS12
001588r 1  E6 AE                inc     FAC+2
00158Ar 1  D0 02                bne     RTS12
00158Cr 1  E6 AD                inc     FAC+1
00158Er 1               RTS12:
00158Er 1  60                   rts
00158Fr 1               OVERFLOW:
00158Fr 1  A2 0A                ldx     #ERR_OVERFLOW
001591r 1  4C rr rr             jmp     ERROR
001594r 1               ; ----------------------------------------------------------------------------
001594r 1               ; SHIFT 1,X THRU 5,X RIGHT
001594r 1               ; (A) = NEGATIVE OF SHIFT COUNT
001594r 1               ; (X) = POINTER TO BYTES TO BE SHIFTED
001594r 1               ;
001594r 1               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
001594r 1               ; ----------------------------------------------------------------------------
001594r 1               SHIFT_RIGHT1:
001594r 1  A2 74                ldx     #RESULT-1
001596r 1               SHIFT_RIGHT2:
001596r 1  B4 03                ldy     3,x
001598r 1  84 B9                sty     FACEXTENSION
00159Ar 1  B4 02                ldy     2,x
00159Cr 1  94 03                sty     3,x
00159Er 1  B4 01                ldy     1,x
0015A0r 1  94 02                sty     2,x
0015A2r 1  A4 B2                ldy     SHIFTSIGNEXT
0015A4r 1  94 01                sty     1,x
0015A6r 1               ; ----------------------------------------------------------------------------
0015A6r 1               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
0015A6r 1               ; ----------------------------------------------------------------------------
0015A6r 1               SHIFT_RIGHT:
0015A6r 1  69 08                adc     #$08
0015A8r 1  30 EC                bmi     SHIFT_RIGHT2
0015AAr 1  F0 EA                beq     SHIFT_RIGHT2
0015ACr 1  E9 08                sbc     #$08
0015AEr 1  A8                   tay
0015AFr 1  A5 B9                lda     FACEXTENSION
0015B1r 1  B0 12                bcs     SHIFT_RIGHT5
0015B3r 1               LB588:
0015B3r 1  16 01                asl     1,x
0015B5r 1  90 02                bcc     LB58E
0015B7r 1  F6 01                inc     1,x
0015B9r 1               LB58E:
0015B9r 1  76 01                ror     1,x
0015BBr 1  76 01                ror     1,x
0015BDr 1               ; ----------------------------------------------------------------------------
0015BDr 1               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
0015BDr 1               ; ----------------------------------------------------------------------------
0015BDr 1               SHIFT_RIGHT4:
0015BDr 1  76 02                ror     2,x
0015BFr 1  76 03                ror     3,x
0015C1r 1  6A                   ror     a
0015C2r 1  C8                   iny
0015C3r 1  D0 EE                bne     LB588
0015C5r 1               SHIFT_RIGHT5:
0015C5r 1  18                   clc
0015C6r 1  60                   rts
0015C7r 1               ; ----------------------------------------------------------------------------
0015C7r 1               CON_ONE:
0015C7r 1  81 00 00 00          .byte   $81,$00,$00,$00
0015CBr 1               POLY_LOG:
0015CBr 1  02           		.byte	$02
0015CCr 1  80 19 56 62  		.byte   $80,$19,$56,$62
0015D0r 1  80 76 22 F3  		.byte   $80,$76,$22,$F3
0015D4r 1  82 38 AA 40  		.byte   $82,$38,$AA,$40
0015D8r 1               CON_SQR_HALF:
0015D8r 1  80 35 04 F3  		.byte   $80,$35,$04,$F3
0015DCr 1               CON_SQR_TWO:
0015DCr 1  81 35 04 F3  		.byte   $81,$35,$04,$F3
0015E0r 1               CON_NEG_HALF:
0015E0r 1  80 80 00 00  		.byte   $80,$80,$00,$00
0015E4r 1               CON_LOG_TWO:
0015E4r 1  80 31 72 18  		.byte   $80,$31,$72,$18
0015E8r 1               ; ----------------------------------------------------------------------------
0015E8r 1               ; "LOG" FUNCTION
0015E8r 1               ; ----------------------------------------------------------------------------
0015E8r 1               LOG:
0015E8r 1  20 rr rr             jsr     SIGN
0015EBr 1  F0 02                beq     GIQ
0015EDr 1  10 03                bpl     LOG2
0015EFr 1               GIQ:
0015EFr 1  4C rr rr             jmp     IQERR
0015F2r 1               LOG2:
0015F2r 1  A5 AC                lda     FAC
0015F4r 1  E9 7F                sbc     #$7F
0015F6r 1  48                   pha
0015F7r 1  A9 80                lda     #$80
0015F9r 1  85 AC                sta     FAC
0015FBr 1  A9 rr                lda     #<CON_SQR_HALF
0015FDr 1  A0 rr                ldy     #>CON_SQR_HALF
0015FFr 1  20 rr rr             jsr     FADD
001602r 1  A9 rr                lda     #<CON_SQR_TWO
001604r 1  A0 rr                ldy     #>CON_SQR_TWO
001606r 1  20 rr rr             jsr     FDIV
001609r 1  A9 rr                lda     #<CON_ONE
00160Br 1  A0 rr                ldy     #>CON_ONE
00160Dr 1  20 rr rr             jsr     FSUB
001610r 1  A9 rr                lda     #<POLY_LOG
001612r 1  A0 rr                ldy     #>POLY_LOG
001614r 1  20 rr rr             jsr     POLYNOMIAL_ODD
001617r 1  A9 rr                lda     #<CON_NEG_HALF
001619r 1  A0 rr                ldy     #>CON_NEG_HALF
00161Br 1  20 rr rr             jsr     FADD
00161Er 1  68                   pla
00161Fr 1  20 rr rr             jsr     ADDACC
001622r 1  A9 rr                lda     #<CON_LOG_TWO
001624r 1  A0 rr                ldy     #>CON_LOG_TWO
001626r 1               ; ----------------------------------------------------------------------------
001626r 1               ; FAC = (Y,A) * FAC
001626r 1               ; ----------------------------------------------------------------------------
001626r 1               FMULT:
001626r 1  20 rr rr             jsr     LOAD_ARG_FROM_YA
001629r 1               ; ----------------------------------------------------------------------------
001629r 1               ; FAC = ARG * FAC
001629r 1               ; ----------------------------------------------------------------------------
001629r 1               FMULTT:
001629r 1  F0 4C                beq     L3903
00162Br 1  20 rr rr             jsr     ADD_EXPONENTS
00162Er 1  A9 00                lda     #$00
001630r 1  85 75                sta     RESULT
001632r 1  85 76                sta     RESULT+1
001634r 1  85 77                sta     RESULT+2
001636r 1  A5 B9                lda     FACEXTENSION
001638r 1  20 rr rr             jsr     MULTIPLY1
00163Br 1  A5 AF                lda     FAC+3
00163Dr 1  20 rr rr             jsr     MULTIPLY1
001640r 1  A5 AE                lda     FAC+2
001642r 1  20 rr rr             jsr     MULTIPLY1
001645r 1  A5 AD                lda     FAC+1
001647r 1  20 rr rr             jsr     MULTIPLY2
00164Ar 1  4C rr rr             jmp     COPY_RESULT_INTO_FAC
00164Dr 1               ; ----------------------------------------------------------------------------
00164Dr 1               ; MULTIPLY ARG BY (A) INTO RESULT
00164Dr 1               ; ----------------------------------------------------------------------------
00164Dr 1               MULTIPLY1:
00164Dr 1  D0 03                bne     MULTIPLY2
00164Fr 1  4C rr rr             jmp     SHIFT_RIGHT1
001652r 1               MULTIPLY2:
001652r 1  4A                   lsr     a
001653r 1  09 80                ora     #$80
001655r 1               L38A7:
001655r 1  A8                   tay
001656r 1  90 13                bcc     L38C3
001658r 1  18                   clc
001659r 1  A5 77                lda     RESULT+2
00165Br 1  65 B6                adc     ARG+3
00165Dr 1  85 77                sta     RESULT+2
00165Fr 1  A5 76                lda     RESULT+1
001661r 1  65 B5                adc     ARG+2
001663r 1  85 76                sta     RESULT+1
001665r 1  A5 75                lda     RESULT
001667r 1  65 B4                adc     ARG+1
001669r 1  85 75                sta     RESULT
00166Br 1               L38C3:
00166Br 1  66 75                ror     RESULT
00166Dr 1  66 76                ror     RESULT+1
00166Fr 1               ; this seems to be a bad byte in the dump
00166Fr 1  66 77                ror     RESULT+2
001671r 1  66 B9                ror     FACEXTENSION
001673r 1  98                   tya
001674r 1  4A                   lsr     a
001675r 1  D0 DE                bne     L38A7
001677r 1               L3903:
001677r 1  60                   rts
001678r 1               ; ----------------------------------------------------------------------------
001678r 1               ; UNPACK NUMBER AT (Y,A) INTO ARG
001678r 1               ; ----------------------------------------------------------------------------
001678r 1               LOAD_ARG_FROM_YA:
001678r 1  85 71                sta     INDEX
00167Ar 1  84 72                sty     INDEX+1
00167Cr 1  A0 03                ldy     #BYTES_FP-1
00167Er 1  B1 71                lda     (INDEX),y
001680r 1  85 B6                sta     ARG+3
001682r 1  88                   dey
001683r 1  B1 71                lda     (INDEX),y
001685r 1  85 B5                sta     ARG+2
001687r 1  88                   dey
001688r 1  B1 71                lda     (INDEX),y
00168Ar 1  85 B7                sta     ARGSIGN
00168Cr 1  45 B0                eor     FACSIGN
00168Er 1  85 B8                sta     SGNCPR
001690r 1  A5 B7                lda     ARGSIGN
001692r 1  09 80                ora     #$80
001694r 1  85 B4                sta     ARG+1
001696r 1  88                   dey
001697r 1  B1 71                lda     (INDEX),y
001699r 1  85 B3                sta     ARG
00169Br 1  A5 AC                lda     FAC
00169Dr 1  60                   rts
00169Er 1               ; ----------------------------------------------------------------------------
00169Er 1               ; ADD EXPONENTS OF ARG AND FAC
00169Er 1               ; (CALLED BY FMULT AND FDIV)
00169Er 1               ;
00169Er 1               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
00169Er 1               ; ----------------------------------------------------------------------------
00169Er 1               ADD_EXPONENTS:
00169Er 1  A5 B3                lda     ARG
0016A0r 1               ADD_EXPONENTS1:
0016A0r 1  F0 1F                beq     ZERO
0016A2r 1  18                   clc
0016A3r 1  65 AC                adc     FAC
0016A5r 1  90 04                bcc     L393C
0016A7r 1  30 1D                bmi     JOV
0016A9r 1  18                   clc
0016AAr 1  2C                   .byte   $2C
0016ABr 1               L393C:
0016ABr 1  10 14                bpl     ZERO
0016ADr 1  69 80                adc     #$80
0016AFr 1  85 AC                sta     FAC
0016B1r 1  D0 03                bne     L3947
0016B3r 1  4C rr rr             jmp     STA_IN_FAC_SIGN
0016B6r 1               L3947:
0016B6r 1  A5 B8                lda     SGNCPR
0016B8r 1  85 B0                sta     FACSIGN
0016BAr 1  60                   rts
0016BBr 1               ; ----------------------------------------------------------------------------
0016BBr 1               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
0016BBr 1               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
0016BBr 1               ; CALLED FROM "EXP" FUNCTION
0016BBr 1               ; ----------------------------------------------------------------------------
0016BBr 1               OUTOFRNG:
0016BBr 1  A5 B0                lda     FACSIGN
0016BDr 1  49 FF                eor     #$FF
0016BFr 1  30 05                bmi     JOV
0016C1r 1               ; ----------------------------------------------------------------------------
0016C1r 1               ; POP RETURN ADDRESS AND SET FAC=0
0016C1r 1               ; ----------------------------------------------------------------------------
0016C1r 1               ZERO:
0016C1r 1  68                   pla
0016C2r 1  68                   pla
0016C3r 1  4C rr rr             jmp     ZERO_FAC
0016C6r 1               JOV:
0016C6r 1  4C rr rr             jmp     OVERFLOW
0016C9r 1               ; ----------------------------------------------------------------------------
0016C9r 1               ; MULTIPLY FAC BY 10
0016C9r 1               ; ----------------------------------------------------------------------------
0016C9r 1               MUL10:
0016C9r 1  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
0016CCr 1  AA                   tax
0016CDr 1  F0 10                beq     L3970
0016CFr 1  18                   clc
0016D0r 1  69 02                adc     #$02
0016D2r 1  B0 F2                bcs     JOV
0016D4r 1  A2 00                ldx     #$00
0016D6r 1  86 B8                stx     SGNCPR
0016D8r 1  20 rr rr             jsr     FADD2
0016DBr 1  E6 AC                inc     FAC
0016DDr 1  F0 E7                beq     JOV
0016DFr 1               L3970:
0016DFr 1  60                   rts
0016E0r 1               ; ----------------------------------------------------------------------------
0016E0r 1               CONTEN:
0016E0r 1  84 20 00 00          .byte   $84,$20,$00,$00
0016E4r 1               ; ----------------------------------------------------------------------------
0016E4r 1               ; DIVIDE FAC BY 10
0016E4r 1               ; ----------------------------------------------------------------------------
0016E4r 1               DIV10:
0016E4r 1  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
0016E7r 1  A9 rr                lda     #<CONTEN
0016E9r 1  A0 rr                ldy     #>CONTEN
0016EBr 1  A2 00                ldx     #$00
0016EDr 1               ; ----------------------------------------------------------------------------
0016EDr 1               ; FAC = ARG / (Y,A)
0016EDr 1               ; ----------------------------------------------------------------------------
0016EDr 1               DIV:
0016EDr 1  86 B8                stx     SGNCPR
0016EFr 1  20 rr rr             jsr     LOAD_FAC_FROM_YA
0016F2r 1  4C rr rr             jmp     FDIVT
0016F5r 1               ; ----------------------------------------------------------------------------
0016F5r 1               ; FAC = (Y,A) / FAC
0016F5r 1               ; ----------------------------------------------------------------------------
0016F5r 1               FDIV:
0016F5r 1  20 rr rr             jsr     LOAD_ARG_FROM_YA
0016F8r 1               ; ----------------------------------------------------------------------------
0016F8r 1               ; FAC = ARG / FAC
0016F8r 1               ; ----------------------------------------------------------------------------
0016F8r 1               FDIVT:
0016F8r 1  F0 68                beq     L3A02
0016FAr 1  20 rr rr             jsr     ROUND_FAC
0016FDr 1  A9 00                lda     #$00
0016FFr 1  38                   sec
001700r 1  E5 AC                sbc     FAC
001702r 1  85 AC                sta     FAC
001704r 1  20 rr rr             jsr     ADD_EXPONENTS
001707r 1  E6 AC                inc     FAC
001709r 1  F0 BB                beq     JOV
00170Br 1  A2 FD                ldx     #-MANTISSA_BYTES
00170Dr 1  A9 01                lda     #$01
00170Fr 1               L39A1:
00170Fr 1  A4 B4                ldy     ARG+1
001711r 1  C4 AD                cpy     FAC+1
001713r 1  D0 0A                bne     L39B7
001715r 1  A4 B5                ldy     ARG+2
001717r 1  C4 AE                cpy     FAC+2
001719r 1  D0 04                bne     L39B7
00171Br 1  A4 B6                ldy     ARG+3
00171Dr 1  C4 AF                cpy     FAC+3
00171Fr 1               L39B7:
00171Fr 1  08                   php
001720r 1  2A                   rol     a
001721r 1  90 09                bcc     L39C4
001723r 1  E8                   inx
001724r 1  95 77                sta     RESULT_LAST-1,x
001726r 1  F0 2A                beq     L39F2
001728r 1  10 2C                bpl     L39F6
00172Ar 1  A9 01                lda     #$01
00172Cr 1               L39C4:
00172Cr 1  28                   plp
00172Dr 1  B0 0C                bcs     L39D5
00172Fr 1               L39C7:
00172Fr 1  06 B6                asl     ARG_LAST
001731r 1  26 B5                rol     ARG+2
001733r 1  26 B4                rol     ARG+1
001735r 1  B0 E8                bcs     L39B7
001737r 1  30 D6                bmi     L39A1
001739r 1  10 E4                bpl     L39B7
00173Br 1               L39D5:
00173Br 1  A8                   tay
00173Cr 1  A5 B6                lda     ARG+3
00173Er 1  E5 AF                sbc     FAC+3
001740r 1  85 B6                sta     ARG+3
001742r 1  A5 B5                lda     ARG+2
001744r 1  E5 AE                sbc     FAC+2
001746r 1  85 B5                sta     ARG+2
001748r 1  A5 B4                lda     ARG+1
00174Ar 1  E5 AD                sbc     FAC+1
00174Cr 1  85 B4                sta     ARG+1
00174Er 1  98                   tya
00174Fr 1  4C rr rr             jmp     L39C7
001752r 1               L39F2:
001752r 1  A9 40                lda     #$40
001754r 1  D0 D6                bne     L39C4
001756r 1               L39F6:
001756r 1  0A                   asl     a
001757r 1  0A                   asl     a
001758r 1  0A                   asl     a
001759r 1  0A                   asl     a
00175Ar 1  0A                   asl     a
00175Br 1  0A                   asl     a
00175Cr 1  85 B9                sta     FACEXTENSION
00175Er 1  28                   plp
00175Fr 1  4C rr rr             jmp     COPY_RESULT_INTO_FAC
001762r 1               L3A02:
001762r 1  A2 14                ldx     #ERR_ZERODIV
001764r 1  4C rr rr             jmp     ERROR
001767r 1               ; ----------------------------------------------------------------------------
001767r 1               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
001767r 1               ; ----------------------------------------------------------------------------
001767r 1               COPY_RESULT_INTO_FAC:
001767r 1  A5 75                lda     RESULT
001769r 1  85 AD                sta     FAC+1
00176Br 1  A5 76                lda     RESULT+1
00176Dr 1  85 AE                sta     FAC+2
00176Fr 1  A5 77                lda     RESULT+2
001771r 1  85 AF                sta     FAC+3
001773r 1  4C rr rr             jmp     NORMALIZE_FAC2
001776r 1               ; ----------------------------------------------------------------------------
001776r 1               ; UNPACK (Y,A) INTO FAC
001776r 1               ; ----------------------------------------------------------------------------
001776r 1               LOAD_FAC_FROM_YA:
001776r 1  85 71                sta     INDEX
001778r 1  84 72                sty     INDEX+1
00177Ar 1  A0 03                ldy     #MANTISSA_BYTES
00177Cr 1  B1 71                lda     (INDEX),y
00177Er 1  85 AF                sta     FAC+3
001780r 1  88                   dey
001781r 1  B1 71                lda     (INDEX),y
001783r 1  85 AE                sta     FAC+2
001785r 1  88                   dey
001786r 1  B1 71                lda     (INDEX),y
001788r 1  85 B0                sta     FACSIGN
00178Ar 1  09 80                ora     #$80
00178Cr 1  85 AD                sta     FAC+1
00178Er 1  88                   dey
00178Fr 1  B1 71                lda     (INDEX),y
001791r 1  85 AC                sta     FAC
001793r 1  84 B9                sty     FACEXTENSION
001795r 1  60                   rts
001796r 1               ; ----------------------------------------------------------------------------
001796r 1               ; ROUND FAC, STORE IN TEMP2
001796r 1               ; ----------------------------------------------------------------------------
001796r 1               STORE_FAC_IN_TEMP2_ROUNDED:
001796r 1  A2 A8                ldx     #TEMP2
001798r 1  2C                   .byte   $2C
001799r 1               ; ----------------------------------------------------------------------------
001799r 1               ; ROUND FAC, STORE IN TEMP1
001799r 1               ; ----------------------------------------------------------------------------
001799r 1               STORE_FAC_IN_TEMP1_ROUNDED:
001799r 1  A2 A4                ldx     #TEMP1X
00179Br 1  A0 00                ldy     #$00
00179Dr 1  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
00179Fr 1               ; ----------------------------------------------------------------------------
00179Fr 1               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
00179Fr 1               ; ----------------------------------------------------------------------------
00179Fr 1               SETFOR:
00179Fr 1  A6 97                ldx     FORPNT
0017A1r 1  A4 98                ldy     FORPNT+1
0017A3r 1               ; ----------------------------------------------------------------------------
0017A3r 1               ; ROUND FAC, AND STORE AT (Y,X)
0017A3r 1               ; ----------------------------------------------------------------------------
0017A3r 1               STORE_FAC_AT_YX_ROUNDED:
0017A3r 1  20 rr rr             jsr     ROUND_FAC
0017A6r 1  86 71                stx     INDEX
0017A8r 1  84 72                sty     INDEX+1
0017AAr 1  A0 03                ldy     #MANTISSA_BYTES
0017ACr 1  A5 AF                lda     FAC+3
0017AEr 1  91 71                sta     (INDEX),y
0017B0r 1  88                   dey
0017B1r 1  A5 AE                lda     FAC+2
0017B3r 1  91 71                sta     (INDEX),y
0017B5r 1  88                   dey
0017B6r 1  A5 B0                lda     FACSIGN
0017B8r 1  09 7F                ora     #$7F
0017BAr 1  25 AD                and     FAC+1
0017BCr 1  91 71                sta     (INDEX),y
0017BEr 1  88                   dey
0017BFr 1  A5 AC                lda     FAC
0017C1r 1  91 71                sta     (INDEX),y
0017C3r 1  84 B9                sty     FACEXTENSION
0017C5r 1  60                   rts
0017C6r 1               ; ----------------------------------------------------------------------------
0017C6r 1               ; COPY ARG INTO FAC
0017C6r 1               ; ----------------------------------------------------------------------------
0017C6r 1               COPY_ARG_TO_FAC:
0017C6r 1  A5 B7                lda     ARGSIGN
0017C8r 1               MFA:
0017C8r 1  85 B0                sta     FACSIGN
0017CAr 1  A2 04                ldx     #BYTES_FP
0017CCr 1               L3A7A:
0017CCr 1  B5 B2                lda     SHIFTSIGNEXT,x
0017CEr 1  95 AB                sta     EXPSGN,x
0017D0r 1  CA                   dex
0017D1r 1  D0 F9                bne     L3A7A
0017D3r 1  86 B9                stx     FACEXTENSION
0017D5r 1  60                   rts
0017D6r 1               ; ----------------------------------------------------------------------------
0017D6r 1               ; ROUND FAC AND COPY TO ARG
0017D6r 1               ; ----------------------------------------------------------------------------
0017D6r 1               COPY_FAC_TO_ARG_ROUNDED:
0017D6r 1  20 rr rr             jsr     ROUND_FAC
0017D9r 1               MAF:
0017D9r 1  A2 05                ldx     #BYTES_FP+1
0017DBr 1               L3A89:
0017DBr 1  B5 AB                lda     EXPSGN,x
0017DDr 1  95 B2                sta     SHIFTSIGNEXT,x
0017DFr 1  CA                   dex
0017E0r 1  D0 F9                bne     L3A89
0017E2r 1  86 B9                stx     FACEXTENSION
0017E4r 1               RTS14:
0017E4r 1  60                   rts
0017E5r 1               ; ----------------------------------------------------------------------------
0017E5r 1               ; ROUND FAC USING EXTENSION BYTE
0017E5r 1               ; ----------------------------------------------------------------------------
0017E5r 1               ROUND_FAC:
0017E5r 1  A5 AC                lda     FAC
0017E7r 1  F0 FB                beq     RTS14
0017E9r 1  06 B9                asl     FACEXTENSION
0017EBr 1  90 F7                bcc     RTS14
0017EDr 1               ; ----------------------------------------------------------------------------
0017EDr 1               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
0017EDr 1               ; ----------------------------------------------------------------------------
0017EDr 1               INCREMENT_MANTISSA:
0017EDr 1  20 rr rr             jsr     INCREMENT_FAC_MANTISSA
0017F0r 1  D0 F2                bne     RTS14
0017F2r 1  4C rr rr             jmp     NORMALIZE_FAC6
0017F5r 1               ; ----------------------------------------------------------------------------
0017F5r 1               ; TEST FAC FOR ZERO AND SIGN
0017F5r 1               ;
0017F5r 1               ; FAC > 0, RETURN +1
0017F5r 1               ; FAC = 0, RETURN  0
0017F5r 1               ; FAC < 0, RETURN -1
0017F5r 1               ; ----------------------------------------------------------------------------
0017F5r 1               SIGN:
0017F5r 1  A5 AC                lda     FAC
0017F7r 1  F0 09                beq     RTS15
0017F9r 1               L3AA7:
0017F9r 1  A5 B0                lda     FACSIGN
0017FBr 1               SIGN2:
0017FBr 1  2A                   rol     a
0017FCr 1  A9 FF                lda     #$FF
0017FEr 1  B0 02                bcs     RTS15
001800r 1  A9 01                lda     #$01
001802r 1               RTS15:
001802r 1  60                   rts
001803r 1               ; ----------------------------------------------------------------------------
001803r 1               ; "SGN" FUNCTION
001803r 1               ; ----------------------------------------------------------------------------
001803r 1               SGN:
001803r 1  20 rr rr             jsr     SIGN
001806r 1               ; ----------------------------------------------------------------------------
001806r 1               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
001806r 1               ; ----------------------------------------------------------------------------
001806r 1               FLOAT:
001806r 1  85 AD                sta     FAC+1
001808r 1  A9 00                lda     #$00
00180Ar 1  85 AE                sta     FAC+2
00180Cr 1  A2 88                ldx     #$88
00180Er 1               ; ----------------------------------------------------------------------------
00180Er 1               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00180Er 1               ; (X) = EXPONENT
00180Er 1               ; ----------------------------------------------------------------------------
00180Er 1               FLOAT1:
00180Er 1  A5 AD                lda     FAC+1
001810r 1  49 FF                eor     #$FF
001812r 1  2A                   rol     a
001813r 1               ; ----------------------------------------------------------------------------
001813r 1               ; FLOAT UNSIGNED VALUE IN FAC+1,2
001813r 1               ; (X) = EXPONENT
001813r 1               ; C=0 TO MAKE VALUE NEGATIVE
001813r 1               ; C=1 TO MAKE VALUE POSITIVE
001813r 1               ; ----------------------------------------------------------------------------
001813r 1               FLOAT2:
001813r 1  A9 00                lda     #$00
001815r 1  85 AF                sta     FAC+3
001817r 1  86 AC                stx     FAC
001819r 1  85 B9                sta     FACEXTENSION
00181Br 1  85 B0                sta     FACSIGN
00181Dr 1  4C rr rr             jmp     NORMALIZE_FAC1
001820r 1               ; ----------------------------------------------------------------------------
001820r 1               ; "ABS" FUNCTION
001820r 1               ; ----------------------------------------------------------------------------
001820r 1               ABS:
001820r 1  46 B0                lsr     FACSIGN
001822r 1  60                   rts
001823r 1               ; ----------------------------------------------------------------------------
001823r 1               ; COMPARE FAC WITH PACKED # AT (Y,A)
001823r 1               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
001823r 1               ; ----------------------------------------------------------------------------
001823r 1               FCOMP:
001823r 1  85 73                sta     DEST
001825r 1               ; ----------------------------------------------------------------------------
001825r 1               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
001825r 1               ; "DEST" ALREADY SET UP
001825r 1               ; ----------------------------------------------------------------------------
001825r 1               FCOMP2:
001825r 1  84 74                sty     DEST+1
001827r 1  A0 00                ldy     #$00
001829r 1  B1 73                lda     (DEST),y
00182Br 1  C8                   iny
00182Cr 1  AA                   tax
00182Dr 1  F0 C6                beq     SIGN
00182Fr 1  B1 73                lda     (DEST),y
001831r 1  45 B0                eor     FACSIGN
001833r 1  30 C4                bmi     L3AA7
001835r 1  E4 AC                cpx     FAC
001837r 1  D0 1A                bne     L3B0A
001839r 1  B1 73                lda     (DEST),y
00183Br 1  09 80                ora     #$80
00183Dr 1  C5 AD                cmp     FAC+1
00183Fr 1  D0 12                bne     L3B0A
001841r 1  C8                   iny
001842r 1  B1 73                lda     (DEST),y
001844r 1  C5 AE                cmp     FAC+2
001846r 1  D0 0B                bne     L3B0A
001848r 1  C8                   iny
001849r 1  A9 7F                lda     #$7F
00184Br 1  C5 B9                cmp     FACEXTENSION
00184Dr 1  B1 73                lda     (DEST),y
00184Fr 1  E5 AF                sbc     FAC_LAST
001851r 1  F0 28                beq     L3B32
001853r 1               L3B0A:
001853r 1  A5 B0                lda     FACSIGN
001855r 1  90 02                bcc     L3B10
001857r 1  49 FF                eor     #$FF
001859r 1               L3B10:
001859r 1  4C rr rr             jmp     SIGN2
00185Cr 1               ; ----------------------------------------------------------------------------
00185Cr 1               ; QUICK INTEGER FUNCTION
00185Cr 1               ;
00185Cr 1               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
00185Cr 1               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
00185Cr 1               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
00185Cr 1               ;
00185Cr 1               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
00185Cr 1               ; ----------------------------------------------------------------------------
00185Cr 1               QINT:
00185Cr 1  A5 AC                lda     FAC
00185Er 1  F0 4A                beq     QINT3
001860r 1  38                   sec
001861r 1  E9 98                sbc     #120+8*BYTES_FP
001863r 1  24 B0                bit     FACSIGN
001865r 1  10 09                bpl     L3B27
001867r 1  AA                   tax
001868r 1  A9 FF                lda     #$FF
00186Ar 1  85 B2                sta     SHIFTSIGNEXT
00186Cr 1  20 rr rr             jsr     COMPLEMENT_FAC_MANTISSA
00186Fr 1  8A                   txa
001870r 1               L3B27:
001870r 1  A2 AC                ldx     #FAC
001872r 1  C9 F9                cmp     #$F9
001874r 1  10 06                bpl     QINT2
001876r 1  20 rr rr             jsr     SHIFT_RIGHT
001879r 1  84 B2                sty     SHIFTSIGNEXT
00187Br 1               L3B32:
00187Br 1  60                   rts
00187Cr 1               QINT2:
00187Cr 1  A8                   tay
00187Dr 1  A5 B0                lda     FACSIGN
00187Fr 1  29 80                and     #$80
001881r 1  46 AD                lsr     FAC+1
001883r 1  05 AD                ora     FAC+1
001885r 1  85 AD                sta     FAC+1
001887r 1  20 rr rr             jsr     SHIFT_RIGHT4
00188Ar 1  84 B2                sty     SHIFTSIGNEXT
00188Cr 1  60                   rts
00188Dr 1               ; ----------------------------------------------------------------------------
00188Dr 1               ; "INT" FUNCTION
00188Dr 1               ;
00188Dr 1               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
00188Dr 1               ; AND THEN REFLOATS THE INTEGER.
00188Dr 1               ; ----------------------------------------------------------------------------
00188Dr 1               INT:
00188Dr 1  A5 AC                lda     FAC
00188Fr 1  C9 98                cmp     #120+8*BYTES_FP
001891r 1  B0 1E                bcs     RTS17
001893r 1  20 rr rr             jsr     QINT
001896r 1  84 B9                sty     FACEXTENSION
001898r 1  A5 B0                lda     FACSIGN
00189Ar 1  84 B0                sty     FACSIGN
00189Cr 1  49 80                eor     #$80
00189Er 1  2A                   rol     a
00189Fr 1  A9 98                lda     #120+8*BYTES_FP
0018A1r 1  85 AC                sta     FAC
0018A3r 1  A5 AF                lda     FAC_LAST
0018A5r 1  85 5B                sta     CHARAC
0018A7r 1  4C rr rr             jmp     NORMALIZE_FAC1
0018AAr 1               QINT3:
0018AAr 1  85 AD                sta     FAC+1
0018ACr 1  85 AE                sta     FAC+2
0018AEr 1  85 AF                sta     FAC+3
0018B0r 1  A8                   tay
0018B1r 1               RTS17:
0018B1r 1  60                   rts
0018B2r 1               ; ----------------------------------------------------------------------------
0018B2r 1               ; CONVERT STRING TO FP VALUE IN FAC
0018B2r 1               ;
0018B2r 1               ; STRING POINTED TO BY TXTPTR
0018B2r 1               ; FIRST CHAR ALREADY SCANNED BY CHRGET
0018B2r 1               ; (A) = FIRST CHAR, C=0 IF DIGIT.
0018B2r 1               ; ----------------------------------------------------------------------------
0018B2r 1               FIN:
0018B2r 1  A0 00                ldy     #$00
0018B4r 1  A2 09                ldx     #SERLEN-TMPEXP
0018B6r 1               L3B6F:
0018B6r 1  94 A8                sty     TMPEXP,x
0018B8r 1  CA                   dex
0018B9r 1  10 FB                bpl     L3B6F
0018BBr 1  90 0F                bcc     FIN2
0018BDr 1  C9 2D                cmp     #$2D
0018BFr 1  D0 04                bne     L3B7E
0018C1r 1  86 B1                stx     SERLEN
0018C3r 1  F0 04                beq     FIN1
0018C5r 1               L3B7E:
0018C5r 1  C9 2B                cmp     #$2B
0018C7r 1  D0 05                bne     FIN3
0018C9r 1               FIN1:
0018C9r 1  20 BC 00             jsr     CHRGET
0018CCr 1               FIN2:
0018CCr 1  90 5B                bcc     FIN9
0018CEr 1               FIN3:
0018CEr 1  C9 2E                cmp     #$2E
0018D0r 1  F0 2E                beq     FIN10
0018D2r 1  C9 45                cmp     #$45
0018D4r 1  D0 30                bne     FIN7
0018D6r 1  20 BC 00             jsr     CHRGET
0018D9r 1  90 17                bcc     FIN5
0018DBr 1  C9 A4                cmp     #TOKEN_MINUS
0018DDr 1  F0 0E                beq     L3BA6
0018DFr 1  C9 2D                cmp     #$2D
0018E1r 1  F0 0A                beq     L3BA6
0018E3r 1  C9 A3                cmp     #TOKEN_PLUS
0018E5r 1  F0 08                beq     FIN4
0018E7r 1  C9 2B                cmp     #$2B
0018E9r 1  F0 04                beq     FIN4
0018EBr 1  D0 07                bne     FIN6
0018EDr 1               L3BA6:
0018EDr 1  66 AB                ror     EXPSGN
0018EFr 1               FIN4:
0018EFr 1  20 BC 00             jsr     CHRGET
0018F2r 1               FIN5:
0018F2r 1  90 5C                bcc     GETEXP
0018F4r 1               FIN6:
0018F4r 1  24 AB                bit     EXPSGN
0018F6r 1  10 0E                bpl     FIN7
0018F8r 1  A9 00                lda     #$00
0018FAr 1  38                   sec
0018FBr 1  E5 A9                sbc     EXPON
0018FDr 1  4C rr rr             jmp     FIN8
001900r 1               ; ----------------------------------------------------------------------------
001900r 1               ; FOUND A DECIMAL POINT
001900r 1               ; ----------------------------------------------------------------------------
001900r 1               FIN10:
001900r 1  66 AA                ror     LOWTR
001902r 1  24 AA                bit     LOWTR
001904r 1  50 C3                bvc     FIN1
001906r 1               ; ----------------------------------------------------------------------------
001906r 1               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
001906r 1               ; ----------------------------------------------------------------------------
001906r 1               FIN7:
001906r 1  A5 A9                lda     EXPON
001908r 1               FIN8:
001908r 1  38                   sec
001909r 1  E5 A8                sbc     INDX
00190Br 1  85 A9                sta     EXPON
00190Dr 1  F0 12                beq     L3BEE
00190Fr 1  10 09                bpl     L3BE7
001911r 1               L3BDE:
001911r 1  20 rr rr             jsr     DIV10
001914r 1  E6 A9                inc     EXPON
001916r 1  D0 F9                bne     L3BDE
001918r 1  F0 07                beq     L3BEE
00191Ar 1               L3BE7:
00191Ar 1  20 rr rr             jsr     MUL10
00191Dr 1  C6 A9                dec     EXPON
00191Fr 1  D0 F9                bne     L3BE7
001921r 1               L3BEE:
001921r 1  A5 B1                lda     SERLEN
001923r 1  30 01                bmi     L3BF3
001925r 1  60                   rts
001926r 1               L3BF3:
001926r 1  4C rr rr             jmp     NEGOP
001929r 1               ; ----------------------------------------------------------------------------
001929r 1               ; ACCUMULATE A DIGIT INTO FAC
001929r 1               ; ----------------------------------------------------------------------------
001929r 1               FIN9:
001929r 1  48                   pha
00192Ar 1  24 AA                bit     LOWTR
00192Cr 1  10 02                bpl     L3BFD
00192Er 1  E6 A8                inc     INDX
001930r 1               L3BFD:
001930r 1  20 rr rr             jsr     MUL10
001933r 1  68                   pla
001934r 1  38                   sec
001935r 1  E9 30                sbc     #$30
001937r 1  20 rr rr             jsr     ADDACC
00193Ar 1  4C rr rr             jmp     FIN1
00193Dr 1               ; ----------------------------------------------------------------------------
00193Dr 1               ; ADD (A) TO FAC
00193Dr 1               ; ----------------------------------------------------------------------------
00193Dr 1               ADDACC:
00193Dr 1  48                   pha
00193Er 1  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001941r 1  68                   pla
001942r 1  20 rr rr             jsr     FLOAT
001945r 1  A5 B7                lda     ARGSIGN
001947r 1  45 B0                eor     FACSIGN
001949r 1  85 B8                sta     SGNCPR
00194Br 1  A6 AC                ldx     FAC
00194Dr 1  4C rr rr             jmp     FADDT
001950r 1               ; ----------------------------------------------------------------------------
001950r 1               ; ACCUMULATE DIGIT OF EXPONENT
001950r 1               ; ----------------------------------------------------------------------------
001950r 1               GETEXP:
001950r 1  A5 A9                lda     EXPON
001952r 1  C9 0A                cmp     #MAX_EXPON
001954r 1  90 09                bcc     L3C2C
001956r 1  A9 64                lda     #$64
001958r 1  24 AB                bit     EXPSGN
00195Ar 1  30 11                bmi     L3C3A
00195Cr 1  4C rr rr             jmp     OVERFLOW
00195Fr 1               L3C2C:
00195Fr 1  0A                   asl     a
001960r 1  0A                   asl     a
001961r 1  18                   clc
001962r 1  65 A9                adc     EXPON
001964r 1  0A                   asl     a
001965r 1  18                   clc
001966r 1  A0 00                ldy     #$00
001968r 1  71 C3                adc     (TXTPTR),y
00196Ar 1  38                   sec
00196Br 1  E9 30                sbc     #$30
00196Dr 1               L3C3A:
00196Dr 1  85 A9                sta     EXPON
00196Fr 1  4C rr rr             jmp     FIN4
001972r 1               ; ----------------------------------------------------------------------------
001972r 1               ; these values are /1000 of what the labels say
001972r 1               CON_99999999_9:
001972r 1  91 43 4F F8          .byte   $91,$43,$4F,$F8
001976r 1               CON_999999999:
001976r 1  94 74 23 F7  		.byte   $94,$74,$23,$F7
00197Ar 1               CON_BILLION:
00197Ar 1  94 74 24 00          .byte   $94,$74,$24,$00
00197Er 1               ; ----------------------------------------------------------------------------
00197Er 1               ; PRINT "IN <LINE #>"
00197Er 1               ; ----------------------------------------------------------------------------
00197Er 1               INPRT:
00197Er 1  A9 rr                lda     #<QT_IN
001980r 1  A0 rr                ldy     #>QT_IN
001982r 1  20 rr rr             jsr     GOSTROUT2
001985r 1  A5 88                lda     CURLIN+1
001987r 1  A6 87                ldx     CURLIN
001989r 1               ; ----------------------------------------------------------------------------
001989r 1               ; PRINT A,X AS DECIMAL INTEGER
001989r 1               ; ----------------------------------------------------------------------------
001989r 1               LINPRT:
001989r 1  85 AD                sta     FAC+1
00198Br 1  86 AE                stx     FAC+2
00198Dr 1  A2 90                ldx     #$90
00198Fr 1  38                   sec
001990r 1  20 rr rr             jsr     FLOAT2
001993r 1  20 rr rr             jsr     FOUT
001996r 1               GOSTROUT2:
001996r 1  4C rr rr             jmp     STROUT
001999r 1               ; ----------------------------------------------------------------------------
001999r 1               ; CONVERT (FAC) TO STRING STARTING AT STACK
001999r 1               ; RETURN WITH (Y,A) POINTING AT STRING
001999r 1               ; ----------------------------------------------------------------------------
001999r 1               FOUT:
001999r 1  A0 01                ldy     #$01
00199Br 1               ; ----------------------------------------------------------------------------
00199Br 1               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
00199Br 1               ; SO THAT RESULT STRING STARTS AT STACK-1
00199Br 1               ; (THIS IS USED AS A FLAG)
00199Br 1               ; ----------------------------------------------------------------------------
00199Br 1               FOUT1:
00199Br 1  A9 20                lda     #$20
00199Dr 1  24 B0                bit     FACSIGN
00199Fr 1  10 02                bpl     L3C73
0019A1r 1  A9 2D                lda     #$2D
0019A3r 1               L3C73:
0019A3r 1  99 FF 00             sta     $FF,y
0019A6r 1  85 B0                sta     FACSIGN
0019A8r 1  84 BA                sty     STRNG2
0019AAr 1  C8                   iny
0019ABr 1  A9 30                lda     #$30
0019ADr 1  A6 AC                ldx     FAC
0019AFr 1  D0 03                bne     L3C84
0019B1r 1  4C rr rr             jmp     FOUT4
0019B4r 1               L3C84:
0019B4r 1  A9 00                lda     #$00
0019B6r 1  E0 80                cpx     #$80
0019B8r 1  F0 02                beq     L3C8C
0019BAr 1  B0 09                bcs     L3C95
0019BCr 1               L3C8C:
0019BCr 1  A9 rr                lda     #<CON_BILLION
0019BEr 1  A0 rr                ldy     #>CON_BILLION
0019C0r 1  20 rr rr             jsr     FMULT
0019C3r 1  A9 FA                lda     #-6 ; exponent adjustment
0019C5r 1               L3C95:
0019C5r 1  85 A8                sta     INDX
0019C7r 1               ; ----------------------------------------------------------------------------
0019C7r 1               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
0019C7r 1               ; ----------------------------------------------------------------------------
0019C7r 1               L3C97:
0019C7r 1  A9 rr                lda     #<CON_999999999
0019C9r 1  A0 rr                ldy     #>CON_999999999
0019CBr 1  20 rr rr             jsr     FCOMP
0019CEr 1  F0 1E                beq     L3CBE
0019D0r 1  10 12                bpl     L3CB4
0019D2r 1               L3CA2:
0019D2r 1  A9 rr                lda     #<CON_99999999_9
0019D4r 1  A0 rr                ldy     #>CON_99999999_9
0019D6r 1  20 rr rr             jsr     FCOMP
0019D9r 1  F0 02                beq     L3CAD
0019DBr 1  10 0E                bpl     L3CBB
0019DDr 1               L3CAD:
0019DDr 1  20 rr rr             jsr     MUL10
0019E0r 1  C6 A8                dec     INDX
0019E2r 1  D0 EE                bne     L3CA2
0019E4r 1               L3CB4:
0019E4r 1  20 rr rr             jsr     DIV10
0019E7r 1  E6 A8                inc     INDX
0019E9r 1  D0 DC                bne     L3C97
0019EBr 1               L3CBB:
0019EBr 1  20 rr rr             jsr     FADDH
0019EEr 1               L3CBE:
0019EEr 1  20 rr rr             jsr     QINT
0019F1r 1               ; ----------------------------------------------------------------------------
0019F1r 1               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
0019F1r 1               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
0019F1r 1               ;
0019F1r 1               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
0019F1r 1               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
0019F1r 1               ; ----------------------------------------------------------------------------
0019F1r 1  A2 01                ldx     #$01
0019F3r 1  A5 A8                lda     INDX
0019F5r 1  18                   clc
0019F6r 1  69 07                adc     #3*BYTES_FP-5
0019F8r 1  30 09                bmi     L3CD3
0019FAr 1  C9 08                cmp     #3*BYTES_FP-4
0019FCr 1  B0 06                bcs     L3CD4
0019FEr 1  69 FF                adc     #$FF
001A00r 1  AA                   tax
001A01r 1  A9 02                lda     #$02
001A03r 1               L3CD3:
001A03r 1  38                   sec
001A04r 1               L3CD4:
001A04r 1  E9 02                sbc     #$02
001A06r 1  85 A9                sta     EXPON
001A08r 1  86 A8                stx     INDX
001A0Ar 1  8A                   txa
001A0Br 1  F0 02                beq     L3CDF
001A0Dr 1  10 13                bpl     L3CF2
001A0Fr 1               L3CDF:
001A0Fr 1  A4 BA                ldy     STRNG2
001A11r 1  A9 2E                lda     #$2E
001A13r 1  C8                   iny
001A14r 1  99 FF 00             sta     $FF,y
001A17r 1  8A                   txa
001A18r 1  F0 06                beq     L3CF0
001A1Ar 1  A9 30                lda     #$30
001A1Cr 1  C8                   iny
001A1Dr 1  99 FF 00             sta     $FF,y
001A20r 1               L3CF0:
001A20r 1  84 BA                sty     STRNG2
001A22r 1               ; ----------------------------------------------------------------------------
001A22r 1               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
001A22r 1               ; ----------------------------------------------------------------------------
001A22r 1               L3CF2:
001A22r 1  A0 00                ldy     #$00
001A24r 1  A2 80                ldx     #$80
001A26r 1               L3CF6:
001A26r 1  A5 AF                lda     FAC_LAST
001A28r 1  18                   clc
001A29r 1  79 rr rr             adc     DECTBL+2,y
001A2Cr 1  85 AF                sta     FAC+3
001A2Er 1  A5 AE                lda     FAC+2
001A30r 1  79 rr rr             adc     DECTBL+1,y
001A33r 1  85 AE                sta     FAC+2
001A35r 1  A5 AD                lda     FAC+1
001A37r 1  79 rr rr             adc     DECTBL,y
001A3Ar 1  85 AD                sta     FAC+1
001A3Cr 1  E8                   inx
001A3Dr 1  B0 04                bcs     L3D1A
001A3Fr 1  10 E5                bpl     L3CF6
001A41r 1  30 02                bmi     L3D1C
001A43r 1               L3D1A:
001A43r 1  30 E1                bmi     L3CF6
001A45r 1               L3D1C:
001A45r 1  8A                   txa
001A46r 1  90 04                bcc     L3D23
001A48r 1  49 FF                eor     #$FF
001A4Ar 1  69 0A                adc     #$0A
001A4Cr 1               L3D23:
001A4Cr 1  69 2F                adc     #$2F
001A4Er 1  C8                   iny
001A4Fr 1  C8                   iny
001A50r 1  C8                   iny
001A51r 1  84 95                sty     VARPNT
001A53r 1  A4 BA                ldy     STRNG2
001A55r 1  C8                   iny
001A56r 1  AA                   tax
001A57r 1  29 7F                and     #$7F
001A59r 1  99 FF 00             sta     $FF,y
001A5Cr 1  C6 A8                dec     INDX
001A5Er 1  D0 06                bne     L3D3E
001A60r 1  A9 2E                lda     #$2E
001A62r 1  C8                   iny
001A63r 1  99 FF 00             sta     $FF,y
001A66r 1               L3D3E:
001A66r 1  84 BA                sty     STRNG2
001A68r 1  A4 95                ldy     VARPNT
001A6Ar 1  8A                   txa
001A6Br 1  49 FF                eor     #$FF
001A6Dr 1  29 80                and     #$80
001A6Fr 1  AA                   tax
001A70r 1  C0 12                cpy     #DECTBL_END-DECTBL
001A72r 1  D0 B2                bne     L3CF6
001A74r 1               ; ----------------------------------------------------------------------------
001A74r 1               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
001A74r 1               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
001A74r 1               ; DECIMAL POINT.
001A74r 1               ; ----------------------------------------------------------------------------
001A74r 1  A4 BA                ldy     STRNG2
001A76r 1               L3D4E:
001A76r 1  B9 FF 00             lda     $FF,y
001A79r 1  88                   dey
001A7Ar 1  C9 30                cmp     #$30
001A7Cr 1  F0 F8                beq     L3D4E
001A7Er 1  C9 2E                cmp     #$2E
001A80r 1  F0 01                beq     L3D5B
001A82r 1  C8                   iny
001A83r 1               L3D5B:
001A83r 1  A9 2B                lda     #$2B
001A85r 1  A6 A9                ldx     EXPON
001A87r 1  F0 2E                beq     L3D8F
001A89r 1  10 08                bpl     L3D6B
001A8Br 1  A9 00                lda     #$00
001A8Dr 1  38                   sec
001A8Er 1  E5 A9                sbc     EXPON
001A90r 1  AA                   tax
001A91r 1  A9 2D                lda     #$2D
001A93r 1               L3D6B:
001A93r 1  99 01 01             sta     STACK+1,y
001A96r 1  A9 45                lda     #$45
001A98r 1  99 00 01             sta     STACK,y
001A9Br 1  8A                   txa
001A9Cr 1  A2 2F                ldx     #$2F
001A9Er 1  38                   sec
001A9Fr 1               L3D77:
001A9Fr 1  E8                   inx
001AA0r 1  E9 0A                sbc     #$0A
001AA2r 1  B0 FB                bcs     L3D77
001AA4r 1  69 3A                adc     #$3A
001AA6r 1  99 03 01             sta     STACK+3,y
001AA9r 1  8A                   txa
001AAAr 1  99 02 01             sta     STACK+2,y
001AADr 1  A9 00                lda     #$00
001AAFr 1  99 04 01             sta     STACK+4,y
001AB2r 1  F0 08                beq     L3D94
001AB4r 1               FOUT4:
001AB4r 1  99 FF 00             sta     $FF,y
001AB7r 1               L3D8F:
001AB7r 1  A9 00                lda     #$00
001AB9r 1  99 00 01             sta     STACK,y
001ABCr 1               L3D94:
001ABCr 1  A9 00                lda     #$00
001ABEr 1  A0 01                ldy     #$01
001AC0r 1  60                   rts
001AC1r 1               ; ----------------------------------------------------------------------------
001AC1r 1               CON_HALF:
001AC1r 1  80 00 00 00          .byte   $80,$00,$00,$00
001AC5r 1               ; ----------------------------------------------------------------------------
001AC5r 1               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
001AC5r 1               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
001AC5r 1               ; ----------------------------------------------------------------------------
001AC5r 1               DECTBL:
001AC5r 1  FE 79 60             .byte   $FE,$79,$60 ; -100000
001AC8r 1  00 27 10     		.byte	$00,$27,$10 ; 10000
001ACBr 1  FF FC 18     		.byte	$FF,$FC,$18 ; -1000
001ACEr 1  00 00 64     		.byte	$00,$00,$64 ; 100
001AD1r 1  FF FF F6     		.byte	$FF,$FF,$F6 ; -10
001AD4r 1  00 00 01     		.byte	$00,$00,$01 ; 1
001AD7r 1               DECTBL_END:
001AD7r 1               ; ----------------------------------------------------------------------------
001AD7r 1               ; "SQR" FUNCTION
001AD7r 1               ; ----------------------------------------------------------------------------
001AD7r 1               SQR:
001AD7r 1  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001ADAr 1  A9 rr                lda     #<CON_HALF
001ADCr 1  A0 rr                ldy     #>CON_HALF
001ADEr 1  20 rr rr             jsr     LOAD_FAC_FROM_YA
001AE1r 1               ; ----------------------------------------------------------------------------
001AE1r 1               ; EXPONENTIATION OPERATION
001AE1r 1               ;
001AE1r 1               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
001AE1r 1               ; ----------------------------------------------------------------------------
001AE1r 1               FPWRT:
001AE1r 1  F0 63                beq     EXP
001AE3r 1  A5 B3                lda     ARG
001AE5r 1  D0 03                bne     L3DD5
001AE7r 1  4C rr rr             jmp     STA_IN_FAC_SIGN_AND_EXP
001AEAr 1               L3DD5:
001AEAr 1  A2 9C                ldx     #TEMP3
001AECr 1  A0 00                ldy     #$00
001AEEr 1  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
001AF1r 1  A5 B7                lda     ARGSIGN
001AF3r 1  10 0F                bpl     L3DEF
001AF5r 1  20 rr rr             jsr     INT
001AF8r 1  A9 9C                lda     #TEMP3
001AFAr 1  A0 00                ldy     #$00
001AFCr 1  20 rr rr             jsr     FCOMP
001AFFr 1  D0 03                bne     L3DEF
001B01r 1  98                   tya
001B02r 1  A4 5B                ldy     CHARAC
001B04r 1               L3DEF:
001B04r 1  20 rr rr             jsr     MFA
001B07r 1  98                   tya
001B08r 1  48                   pha
001B09r 1  20 rr rr             jsr     LOG
001B0Cr 1  A9 9C                lda     #TEMP3
001B0Er 1  A0 00                ldy     #$00
001B10r 1  20 rr rr             jsr     FMULT
001B13r 1  20 rr rr             jsr     EXP
001B16r 1  68                   pla
001B17r 1  4A                   lsr     a
001B18r 1  90 0A                bcc     L3E0F
001B1Ar 1               ; ----------------------------------------------------------------------------
001B1Ar 1               ; NEGATE VALUE IN FAC
001B1Ar 1               ; ----------------------------------------------------------------------------
001B1Ar 1               NEGOP:
001B1Ar 1  A5 AC                lda     FAC
001B1Cr 1  F0 06                beq     L3E0F
001B1Er 1  A5 B0                lda     FACSIGN
001B20r 1  49 FF                eor     #$FF
001B22r 1  85 B0                sta     FACSIGN
001B24r 1               L3E0F:
001B24r 1  60                   rts
001B25r 1               ; ----------------------------------------------------------------------------
001B25r 1               CON_LOG_E:
001B25r 1  81 38 AA 3B          .byte   $81,$38,$AA,$3B
001B29r 1               POLY_EXP:
001B29r 1  06           		.byte	$06
001B2Ar 1  74 63 90 8C  		.byte	$74,$63,$90,$8C
001B2Er 1  77 23 0C AB  		.byte	$77,$23,$0C,$AB
001B32r 1  7A 1E 94 00  		.byte	$7A,$1E,$94,$00
001B36r 1  7C 63 42 80  		.byte	$7C,$63,$42,$80
001B3Ar 1  7E 75 FE D0  		.byte	$7E,$75,$FE,$D0
001B3Er 1  80 31 72 15  		.byte	$80,$31,$72,$15
001B42r 1  81 00 00 00  		.byte	$81,$00,$00,$00
001B46r 1               ; ----------------------------------------------------------------------------
001B46r 1               ; "EXP" FUNCTION
001B46r 1               ;
001B46r 1               ; FAC = E ^ FAC
001B46r 1               ; ----------------------------------------------------------------------------
001B46r 1               EXP:
001B46r 1  A9 rr                lda     #<CON_LOG_E
001B48r 1  A0 rr                ldy     #>CON_LOG_E
001B4Ar 1  20 rr rr             jsr     FMULT
001B4Dr 1  A5 B9                lda     FACEXTENSION
001B4Fr 1  69 50                adc     #$50
001B51r 1  90 03                bcc     L3E4E
001B53r 1  20 rr rr             jsr     INCREMENT_MANTISSA
001B56r 1               L3E4E:
001B56r 1  85 A3                sta     ARGEXTENSION
001B58r 1  20 rr rr             jsr     MAF
001B5Br 1  A5 AC                lda     FAC
001B5Dr 1  C9 88                cmp     #$88
001B5Fr 1  90 03                bcc     L3E5C
001B61r 1               L3E59:
001B61r 1  20 rr rr             jsr     OUTOFRNG
001B64r 1               L3E5C:
001B64r 1  20 rr rr             jsr     INT
001B67r 1  A5 5B                lda     CHARAC
001B69r 1  18                   clc
001B6Ar 1  69 81                adc     #$81
001B6Cr 1  F0 F3                beq     L3E59
001B6Er 1  38                   sec
001B6Fr 1  E9 01                sbc     #$01
001B71r 1  48                   pha
001B72r 1  A2 04                ldx     #BYTES_FP
001B74r 1               L3E6C:
001B74r 1  B5 B3                lda     ARG,x
001B76r 1  B4 AC                ldy     FAC,x
001B78r 1  95 AC                sta     FAC,x
001B7Ar 1  94 B3                sty     ARG,x
001B7Cr 1  CA                   dex
001B7Dr 1  10 F5                bpl     L3E6C
001B7Fr 1  A5 A3                lda     ARGEXTENSION
001B81r 1  85 B9                sta     FACEXTENSION
001B83r 1  20 rr rr             jsr     FSUBT
001B86r 1  20 rr rr             jsr     NEGOP
001B89r 1  A9 rr                lda     #<POLY_EXP
001B8Br 1  A0 rr                ldy     #>POLY_EXP
001B8Dr 1  20 rr rr             jsr     POLYNOMIAL
001B90r 1  A9 00                lda     #$00
001B92r 1  85 B8                sta     SGNCPR
001B94r 1  68                   pla
001B95r 1  20 rr rr             jsr     ADD_EXPONENTS1
001B98r 1  60                   rts
001B99r 1               ; ----------------------------------------------------------------------------
001B99r 1               ; ODD POLYNOMIAL SUBROUTINE
001B99r 1               ;
001B99r 1               ; F(X) = X * P(X^2)
001B99r 1               ;
001B99r 1               ; WHERE:  X IS VALUE IN FAC
001B99r 1               ;	Y,A POINTS AT COEFFICIENT TABLE
001B99r 1               ;	FIRST BYTE OF COEFF. TABLE IS N
001B99r 1               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001B99r 1               ;
001B99r 1               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
001B99r 1               ; ----------------------------------------------------------------------------
001B99r 1               POLYNOMIAL_ODD:
001B99r 1  85 BA                sta     STRNG2
001B9Br 1  84 BB                sty     STRNG2+1
001B9Dr 1  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001BA0r 1  A9 A4                lda     #TEMP1X
001BA2r 1  20 rr rr             jsr     FMULT
001BA5r 1  20 rr rr             jsr     SERMAIN
001BA8r 1  A9 A4                lda     #TEMP1X
001BAAr 1  A0 00                ldy     #$00
001BACr 1  4C rr rr             jmp     FMULT
001BAFr 1               ; ----------------------------------------------------------------------------
001BAFr 1               ; NORMAL POLYNOMIAL SUBROUTINE
001BAFr 1               ;
001BAFr 1               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
001BAFr 1               ;
001BAFr 1               ; WHERE:  X IS VALUE IN FAC
001BAFr 1               ;	Y,A POINTS AT COEFFICIENT TABLE
001BAFr 1               ;	FIRST BYTE OF COEFF. TABLE IS N
001BAFr 1               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001BAFr 1               ; ----------------------------------------------------------------------------
001BAFr 1               POLYNOMIAL:
001BAFr 1  85 BA                sta     STRNG2
001BB1r 1  84 BB                sty     STRNG2+1
001BB3r 1               SERMAIN:
001BB3r 1  20 rr rr             jsr     STORE_FAC_IN_TEMP2_ROUNDED
001BB6r 1  B1 BA                lda     (STRNG2),y
001BB8r 1  85 B1                sta     SERLEN
001BBAr 1  A4 BA                ldy     STRNG2
001BBCr 1  C8                   iny
001BBDr 1  98                   tya
001BBEr 1  D0 02                bne     L3EBA
001BC0r 1  E6 BB                inc     STRNG2+1
001BC2r 1               L3EBA:
001BC2r 1  85 BA                sta     STRNG2
001BC4r 1  A4 BB                ldy     STRNG2+1
001BC6r 1               L3EBE:
001BC6r 1  20 rr rr             jsr     FMULT
001BC9r 1  A5 BA                lda     STRNG2
001BCBr 1  A4 BB                ldy     STRNG2+1
001BCDr 1  18                   clc
001BCEr 1  69 04                adc     #BYTES_FP
001BD0r 1  90 01                bcc     L3ECB
001BD2r 1  C8                   iny
001BD3r 1               L3ECB:
001BD3r 1  85 BA                sta     STRNG2
001BD5r 1  84 BB                sty     STRNG2+1
001BD7r 1  20 rr rr             jsr     FADD
001BDAr 1  A9 A8                lda     #TEMP2
001BDCr 1  A0 00                ldy     #$00
001BDEr 1  C6 B1                dec     SERLEN
001BE0r 1  D0 E4                bne     L3EBE
001BE2r 1               RTS19:
001BE2r 1  60                   rts
001BE3r 1               ; ----------------------------------------------------------------------------
001BE3r 1               ; "RND" FUNCTION
001BE3r 1               ; ----------------------------------------------------------------------------
001BE3r 1               CONRND1:
001BE3r 1  98 35 44 7A          .byte   $98,$35,$44,$7A
001BE7r 1               CONRND2:
001BE7r 1  68 28 B1 46          .byte   $68,$28,$B1,$46
001BEBr 1               RND:
001BEBr 1  20 rr rr             jsr     SIGN
001BEEr 1  AA                   tax
001BEFr 1  30 18                bmi     L3F01
001BF1r 1  A9 D4                lda     #<RNDSEED
001BF3r 1  A0 00                ldy     #>RNDSEED
001BF5r 1  20 rr rr             jsr     LOAD_FAC_FROM_YA
001BF8r 1  8A                   txa
001BF9r 1  F0 E7                beq     RTS19
001BFBr 1  A9 rr                lda     #<CONRND1
001BFDr 1  A0 rr                ldy     #>CONRND1
001BFFr 1  20 rr rr             jsr     FMULT
001C02r 1  A9 rr                lda     #<CONRND2
001C04r 1  A0 rr                ldy     #>CONRND2
001C06r 1  20 rr rr             jsr     FADD
001C09r 1               L3F01:
001C09r 1  A6 AF                ldx     FAC_LAST
001C0Br 1  A5 AD                lda     FAC+1
001C0Dr 1  85 AF                sta     FAC_LAST
001C0Fr 1  86 AD                stx     FAC+1
001C11r 1  A9 00                lda     #$00
001C13r 1  85 B0                sta     FACSIGN
001C15r 1  A5 AC                lda     FAC
001C17r 1  85 B9                sta     FACEXTENSION
001C19r 1  A9 80                lda     #$80
001C1Br 1  85 AC                sta     FAC
001C1Dr 1  20 rr rr             jsr     NORMALIZE_FAC2
001C20r 1  A2 D4                ldx     #<RNDSEED
001C22r 1  A0 00                ldy     #>RNDSEED
001C24r 1               GOMOVMF:
001C24r 1  4C rr rr             jmp     STORE_FAC_AT_YX_ROUNDED
001C27r 1               ; ----------------------------------------------------------------------------
001C27r 1               ; "COS" FUNCTION
001C27r 1               ; ----------------------------------------------------------------------------
001C27r 1               COS:
001C27r 1  A9 rr                lda     #<CON_PI_HALF
001C29r 1  A0 rr                ldy     #>CON_PI_HALF
001C2Br 1  20 rr rr             jsr     FADD
001C2Er 1               ; ----------------------------------------------------------------------------
001C2Er 1               ; "SIN" FUNCTION
001C2Er 1               ; ----------------------------------------------------------------------------
001C2Er 1               SIN:
001C2Er 1  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001C31r 1  A9 rr                lda     #<CON_PI_DOUB
001C33r 1  A0 rr                ldy     #>CON_PI_DOUB
001C35r 1  A6 B7                ldx     ARGSIGN
001C37r 1  20 rr rr             jsr     DIV
001C3Ar 1  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001C3Dr 1  20 rr rr             jsr     INT
001C40r 1  A9 00                lda     #$00
001C42r 1  85 B8                sta     STRNG1
001C44r 1  20 rr rr             jsr     FSUBT
001C47r 1               ; ----------------------------------------------------------------------------
001C47r 1               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
001C47r 1               ;
001C47r 1               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
001C47r 1               ;
001C47r 1               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
001C47r 1               ; ----------------------------------------------------------------------------
001C47r 1  A9 rr                lda     #<QUARTER
001C49r 1  A0 rr                ldy     #>QUARTER
001C4Br 1  20 rr rr             jsr     FSUB
001C4Er 1  A5 B0                lda     FACSIGN
001C50r 1  48                   pha
001C51r 1  10 0D                bpl     SIN1
001C53r 1  20 rr rr             jsr     FADDH
001C56r 1  A5 B0                lda     FACSIGN
001C58r 1  30 09                bmi     L3F5B
001C5Ar 1  A5 63                lda     CPRMASK
001C5Cr 1  49 FF                eor     #$FF
001C5Er 1  85 63                sta     CPRMASK
001C60r 1               ; ----------------------------------------------------------------------------
001C60r 1               ; IF FALL THRU, RANGE IS 0...1/2
001C60r 1               ; IF BRANCH HERE, RANGE IS 0...1/4
001C60r 1               ; ----------------------------------------------------------------------------
001C60r 1               SIN1:
001C60r 1  20 rr rr             jsr     NEGOP
001C63r 1               ; ----------------------------------------------------------------------------
001C63r 1               ; IF FALL THRU, RANGE IS -1/2...0
001C63r 1               ; IF BRANCH HERE, RANGE IS -1/4...0
001C63r 1               ; ----------------------------------------------------------------------------
001C63r 1               L3F5B:
001C63r 1  A9 rr                lda     #<QUARTER
001C65r 1  A0 rr                ldy     #>QUARTER
001C67r 1  20 rr rr             jsr     FADD
001C6Ar 1  68                   pla
001C6Br 1  10 03                bpl     L3F68
001C6Dr 1  20 rr rr             jsr     NEGOP
001C70r 1               L3F68:
001C70r 1  A9 rr                lda     #<POLY_SIN
001C72r 1  A0 rr                ldy     #>POLY_SIN
001C74r 1  4C rr rr             jmp     POLYNOMIAL_ODD
001C77r 1               ; ----------------------------------------------------------------------------
001C77r 1               ; "TAN" FUNCTION
001C77r 1               ;
001C77r 1               ; COMPUTE TAN(X) = SIN(X) / COS(X)
001C77r 1               ; ----------------------------------------------------------------------------
001C77r 1               TAN:
001C77r 1  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001C7Ar 1  A9 00                lda     #$00
001C7Cr 1  85 63                sta     CPRMASK
001C7Er 1  20 rr rr             jsr     SIN
001C81r 1  A2 9C                ldx     #TEMP3
001C83r 1  A0 00                ldy     #$00
001C85r 1  20 rr rr             jsr     GOMOVMF
001C88r 1  A9 A4                lda     #TEMP1+(5-BYTES_FP)
001C8Ar 1  A0 00                ldy     #$00
001C8Cr 1  20 rr rr             jsr     LOAD_FAC_FROM_YA
001C8Fr 1  A9 00                lda     #$00
001C91r 1  85 B0                sta     FACSIGN
001C93r 1  A5 63                lda     CPRMASK
001C95r 1  20 rr rr             jsr     TAN1
001C98r 1  A9 9C                lda     #TEMP3
001C9Ar 1  A0 00                ldy     #$00
001C9Cr 1  4C rr rr             jmp     FDIV
001C9Fr 1               TAN1:
001C9Fr 1  48                   pha
001CA0r 1  4C rr rr             jmp     SIN1
001CA3r 1               ; ----------------------------------------------------------------------------
001CA3r 1               CON_PI_HALF:
001CA3r 1  81 49 0F DB          .byte   $81,$49,$0F,$DB
001CA7r 1               CON_PI_DOUB:
001CA7r 1  83 49 0F DB          .byte   $83,$49,$0F,$DB
001CABr 1               QUARTER:
001CABr 1  7F 00 00 00          .byte   $7F,$00,$00,$00
001CAFr 1               POLY_SIN:
001CAFr 1  04 86 1E D7          .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
001CB3r 1  FB 87 99 26  
001CB7r 1  65 87 23 34          .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
001CBBr 1  58 86 A5 5D  
001CBFr 1  E1 83 49 0F          .byte   $E1,$83,$49,$0F,$DB
001CC3r 1  DB           
001CC4r 1               
001CC4r 1               ; ----------------------------------------------------------------------------
001CC4r 1               ; "ATN" FUNCTION
001CC4r 1               ; ----------------------------------------------------------------------------
001CC4r 1               ATN:
001CC4r 1  A5 B0                lda     FACSIGN
001CC6r 1  48                   pha
001CC7r 1  10 03                bpl     L3FDB
001CC9r 1  20 rr rr             jsr     NEGOP
001CCCr 1               L3FDB:
001CCCr 1  A5 AC                lda     FAC
001CCEr 1  48                   pha
001CCFr 1  C9 81                cmp     #$81
001CD1r 1  90 07                bcc     L3FE9
001CD3r 1  A9 rr                lda     #<CON_ONE
001CD5r 1  A0 rr                ldy     #>CON_ONE
001CD7r 1  20 rr rr             jsr     FDIV
001CDAr 1               ; ----------------------------------------------------------------------------
001CDAr 1               ; 0 <= X <= 1
001CDAr 1               ; 0 <= ATN(X) <= PI/8
001CDAr 1               ; ----------------------------------------------------------------------------
001CDAr 1               L3FE9:
001CDAr 1  A9 rr                lda     #<POLY_ATN
001CDCr 1  A0 rr                ldy     #>POLY_ATN
001CDEr 1  20 rr rr             jsr     POLYNOMIAL_ODD
001CE1r 1  68                   pla
001CE2r 1  C9 81                cmp     #$81
001CE4r 1  90 07                bcc     L3FFC
001CE6r 1  A9 rr                lda     #<CON_PI_HALF
001CE8r 1  A0 rr                ldy     #>CON_PI_HALF
001CEAr 1  20 rr rr             jsr     FSUB
001CEDr 1               L3FFC:
001CEDr 1  68                   pla
001CEEr 1  10 03                bpl     L4002
001CF0r 1  4C rr rr             jmp     NEGOP
001CF3r 1               L4002:
001CF3r 1  60                   rts
001CF4r 1               ; ----------------------------------------------------------------------------
001CF4r 1               POLY_ATN:
001CF4r 1  08                   .byte   $08
001CF5r 1  78 3A C5 37  		.byte	$78,$3A,$C5,$37
001CF9r 1  7B 83 A2 5C  		.byte	$7B,$83,$A2,$5C
001CFDr 1  7C 2E DD 4D  		.byte	$7C,$2E,$DD,$4D
001D01r 1  7D 99 B0 1E  		.byte	$7D,$99,$B0,$1E
001D05r 1  7D 59 ED 24  		.byte	$7D,$59,$ED,$24
001D09r 1  7E 91 72 00  		.byte	$7E,$91,$72,$00
001D0Dr 1  7E 4C B9 73  		.byte	$7E,$4C,$B9,$73
001D11r 1  7F AA AA 53  		.byte	$7F,$AA,$AA,$53
001D15r 1  81 00 00 00  		.byte	$81,$00,$00,$00
001D19r 1               GENERIC_CHRGET:
001D19r 1  E6 C3                inc     TXTPTR
001D1Br 1  D0 02                bne     GENERIC_CHRGOT
001D1Dr 1  E6 C4                inc     TXTPTR+1
001D1Fr 1               GENERIC_CHRGOT:
001D1Fr 1               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
001D1Fr 1  AD 60 EA             lda     $EA60
001D22r 1  C9 3A                cmp     #$3A
001D24r 1  B0 0A                bcs     L4058
001D26r 1               GENERIC_CHRGOT2:
001D26r 1  C9 20                cmp     #$20
001D28r 1  F0 EF                beq     GENERIC_CHRGET
001D2Ar 1  38                   sec
001D2Br 1  E9 30                sbc     #$30
001D2Dr 1  38                   sec
001D2Er 1  E9 D0                sbc     #$D0
001D30r 1               L4058:
001D30r 1  60                   rts
001D31r 1               GENERIC_RNDSEED:
001D31r 1               ; random number seed
001D31r 1  80 4F C7 52          .byte   $80,$4F,$C7,$52
001D35r 1               GENERIC_CHRGET_END:
001D35r 1               ; ----------------------------------------------------------------------------
001D35r 1               PR_WRITTEN_BY:
001D35r 1  A9 rr                lda     #<QT_WRITTEN_BY
001D37r 1  A0 rr                ldy     #>QT_WRITTEN_BY
001D39r 1  20 rr rr             jsr     STROUT
001D3Cr 1               COLD_START:
001D3Cr 1  A2 FF                ldx     #$FF
001D3Er 1  86 88                stx     CURLIN+1
001D40r 1  9A                   txs
001D41r 1  A9 rr                lda     #<COLD_START
001D43r 1  A0 rr                ldy     #>COLD_START
001D45r 1  85 01                sta     GORESTART+1
001D47r 1  84 02                sty     GORESTART+2
001D49r 1  85 04                sta     GOSTROUT+1
001D4Br 1  84 05                sty     GOSTROUT+2
001D4Dr 1  A9 rr                lda     #<AYINT
001D4Fr 1  A0 rr                ldy     #>AYINT
001D51r 1  85 06                sta     GOAYINT
001D53r 1  84 07                sty     GOAYINT+1
001D55r 1  A9 rr                lda     #<GIVAYF
001D57r 1  A0 rr                ldy     #>GIVAYF
001D59r 1  85 08                sta     GOGIVEAYF
001D5Br 1  84 09                sty     GOGIVEAYF+1
001D5Dr 1  A9 4C                lda     #$4C
001D5Fr 1  85 00                sta     GORESTART
001D61r 1  85 03                sta     GOSTROUT
001D63r 1  85 A1                sta     JMPADRS
001D65r 1  85 0A                sta     USR
001D67r 1  A9 rr                lda     #<IQERR
001D69r 1  A0 rr                ldy     #>IQERR
001D6Br 1  85 0B                sta     USR+1
001D6Dr 1  84 0C                sty     USR+2
001D6Fr 1  A9 48                lda     #WIDTH
001D71r 1  85 0F                sta     Z17
001D73r 1  A9 38                lda     #WIDTH2
001D75r 1  85 10                sta     Z18
001D77r 1  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
001D79r 1               L4098:
001D79r 1  BD rr rr             lda     GENERIC_CHRGET-1,x
001D7Cr 1  95 BB                sta     CHRGET-1,x
001D7Er 1  CA                   dex
001D7Fr 1  D0 F8                bne     L4098
001D81r 1  8A                   txa
001D82r 1  85 B2                sta     SHIFTSIGNEXT
001D84r 1  85 67                sta     LASTPT+1
001D86r 1  85 0D                sta     Z15
001D88r 1  85 0E                sta     POSX
001D8Ar 1  48                   pha
001D8Br 1  85 64                sta     Z14
001D8Dr 1  A9 03                lda     #$03
001D8Fr 1  85 A0                sta     DSCLEN
001D91r 1  A9 2C                lda     #$2C
001D93r 1  85 12                sta     LINNUM+1
001D95r 1  20 rr rr             jsr     CRDO
001D98r 1  A2 68                ldx     #TEMPST
001D9Ar 1  86 65                stx     TEMPPT
001D9Cr 1  A9 rr                lda     #<QT_MEMORY_SIZE
001D9Er 1  A0 rr                ldy     #>QT_MEMORY_SIZE
001DA0r 1  20 rr rr             jsr     STROUT
001DA3r 1  20 rr rr             jsr     NXIN
001DA6r 1  86 C3                stx     TXTPTR
001DA8r 1  84 C4                sty     TXTPTR+1
001DAAr 1  20 BC 00             jsr     CHRGET
001DADr 1  C9 41                cmp     #$41
001DAFr 1  F0 84                beq     PR_WRITTEN_BY
001DB1r 1  A8                   tay
001DB2r 1  D0 21                bne     L40EE
001DB4r 1  A9 00                lda     #<RAMSTART2
001DB6r 1  A0 02                ldy     #>RAMSTART2
001DB8r 1  85 11                sta     LINNUM
001DBAr 1  84 12                sty     LINNUM+1
001DBCr 1  A0 00                ldy     #$00
001DBEr 1               L40D7:
001DBEr 1  E6 11                inc     LINNUM
001DC0r 1  D0 02                bne     L40DD
001DC2r 1  E6 12                inc     LINNUM+1
001DC4r 1               L40DD:
001DC4r 1  A9 92                lda     #$92 ; 10010010 / 00100100
001DC6r 1  91 11                sta     (LINNUM),y
001DC8r 1  D1 11                cmp     (LINNUM),y
001DCAr 1  D0 15                bne     L40FA
001DCCr 1  0A                   asl     a
001DCDr 1  91 11                sta     (LINNUM),y
001DCFr 1  D1 11                cmp     (LINNUM),y
001DD1r 1  F0 EB                beq     L40D7; old: faster
001DD3r 1  D0 0C                bne     L40FA
001DD5r 1               L40EE:
001DD5r 1  20 C2 00             jsr     CHRGOT
001DD8r 1  20 rr rr             jsr     LINGET
001DDBr 1  A8                   tay
001DDCr 1  F0 03                beq     L40FA
001DDEr 1  4C rr rr             jmp     SYNERR
001DE1r 1               L40FA:
001DE1r 1  A5 11                lda     LINNUM
001DE3r 1  A4 12                ldy     LINNUM+1
001DE5r 1  85 85                sta     MEMSIZ
001DE7r 1  84 86                sty     MEMSIZ+1
001DE9r 1  85 81                sta     FRETOP
001DEBr 1  84 82                sty     FRETOP+1
001DEDr 1               L4106:
001DEDr 1  A9 rr                lda     #<QT_TERMINAL_WIDTH
001DEFr 1  A0 rr                ldy     #>QT_TERMINAL_WIDTH
001DF1r 1  20 rr rr             jsr     STROUT
001DF4r 1  20 rr rr             jsr     NXIN
001DF7r 1  86 C3                stx     TXTPTR
001DF9r 1  84 C4                sty     TXTPTR+1
001DFBr 1  20 BC 00             jsr     CHRGET
001DFEr 1  A8                   tay
001DFFr 1  F0 1C                beq     L4136
001E01r 1  20 rr rr             jsr     LINGET
001E04r 1  A5 12                lda     LINNUM+1
001E06r 1  D0 E5                bne     L4106
001E08r 1  A5 11                lda     LINNUM
001E0Ar 1  C9 10                cmp     #$10
001E0Cr 1  90 DF                bcc     L4106
001E0Er 1  85 0F                sta     Z17
001E10r 1               L4129:
001E10r 1  E9 0E                sbc     #$0E
001E12r 1  B0 FC                bcs     L4129
001E14r 1  49 FF                eor     #$FF
001E16r 1  E9 0C                sbc     #$0C
001E18r 1  18                   clc
001E19r 1  65 0F                adc     Z17
001E1Br 1  85 10                sta     Z18
001E1Dr 1               L4136:
001E1Dr 1  A2 00                ldx     #<RAMSTART2
001E1Fr 1  A0 02                ldy     #>RAMSTART2
001E21r 1  86 79                stx     TXTTAB
001E23r 1  84 7A                sty     TXTTAB+1
001E25r 1  A0 00                ldy     #$00
001E27r 1  98                   tya
001E28r 1  91 79                sta     (TXTTAB),y
001E2Ar 1  E6 79                inc     TXTTAB
001E2Cr 1  D0 02                bne     L4192
001E2Er 1  E6 7A                inc     TXTTAB+1
001E30r 1               L4192:
001E30r 1  A5 79                lda     TXTTAB
001E32r 1  A4 7A                ldy     TXTTAB+1
001E34r 1  20 rr rr             jsr     REASON
001E37r 1  20 rr rr             jsr     CRDO
001E3Ar 1  A5 85                lda     MEMSIZ
001E3Cr 1  38                   sec
001E3Dr 1  E5 79                sbc     TXTTAB
001E3Fr 1  AA                   tax
001E40r 1  A5 86                lda     MEMSIZ+1
001E42r 1  E5 7A                sbc     TXTTAB+1
001E44r 1  20 rr rr             jsr     LINPRT
001E47r 1  A9 rr                lda     #<QT_BYTES_FREE
001E49r 1  A0 rr                ldy     #>QT_BYTES_FREE
001E4Br 1  20 rr rr             jsr     STROUT
001E4Er 1  A9 rr                lda     #<STROUT
001E50r 1  A0 rr                ldy     #>STROUT
001E52r 1  85 04                sta     GOSTROUT+1
001E54r 1  84 05                sty     GOSTROUT+2
001E56r 1  20 rr rr             jsr     SCRTCH
001E59r 1  A9 rr                lda     #<RESTART
001E5Br 1  A0 rr                ldy     #>RESTART
001E5Dr 1  85 01                sta     GORESTART+1
001E5Fr 1  84 02                sty     GORESTART+2
001E61r 1  6C 01 00             jmp     (GORESTART+1)
001E64r 1               ; OSI is compiled for ROM, but includes
001E64r 1               ; this unused string
001E64r 1  57 41 4E 54          .byte   "WANT SIN-COS-TAN-ATN"
001E68r 1  20 53 49 4E  
001E6Cr 1  2D 43 4F 53  
001E78r 1  00                   .byte   0
001E79r 1               QT_WRITTEN_BY:
001E79r 1  0D 0A 0C             .byte   CR,LF,$0C ; FORM FEED
001E7Cr 1  57 52 49 54          .byte   "WRITTEN BY RICHARD W. WEILAND."
001E80r 1  54 45 4E 20  
001E84r 1  42 59 20 52  
001E9Ar 1  0D 0A 00             .byte   CR,LF,0
001E9Dr 1               QT_MEMORY_SIZE:
001E9Dr 1  4D 45 4D 4F          .byte   "MEMORY SIZE"
001EA1r 1  52 59 20 53  
001EA5r 1  49 5A 45     
001EA8r 1  00                   .byte   0
001EA9r 1               QT_TERMINAL_WIDTH:
001EA9r 1  54 45 52 4D          .byte   "TERMINAL WIDTH"
001EADr 1  49 4E 41 4C  
001EB1r 1  20 57 49 44  
001EB7r 1  00                   .byte   0
001EB8r 1               QT_BYTES_FREE:
001EB8r 1  20 42 59 54          .byte   " BYTES FREE"
001EBCr 1  45 53 20 46  
001EC0r 1  52 45 45     
001EC3r 1  0D 0A 0D 0A          .byte   CR,LF,CR,LF
001EC7r 1  4F 53 49 20          .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
001ECBr 1  36 35 30 32  
001ECFr 1  20 42 41 53  
001EE9r 1  0D 0A                .byte   CR,LF
001EEBr 1  43 4F 50 59          .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
001EEFr 1  52 49 47 48  
001EF3r 1  54 20 31 39  
001F0Ar 1  0D 0A 00             .byte   CR,LF,0
001F0Dr 1               
001F0Dr 1               ; STARTUP AND SERIAL I/O ROUTINES ===========================================================
001F0Dr 1               ; BY G. SEARLE 2013 =========================================================================
001F0Dr 1               ;ACIA        = $A000
001F0Dr 1               ;ACIA_CTRL   = ACIA+3
001F0Dr 1               ;ACIA_CMD    = ACIA+2
001F0Dr 1               ;ACIA_SR     = ACIA+1
001F0Dr 1               ;ACIA_DAT    = ACIA
001F0Dr 1               
001F0Dr 1               ;.segment "IOHANDLER"
001F0Dr 1               ;.org $FF00
001F0Dr 1               Reset:
001F0Dr 1  A9 00            LDA	#$00
001F0Fr 1  8D 01 A0     	STA	ACIA_SR		; Soft reset
001F12r 1  A9 1E        	LDA #$1E        ;* Init ACIA to 19200 Baud.
001F14r 1  8D 03 A0          STA ACIA_CTRL
001F17r 1  A9 0B             LDA #$0B        ;* No Parity.
001F19r 1  8D 02 A0          STA ACIA_CMD
001F1Cr 1               
001F1Cr 1               ; Display startup message
001F1Cr 1  A0 00        	LDY #0
001F1Er 1               ShowStartMsg:
001F1Er 1  B9 rr rr     	LDA	StartupMessage,Y
001F21r 1  F0 06        	BEQ	WaitForKeypress
001F23r 1  20 rr rr     	JSR	MONCOUT
001F26r 1  C8           	INY
001F27r 1  D0 F5        	BNE	ShowStartMsg
001F29r 1               
001F29r 1               ; Wait for a cold/warm start selection
001F29r 1               WaitForKeypress:
001F29r 1  20 rr rr     	JSR	MONRDKEY
001F2Cr 1  90 FB        	BCC	WaitForKeypress
001F2Er 1               
001F2Er 1  29 DF        	AND	#$DF			; Make upper case
001F30r 1  C9 57        	CMP	#'W'			; compare with [W]arm start
001F32r 1  F0 08        	BEQ	WarmStart
001F34r 1               
001F34r 1  C9 43        	CMP	#'C'			; compare with [C]old start
001F36r 1  D0 D5        	BNE	Reset
001F38r 1  18               clc ;STACHE ADDED
001F39r 1  4C rr rr     	JMP	COLD_START	; BASIC cold start
001F3Cr 1               
001F3Cr 1               WarmStart:
001F3Cr 1  4C rr rr     	JMP	RESTART		; BASIC warm start
001F3Fr 1               
001F3Fr 1               MONCOUT:
001F3Fr 1  48               PHA             ;*Save A
001F40r 1                           ;AND #$7F        ;*Change to "standard ASCII"
001F40r 1               
001F40r 1               WAIT_TXD:
001F40r 1  AD 01 A0                 LDA ACIA_SR     ;*Load status register for ACIA
001F43r 1  29 10                    AND #$10        ;*Mask bit 4.
001F45r 1  F0 F9                    BEQ    WAIT_TXD    ;*ACIA not done yet, wait.
001F47r 1  68                       PLA             ;*Restore A
001F48r 1  8D 00 A0                STA ACIA_DAT    ;*Send it.
001F4Br 1  60                       RTS              ;*Done, over and out...
001F4Cr 1               
001F4Cr 1               
001F4Cr 1               MONRDKEY:
001F4Cr 1  AD 01 A0                 LDA ACIA_SR
001F4Fr 1  29 08                    AND #$08
001F51r 1  F0 05                    BEQ NoDataIn
001F53r 1  AD 00 A0                 LDA ACIA_DAT
001F56r 1  38                       SEC
001F57r 1  60                       RTS
001F58r 1               NoDataIn:
001F58r 1  18                       CLC
001F59r 1  60                       RTS
001F5Ar 1               
001F5Ar 1               MONISCNTC:
001F5Ar 1  20 rr rr     	JSR	MONRDKEY
001F5Dr 1  90 06        	BCC	NotCTRLC ; If no key pressed then exit
001F5Fr 1  C9 03        	CMP	#3
001F61r 1  D0 02        	BNE	NotCTRLC ; if CTRL-C not pressed then exit
001F63r 1  38           	SEC		; Carry set if control C pressed
001F64r 1  60           	RTS
001F65r 1               NotCTRLC:
001F65r 1  18           	CLC		; Carry clear if control C not pressed
001F66r 1  60           	RTS
001F67r 1               
001F67r 1               StartupMessage:
001F67r 1  0C 43 6F 6C  	.byte	$0C,"Cold [C] or warm [W] start?",$0D,$0A,$00
001F6Br 1  64 20 5B 43  
001F6Fr 1  5D 20 6F 72  
001F86r 1               
001F86r 1               LOAD:
001F86r 1  60           	RTS
001F87r 1               
001F87r 1               SAVE:
001F87r 1  60           	RTS
001F88r 1               
001F88r 1               ;.segment "VECTS"
001F88r 1               ;.org $FFFA
001F88r 1               ;	.word	Reset		; NMI
001F88r 1               ;	.word	Reset		; RESET
001F88r 1               ;	.word	Reset		; IRQ
001F88r 1               
001F88r 1               
