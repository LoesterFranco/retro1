ca65 V2.15 - Git f7cdfbf
Main file   : debug.s
Current file: debug.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.15 - Git f7cdfbf
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.15 - Git f7cdfbf"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.import		_sprintf
000000r 1               	.export		_debug_keys
000000r 1               	.export		_debug_key_matrix
000000r 1               	.import		_keys_update
000000r 1               	.import		_keys_getc
000000r 1               	.import		_keys_get_code
000000r 1               	.import		_keys_get_modifiers
000000r 1               	.import		_keys_read_row
000000r 1               	.import		_lcd_putc
000000r 1               	.import		_lcd_puts
000000r 1               	.import		_lcd_goto
000000r 1               	.import		_led_set
000000r 1               	.importzp	_millis
000000r 1               	.export		_outbuf
000000r 1               	.export		_led
000000r 1               	.export		_next_blink_millis
000000r 1               	.export		_debug_blink
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _led:
000000r 1  00           	.byte	$00
000001r 1               _next_blink_millis:
000001r 1  00 00 00 00  	.dword	$00000000
000005r 1               
000005r 1               .segment	"RODATA"
000000r 1               
000000r 1               L0011:
000000r 1  25 30 33 64  	.byte	$25,$30,$33,$64,$20,$25,$30,$32,$78,$20,$25,$63,$00
000004r 1  20 25 30 32  
000008r 1  78 20 25 63  
00000Dr 1               
00000Dr 1               .segment	"BSS"
000000r 1               
000000r 1               _outbuf:
000000r 1  00 00 00 00  	.res	41,$00
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
000029r 1               
000029r 1               ; ---------------------------------------------------------------
000029r 1               ; void __near__ debug_keys (void)
000029r 1               ; ---------------------------------------------------------------
000029r 1               
000029r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_debug_keys: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     L000D:	jsr     _keys_update
000003r 1  A9 rr        	lda     #<(_outbuf)
000005r 1  A2 rr        	ldx     #>(_outbuf)
000007r 1  20 rr rr     	jsr     pushax
00000Ar 1  A9 rr        	lda     #<(L0011)
00000Cr 1  A2 rr        	ldx     #>(L0011)
00000Er 1  20 rr rr     	jsr     pushax
000011r 1  20 rr rr     	jsr     _keys_get_code
000014r 1  20 rr rr     	jsr     pusha0
000017r 1  20 rr rr     	jsr     _keys_get_modifiers
00001Ar 1  20 rr rr     	jsr     pusha0
00001Dr 1  20 rr rr     	jsr     _keys_getc
000020r 1  20 rr rr     	jsr     pushax
000023r 1  A0 0A        	ldy     #$0A
000025r 1  20 rr rr     	jsr     _sprintf
000028r 1  A9 00        	lda     #$00
00002Ar 1  20 rr rr     	jsr     pusha
00002Dr 1  20 rr rr     	jsr     _lcd_goto
000030r 1  A9 rr        	lda     #<(_outbuf)
000032r 1  A2 rr        	ldx     #>(_outbuf)
000034r 1  20 rr rr     	jsr     _lcd_puts
000037r 1  4C rr rr     	jmp     L000D
00003Ar 1               
00003Ar 1               .endproc
00003Ar 1               
00003Ar 1               ; ---------------------------------------------------------------
00003Ar 1               ; void __near__ debug_key_matrix (void)
00003Ar 1               ; ---------------------------------------------------------------
00003Ar 1               
00003Ar 1               .segment	"CODE"
00003Ar 1               
00003Ar 1               .proc	_debug_key_matrix: near
00003Ar 1               
00003Ar 1               .segment	"CODE"
00003Ar 1               
00003Ar 1  20 rr rr     	jsr     decsp2
00003Dr 1  A9 00        L0069:	lda     #$00
00003Fr 1  A0 01        	ldy     #$01
000041r 1  91 rr        L0068:	sta     (sp),y
000043r 1  C9 0E        	cmp     #$0E
000045r 1  B0 F6        	bcs     L0069
000047r 1  A2 00        	ldx     #$00
000049r 1  B1 rr        	lda     (sp),y
00004Br 1  4A           	lsr     a
00004Cr 1  4A           	lsr     a
00004Dr 1  20 rr rr     	jsr     mulax10
000050r 1  20 rr rr     	jsr     pusha
000053r 1  A0 02        	ldy     #$02
000055r 1  B1 rr        	lda     (sp),y
000057r 1  29 03        	and     #$03
000059r 1  20 rr rr     	jsr     _lcd_goto
00005Cr 1  A0 01        	ldy     #$01
00005Er 1  B1 rr        	lda     (sp),y
000060r 1  20 rr rr     	jsr     _keys_read_row
000063r 1  A0 00        	ldy     #$00
000065r 1  91 rr        	sta     (sp),y
000067r 1  29 80        	and     #$80
000069r 1  F0 05        	beq     L006A
00006Br 1  A9 31        	lda     #$31
00006Dr 1  4C rr rr     	jmp     L006B
000070r 1  A9 30        L006A:	lda     #$30
000072r 1  20 rr rr     L006B:	jsr     _lcd_putc
000075r 1  A0 00        	ldy     #$00
000077r 1  B1 rr        	lda     (sp),y
000079r 1  29 40        	and     #$40
00007Br 1  F0 05        	beq     L006C
00007Dr 1  A9 31        	lda     #$31
00007Fr 1  4C rr rr     	jmp     L006D
000082r 1  A9 30        L006C:	lda     #$30
000084r 1  20 rr rr     L006D:	jsr     _lcd_putc
000087r 1  A0 00        	ldy     #$00
000089r 1  B1 rr        	lda     (sp),y
00008Br 1  29 20        	and     #$20
00008Dr 1  F0 05        	beq     L006E
00008Fr 1  A9 31        	lda     #$31
000091r 1  4C rr rr     	jmp     L006F
000094r 1  A9 30        L006E:	lda     #$30
000096r 1  20 rr rr     L006F:	jsr     _lcd_putc
000099r 1  A0 00        	ldy     #$00
00009Br 1  B1 rr        	lda     (sp),y
00009Dr 1  29 10        	and     #$10
00009Fr 1  F0 05        	beq     L0070
0000A1r 1  A9 31        	lda     #$31
0000A3r 1  4C rr rr     	jmp     L0071
0000A6r 1  A9 30        L0070:	lda     #$30
0000A8r 1  20 rr rr     L0071:	jsr     _lcd_putc
0000ABr 1  A0 00        	ldy     #$00
0000ADr 1  B1 rr        	lda     (sp),y
0000AFr 1  29 08        	and     #$08
0000B1r 1  F0 05        	beq     L0072
0000B3r 1  A9 31        	lda     #$31
0000B5r 1  4C rr rr     	jmp     L0073
0000B8r 1  A9 30        L0072:	lda     #$30
0000BAr 1  20 rr rr     L0073:	jsr     _lcd_putc
0000BDr 1  A0 00        	ldy     #$00
0000BFr 1  B1 rr        	lda     (sp),y
0000C1r 1  29 04        	and     #$04
0000C3r 1  F0 05        	beq     L0074
0000C5r 1  A9 31        	lda     #$31
0000C7r 1  4C rr rr     	jmp     L0075
0000CAr 1  A9 30        L0074:	lda     #$30
0000CCr 1  20 rr rr     L0075:	jsr     _lcd_putc
0000CFr 1  A0 00        	ldy     #$00
0000D1r 1  B1 rr        	lda     (sp),y
0000D3r 1  29 02        	and     #$02
0000D5r 1  F0 05        	beq     L0076
0000D7r 1  A9 31        	lda     #$31
0000D9r 1  4C rr rr     	jmp     L0077
0000DCr 1  A9 30        L0076:	lda     #$30
0000DEr 1  20 rr rr     L0077:	jsr     _lcd_putc
0000E1r 1  A0 00        	ldy     #$00
0000E3r 1  B1 rr        	lda     (sp),y
0000E5r 1  29 01        	and     #$01
0000E7r 1  F0 05        	beq     L0078
0000E9r 1  A9 31        	lda     #$31
0000EBr 1  4C rr rr     	jmp     L0079
0000EEr 1  A9 30        L0078:	lda     #$30
0000F0r 1  20 rr rr     L0079:	jsr     _lcd_putc
0000F3r 1  A0 01        	ldy     #$01
0000F5r 1  18           	clc
0000F6r 1  98           	tya
0000F7r 1  71 rr        	adc     (sp),y
0000F9r 1  4C rr rr     	jmp     L0068
0000FCr 1               
0000FCr 1               .endproc
0000FCr 1               
0000FCr 1               ; ---------------------------------------------------------------
0000FCr 1               ; void __near__ debug_blink (void)
0000FCr 1               ; ---------------------------------------------------------------
0000FCr 1               
0000FCr 1               .segment	"CODE"
0000FCr 1               
0000FCr 1               .proc	_debug_blink: near
0000FCr 1               
0000FCr 1               .segment	"CODE"
0000FCr 1               
0000FCr 1  A5 rr        	lda     _millis+3
0000FEr 1  85 rr        	sta     sreg+1
000100r 1  A5 rr        	lda     _millis+2
000102r 1  85 rr        	sta     sreg
000104r 1  A6 rr        	ldx     _millis+1
000106r 1  A5 rr        	lda     _millis
000108r 1  20 rr rr     	jsr     pusheax
00010Br 1  AD rr rr     	lda     _next_blink_millis+3
00010Er 1  85 rr        	sta     sreg+1
000110r 1  AD rr rr     	lda     _next_blink_millis+2
000113r 1  85 rr        	sta     sreg
000115r 1  AE rr rr     	ldx     _next_blink_millis+1
000118r 1  AD rr rr     	lda     _next_blink_millis
00011Br 1  20 rr rr     	jsr     tosugteax
00011Er 1  F0 37        	beq     L0060
000120r 1  A5 rr        	lda     _millis+3
000122r 1  85 rr        	sta     sreg+1
000124r 1  A5 rr        	lda     _millis+2
000126r 1  85 rr        	sta     sreg
000128r 1  A6 rr        	ldx     _millis+1
00012Ar 1  A5 rr        	lda     _millis
00012Cr 1  20 rr rr     	jsr     pusheax
00012Fr 1  A2 01        	ldx     #$01
000131r 1  A9 00        	lda     #$00
000133r 1  A9 F4        	lda     #$F4
000135r 1  20 rr rr     	jsr     tosadd0ax
000138r 1  8D rr rr     	sta     _next_blink_millis
00013Br 1  8E rr rr     	stx     _next_blink_millis+1
00013Er 1  A4 rr        	ldy     sreg
000140r 1  8C rr rr     	sty     _next_blink_millis+2
000143r 1  A4 rr        	ldy     sreg+1
000145r 1  8C rr rr     	sty     _next_blink_millis+3
000148r 1  AD rr rr     	lda     _led
00014Br 1  20 rr rr     	jsr     _led_set
00014Er 1  AD rr rr     	lda     _led
000151r 1  20 rr rr     	jsr     bnega
000154r 1  8D rr rr     	sta     _led
000157r 1  60           L0060:	rts
000158r 1               
000158r 1               .endproc
000158r 1               
000158r 1               
