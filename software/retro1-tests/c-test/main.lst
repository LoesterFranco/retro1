ca65 V2.15 - Git f7cdfbf
Main file   : main.s
Current file: main.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.15 - Git f7cdfbf
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.15 - Git f7cdfbf"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_sprintf
000000r 1               	.import		__heapmemavail
000000r 1               	.import		_acia_init
000000r 1               	.import		_acia_puts
000000r 1               	.import		_led_init
000000r 1               	.import		_print_buffer
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               L0005:
000000r 1  36 35 30 32  	.byte	$36,$35,$30,$32,$20,$48,$6F,$6D,$65,$43,$6F,$6D,$70,$75,$74,$65
000004r 1  20 48 6F 6D  
000008r 1  65 43 6F 6D  
000010r 1  72 20 72 65  	.byte	$72,$20,$72,$65,$61,$64,$79,$2E,$0A,$00
000014r 1  61 64 79 2E  
000018r 1  0A 00        
00001Ar 1               L0009:
00001Ar 1  25 75 20 62  	.byte	$25,$75,$20,$62,$79,$74,$65,$73,$20,$66,$72,$65,$65,$2E,$0A,$00
00001Er 1  79 74 65 73  
000022r 1  20 66 72 65  
00002Ar 1               L000F:
00002Ar 1  52 65 61 64  	.byte	$52,$65,$61,$64,$79,$2E,$0A,$00
00002Er 1  79 2E 0A 00  
000032r 1               
000032r 1               ; ---------------------------------------------------------------
000032r 1               ; int __near__ main (void)
000032r 1               ; ---------------------------------------------------------------
000032r 1               
000032r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     _acia_init
000003r 1  20 rr rr     	jsr     _led_init
000006r 1  A9 rr        	lda     #<(L0005)
000008r 1  A2 rr        	ldx     #>(L0005)
00000Ar 1  20 rr rr     	jsr     _acia_puts
00000Dr 1  A9 rr        	lda     #<(_print_buffer)
00000Fr 1  A2 rr        	ldx     #>(_print_buffer)
000011r 1  20 rr rr     	jsr     pushax
000014r 1  A9 rr        	lda     #<(L0009)
000016r 1  A2 rr        	ldx     #>(L0009)
000018r 1  20 rr rr     	jsr     pushax
00001Br 1  20 rr rr     	jsr     __heapmemavail
00001Er 1  20 rr rr     	jsr     pushax
000021r 1  A0 06        	ldy     #$06
000023r 1  20 rr rr     	jsr     _sprintf
000026r 1  A9 rr        	lda     #<(_print_buffer)
000028r 1  A2 rr        	ldx     #>(_print_buffer)
00002Ar 1  20 rr rr     	jsr     _acia_puts
00002Dr 1  A9 rr        	lda     #<(L000F)
00002Fr 1  A2 rr        	ldx     #>(L000F)
000031r 1  20 rr rr     	jsr     _acia_puts
000034r 1  A2 00        	ldx     #$00
000036r 1  8A           	txa
000037r 1  60           	rts
000038r 1               
000038r 1               .endproc
000038r 1               
000038r 1               
