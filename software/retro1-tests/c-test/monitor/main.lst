ca65 V2.15 - Git f7cdfbf
Main file   : main.s
Current file: main.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.15 - Git f7cdfbf
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.15 - Git f7cdfbf"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_led_init
000000r 1               	.import		_led_set
000000r 1               	.import		_acia_init
000000r 1               	.import		_acia_puts
000000r 1               	.import		_acia_gets
000000r 1               	.export		_print_buffer
000000r 1               	.export		_ison
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               L000A:
000000r 1  36 35 30 32  	.byte	$36,$35,$30,$32,$20,$48,$6F,$6D,$65,$43,$6F,$6D,$70,$75,$74,$65
000004r 1  20 48 6F 6D  
000008r 1  65 43 6F 6D  
000010r 1  72 20 72 65  	.byte	$72,$20,$72,$65,$61,$64,$79,$2E,$0D,$0A,$00
000014r 1  61 64 79 2E  
000018r 1  0D 0A 00     
00001Br 1               L0011:
00001Br 1  54 79 70 65  	.byte	$54,$79,$70,$65,$20,$73,$6F,$6D,$65,$74,$68,$69,$6E,$67,$2E,$0D
00001Fr 1  20 73 6F 6D  
000023r 1  65 74 68 69  
00002Br 1  0A 00        	.byte	$0A,$00
00002Dr 1               L0017:
00002Dr 1  59 6F 75 20  	.byte	$59,$6F,$75,$20,$74,$79,$70,$65,$64,$3A,$20,$00
000031r 1  74 79 70 65  
000035r 1  64 3A 20 00  
000039r 1               L001C	:=	L000A+24
000039r 1               
000039r 1               .segment	"BSS"
000000r 1               
000000r 1               _print_buffer:
000000r 1  00 00 00 00  	.res	80,$00
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
000050r 1               _ison:
000050r 1  00 00        	.res	2,$00
000052r 1               
000052r 1               ; ---------------------------------------------------------------
000052r 1               ; int __near__ main (void)
000052r 1               ; ---------------------------------------------------------------
000052r 1               
000052r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  A0 00        	ldy     #$00
000002r 1  20 rr rr     	jsr     _led_init
000005r 1  20 rr rr     	jsr     _acia_init
000008r 1  A9 00        	lda     #$00
00000Ar 1  8D rr rr     	sta     _ison
00000Dr 1  8D rr rr     	sta     _ison+1
000010r 1  8D rr rr     	sta     _print_buffer
000013r 1  A9 rr        	lda     #<(L000A)
000015r 1  A2 rr        	ldx     #>(L000A)
000017r 1  20 rr rr     	jsr     _acia_puts
00001Ar 1  A9 rr        L000F:	lda     #<(L0011)
00001Cr 1  A2 rr        	ldx     #>(L0011)
00001Er 1  20 rr rr     	jsr     _acia_puts
000021r 1  A9 rr        	lda     #<(_print_buffer)
000023r 1  A2 rr        	ldx     #>(_print_buffer)
000025r 1  20 rr rr     	jsr     pushax
000028r 1  A9 FF        	lda     #$FF
00002Ar 1  20 rr rr     	jsr     _acia_gets
00002Dr 1  A9 rr        	lda     #<(L0017)
00002Fr 1  A2 rr        	ldx     #>(L0017)
000031r 1  20 rr rr     	jsr     _acia_puts
000034r 1  A9 rr        	lda     #<(_print_buffer)
000036r 1  A2 rr        	ldx     #>(_print_buffer)
000038r 1  20 rr rr     	jsr     _acia_puts
00003Br 1  A9 rr        	lda     #<(L001C)
00003Dr 1  A2 rr        	ldx     #>(L001C)
00003Fr 1  20 rr rr     	jsr     _acia_puts
000042r 1  AD rr rr     	lda     _ison
000045r 1  0D rr rr     	ora     _ison+1
000048r 1  D0 06        	bne     L001E
00004Ar 1  AA           	tax
00004Br 1  A9 01        	lda     #$01
00004Dr 1  4C rr rr     	jmp     L002A
000050r 1  A2 00        L001E:	ldx     #$00
000052r 1  8A           	txa
000053r 1  8D rr rr     L002A:	sta     _ison
000056r 1  8E rr rr     	stx     _ison+1
000059r 1  AD rr rr     	lda     _ison
00005Cr 1  20 rr rr     	jsr     _led_set
00005Fr 1  4C rr rr     	jmp     L000F
000062r 1               
000062r 1               .endproc
000062r 1               
000062r 1               
