ca65 V2.15 - Git f7cdfbf
Main file   : keys.s65
Current file: keys.s65

000000r 1                                 .setcpu "6502"
000000r 1                                 .include "macros.inc65"
000000r 2               ; Push X
000000r 2               .macro phx
000000r 2                 sta TMP_STACK
000000r 2                 txa
000000r 2                 pha
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Push Y
000000r 2               .macro phy
000000r 2                 sta TMP_STACK
000000r 2                 tya
000000r 2                 pha
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Push X and Y
000000r 2               .macro phxy
000000r 2                 sta TMP_STACK
000000r 2                 txa
000000r 2                 pha
000000r 2                 tya
000000r 2                 pha
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Push A and X
000000r 2               .macro phax
000000r 2                 sta TMP_STACK
000000r 2                 pha
000000r 2                 txa
000000r 2                 pha
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Push A and Y
000000r 2               .macro phay
000000r 2                 sta TMP_STACK
000000r 2                 pha
000000r 2                 tya
000000r 2                 pha
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Push A, X and Y
000000r 2               .macro phaxy
000000r 2                 sta TMP_STACK
000000r 2                 pha
000000r 2                 txa
000000r 2                 pha
000000r 2                 tya
000000r 2                 pha
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Pull X
000000r 2               .macro plx
000000r 2                 sta TMP_STACK
000000r 2                 pla
000000r 2                 tax
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Pull Y
000000r 2               .macro ply
000000r 2                 sta TMP_STACK
000000r 2                 pla
000000r 2                 tay
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Pull X and Y
000000r 2               .macro plxy
000000r 2                 sta TMP_STACK
000000r 2                 pla
000000r 2                 tay
000000r 2                 pla
000000r 2                 tax
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Pull A and X
000000r 2               .macro plax
000000r 2                 pla
000000r 2                 tax
000000r 2                 pla
000000r 2               .endmacro
000000r 2               
000000r 2               ; Pull A and Y
000000r 2               .macro play
000000r 2                 pla
000000r 2                 tay
000000r 2                 pla
000000r 2               .endmacro
000000r 2               
000000r 2               ; Pull A, X and Y
000000r 2               .macro plaxy
000000r 2                 pla
000000r 2                 tay
000000r 2                 pla
000000r 2                 tax
000000r 2                 pla
000000r 2               .endmacro
000000r 2               
000000r 2               ; Load zero page register reg/reg+1 with the 16-bit value, destroys A
000000r 2               .macro ld16 reg, value
000000r 2                 lda #<(value)
000000r 2                 sta reg
000000r 2                 lda #>(value)
000000r 2                 sta reg + 1
000000r 2               .endmacro
000000r 2               
000000r 1                                 .include "zeropage.inc65"
000000r 2               .importzp RES
000000r 2               .importzp R0
000000r 2               .importzp R1
000000r 2               .importzp TMP0
000000r 2               .importzp TMP1
000000r 2               .importzp TMP_STACK
000000r 2               
000000r 1                                 .include "io.inc65"
000000r 2               ; CPU frequency
000000r 2               
000000r 2               F_CPU = 1000000
000000r 2               
000000r 2               ; ACIA registers
000000r 2               
000000r 2               ACIA_BASE    = $7f00
000000r 2               ACIA_DATA    = ACIA_BASE
000000r 2               ACIA_STATUS  = ACIA_BASE + 1
000000r 2               ACIA_COMMAND = ACIA_BASE + 2
000000r 2               ACIA_CONTROL = ACIA_BASE + 3
000000r 2               
000000r 2               ; ACIA control register bit values
000000r 2               
000000r 2               ACIA_STOP_BITS_1 = %00000000
000000r 2               ACIA_STOP_BITS_2 = %10000000
000000r 2               ACIA_DATA_BITS_8 = %00000000
000000r 2               ACIA_DATA_BITS_7 = %00100000
000000r 2               ACIA_DATA_BITS_6 = %01000000
000000r 2               ACIA_DATA_BITS_5 = %01100000
000000r 2               ACIA_CLOCK_EXT   = %00000000
000000r 2               ACIA_CLOCK_INT   = %00010000
000000r 2               ACIA_BAUD_16XEXT = %00000000
000000r 2               ACIA_BAUD_50     = %00000001
000000r 2               ACIA_BAUD_75     = %00000010
000000r 2               ACIA_BAUD_109    = %00000011
000000r 2               ACIA_BAUD_134    = %00000100
000000r 2               ACIA_BAUD_150    = %00000101
000000r 2               ACIA_BAUD_300    = %00000110
000000r 2               ACIA_BAUD_600    = %00000111
000000r 2               ACIA_BAUD_1200   = %00001000
000000r 2               ACIA_BAUD_1800   = %00001001
000000r 2               ACIA_BAUD_2400   = %00001010
000000r 2               ACIA_BAUD_3600   = %00001011
000000r 2               ACIA_BAUD_4800   = %00001100
000000r 2               ACIA_BAUD_7200   = %00001101
000000r 2               ACIA_BAUD_9600   = %00001110
000000r 2               ACIA_BAUD_19200  = %00001111
000000r 2               
000000r 2               ; ACIA command register bit values
000000r 2               
000000r 2               ACIA_PARITY_ODD              = %00000000
000000r 2               ACIA_PARITY_EVEN             = %01000000
000000r 2               ACIA_PARITY_MARK             = %10000000
000000r 2               ACIA_PARITY_SPACE            = %11000000
000000r 2               ACIA_PARITY_DISABLE          = %00000000
000000r 2               ACIA_PARITY_ENABLE           = %00100000
000000r 2               ACIA_ECHO_DISABLE            = %00000000
000000r 2               ACIA_ECHO_ENABLE             = %00010000
000000r 2               ACIA_TX_INT_DISABLE_RTS_HIGH = %00000000
000000r 2               ACIA_TX_INT_ENABLE_RTS_LOW   = %00000100
000000r 2               ACIA_TX_INT_DISABLE_RTS_LOW  = %00001000
000000r 2               ACIA_TX_INT_DISABLE_BREAK    = %00001100
000000r 2               ACIA_RX_INT_ENABLE           = %00000000
000000r 2               ACIA_RX_INT_DISABLE          = %00000010
000000r 2               ACIA_DTR_HIGH                = %00000000
000000r 2               ACIA_DTR_LOW                 = %00000001
000000r 2               
000000r 2               ; ACIA status register bit masks
000000r 2               
000000r 2               ACIA_STATUS_IRQ        = 1 << 7
000000r 2               ACIA_STATUS_DSR        = 1 << 6
000000r 2               ACIA_STATUS_DCD        = 1 << 5
000000r 2               ACIA_STATUS_TX_EMPTY   = 1 << 4
000000r 2               ACIA_STATUS_RX_FULL    = 1 << 3
000000r 2               ACIA_STATUS_OVERRUN    = 1 << 2
000000r 2               ACIA_STATUS_FRAME_ERR  = 1 << 1
000000r 2               ACIA_STATUS_PARITY_ERR = 1 << 0
000000r 2               
000000r 2               ; VIA registers
000000r 2               
000000r 2               VIA1_BASE   = $7f20
000000r 2               VIA1_ORB    = VIA1_BASE
000000r 2               VIA1_IRB    = VIA1_BASE
000000r 2               VIA1_ORA    = VIA1_BASE + 1
000000r 2               VIA1_IRA    = VIA1_BASE + 1
000000r 2               VIA1_DDRB   = VIA1_BASE + 2
000000r 2               VIA1_DDRA   = VIA1_BASE + 3
000000r 2               VIA1_T1C_L  = VIA1_BASE + 4
000000r 2               VIA1_T1C_H  = VIA1_BASE + 5
000000r 2               VIA1_T1L_L  = VIA1_BASE + 6
000000r 2               VIA1_T1L_H  = VIA1_BASE + 7
000000r 2               VIA1_T2C_L  = VIA1_BASE + 8
000000r 2               VIA1_T2C_H  = VIA1_BASE + 9
000000r 2               VIA1_SR     = VIA1_BASE + 10
000000r 2               VIA1_ACR    = VIA1_BASE + 11
000000r 2               VIA1_PCR    = VIA1_BASE + 12
000000r 2               VIA1_IFR    = VIA1_BASE + 13
000000r 2               VIA1_IER    = VIA1_BASE + 14
000000r 2               VIA1_ORA_NH = VIA1_BASE + 15
000000r 2               VIA1_IRA_NH = VIA1_BASE + 15
000000r 2               
000000r 2               VIA2_BASE   = $7f40
000000r 2               VIA2_ORB    = VIA2_BASE
000000r 2               VIA2_IRB    = VIA2_BASE
000000r 2               VIA2_ORA    = VIA2_BASE + 1
000000r 2               VIA2_IRA    = VIA2_BASE + 1
000000r 2               VIA2_DDRB   = VIA2_BASE + 2
000000r 2               VIA2_DDRA   = VIA2_BASE + 3
000000r 2               VIA2_T1C_L  = VIA2_BASE + 4
000000r 2               VIA2_T1C_H  = VIA2_BASE + 5
000000r 2               VIA2_T1L_L  = VIA2_BASE + 6
000000r 2               VIA2_T1L_H  = VIA2_BASE + 7
000000r 2               VIA2_T2C_L  = VIA2_BASE + 8
000000r 2               VIA2_T2C_H  = VIA2_BASE + 9
000000r 2               VIA2_SR     = VIA2_BASE + 10
000000r 2               VIA2_ACR    = VIA2_BASE + 11
000000r 2               VIA2_PCR    = VIA2_BASE + 12
000000r 2               VIA2_IFR    = VIA2_BASE + 13
000000r 2               VIA2_IER    = VIA2_BASE + 14
000000r 2               VIA2_ORA_NH = VIA2_BASE + 15
000000r 2               VIA2_IRA_NH = VIA2_BASE + 15
000000r 2               
000000r 2               ; Port bits
000000r 2               
000000r 2               VIA_PA0 = (1 << 0)
000000r 2               VIA_PA1 = (1 << 1)
000000r 2               VIA_PA2 = (1 << 2)
000000r 2               VIA_PA3 = (1 << 3)
000000r 2               VIA_PA4 = (1 << 4)
000000r 2               VIA_PA5 = (1 << 5)
000000r 2               VIA_PA6 = (1 << 6)
000000r 2               VIA_PA7 = (1 << 7)
000000r 2               
000000r 2               ; Port bits
000000r 2               
000000r 2               VIA_PB0 = 1 << 0
000000r 2               VIA_PB1 = 1 << 1
000000r 2               VIA_PB2 = 1 << 2
000000r 2               VIA_PB3 = 1 << 3
000000r 2               VIA_PB4 = 1 << 4
000000r 2               VIA_PB5 = 1 << 5
000000r 2               VIA_PB6 = 1 << 6
000000r 2               VIA_PB7 = 1 << 7
000000r 2               
000000r 2               ; SID registers
000000r 2               
000000r 2               SID_BASE = $7f60
000000r 2               SID_VOICE1_FREQ_L = SID_BASE
000000r 2               SID_VOICE1_FREQ_H = SID_BASE + 1
000000r 2               SID_VOICE1_PW_L   = SID_BASE + 2
000000r 2               SID_VOICE1_PW_H   = SID_BASE + 3
000000r 2               SID_VOICE1_CTRL   = SID_BASE + 4
000000r 2               SID_VOICE1_AD     = SID_BASE + 5
000000r 2               SID_VOICE1_SR     = SID_BASE + 6
000000r 2               SID_VOICE2_FREQ_L = SID_BASE + 7
000000r 2               SID_VOICE2_FREQ_H = SID_BASE + 8
000000r 2               SID_VOICE2_PW_L   = SID_BASE + 9
000000r 2               SID_VOICE2_PW_H   = SID_BASE + 10
000000r 2               SID_VOICE2_CTRL   = SID_BASE + 11
000000r 2               SID_VOICE2_AD     = SID_BASE + 12
000000r 2               SID_VOICE2_SR     = SID_BASE + 13
000000r 2               SID_VOICE3_FREQ_L = SID_BASE + 14
000000r 2               SID_VOICE3_FREQ_H = SID_BASE + 15
000000r 2               SID_VOICE3_PW_L   = SID_BASE + 16
000000r 2               SID_VOICE3_PW_H   = SID_BASE + 17
000000r 2               SID_VOICE3_CTRL   = SID_BASE + 18
000000r 2               SID_VOICE3_AD     = SID_BASE + 19
000000r 2               SID_VOICE3_SR     = SID_BASE + 20
000000r 2               SID_FC_L          = SID_BASE + 21
000000r 2               SID_FC_H          = SID_BASE + 22
000000r 2               SID_RES_FILT      = SID_BASE + 23
000000r 2               SID_MODE_VOLUME   = SID_BASE + 24
000000r 2               SID_POTX          = SID_BASE + 25
000000r 2               SID_POTY          = SID_BASE + 26
000000r 2               SID_OSC3        = SID_BASE + 27
000000r 2               SID_ENV3          = SID_BASE + 28
000000r 2               
000000r 2               ; LED
000000r 2               
000000r 2               LED_DDR = VIA1_DDRA
000000r 2               LED_OUT = VIA1_ORA
000000r 2               LED     = VIA_PA7
000000r 2               
000000r 1                                 .include "tools.inc65"
000000r 2               .import delay_ms
000000r 2               
000000r 1               
000000r 1                                 .export keys_init
000000r 1                                 .export keys_update
000000r 1                                 .export keys_getchar
000000r 1               
000000r 1                                 .exportzp KEYS_CODE
000000r 1                                 .exportzp KEYS_MODIFIERS
000000r 1               
000000r 1                                 .zeropage
000000r 1               
000000r 1  00           KEYS_CODE:        .byte 0
000001r 1  00           KEYS_MODIFIERS:   .byte 0
000002r 1               
000002r 1                                 .code
000000r 1               
000000r 1               ; Initialize the keyboard
000000r 1  48           keys_init:        pha
000001r 1                                 ; Use PA[0..7] of VIA2 for column input
000001r 1  A9 00                          lda #$00
000003r 1  8D 43 7F                       sta VIA2_DDRA
000006r 1                                 ; Use PB[0..7] of VIA2 for row output
000006r 1  A9 FF                          lda #$ff
000008r 1  8D 42 7F                       sta VIA2_DDRB
00000Br 1                                 ; Use PB[0..5] of VIA1 for row output
00000Br 1  AD 22 7F                       lda VIA1_DDRB
00000Er 1  09 3F                          ora #$3f
000010r 1  8D 22 7F                       sta VIA1_DDRB
000013r 1                                 ; Set all rows high
000013r 1  A9 FF                          lda #$ff
000015r 1  8D 40 7F                       sta VIA2_ORB
000018r 1  AD 20 7F                       lda VIA1_ORB
00001Br 1  09 3F                          ora #$3f
00001Dr 1  8D 20 7F                       sta VIA1_ORB
000020r 1  68                             pla
000021r 1  60                             rts
000022r 1               
000022r 1               ; Update the keyboard status
000022r 1               ; Call this function periodically from a main program loop or a timer tick interrupt
000022r 1               ; The current scan code is stored in KEYS_CODE ($FF if no key is pressed)
000022r 1               ; The current modifiers are stored in KEYS_MODIFIERS ($00 if no modifier is pressed)
000022r 1  85 rr 48 8A  keys_update:      phaxy
000026r 1  48 98 48 A5  
00002Ar 1  rr           
00002Br 1  20 rr rr                       jsr scan
00002Er 1  C9 FF                          cmp #$ff
000030r 1  D0 08                          bne @debounce
000032r 1  85 rr                          sta KEYS_CODE
000034r 1  68 A8 68 AA                    plaxy
000038r 1  68           
000039r 1  60                             rts
00003Ar 1  85 rr        @debounce:        sta KEYS_CODE
00003Cr 1  A2 14                          ldx #20
00003Er 1  20 rr rr                       jsr delay_ms
000041r 1  20 rr rr                       jsr scan
000044r 1  C5 rr                          cmp KEYS_CODE
000046r 1  F0 0A                          beq @key_pressed
000048r 1  A9 FF                          lda #$ff
00004Ar 1  85 rr                          sta KEYS_CODE
00004Cr 1  68 A8 68 AA                    plaxy
000050r 1  68           
000051r 1  60                             rts
000052r 1  68 A8 68 AA  @key_pressed:     plaxy
000056r 1  68           
000057r 1  60                             rts
000058r 1               
000058r 1               ; Get the character of the currently pressed key or 0 if none is pressed
000058r 1               ; @out A the ascii code of the pressed key (with modifiers) or 0
000058r 1  A5 rr        keys_getchar:     lda KEYS_CODE
00005Ar 1  C9 FF                          cmp #$ff
00005Cr 1  D0 03                          bne @key_pressed
00005Er 1  A9 00                          lda #0
000060r 1  60                             rts
000061r 1  85 rr 8A 48  @key_pressed:     phx
000065r 1  A5 rr        
000067r 1  AA                             tax
000068r 1  BD rr rr                       lda code_to_ascii,x
00006Br 1  85 rr 68 AA                    plx
00006Fr 1  A5 rr        
000071r 1  60                             rts
000072r 1               
000072r 1               ; Scan the keyboard for a pressed key
000072r 1               ; @out A The scan code or $ff if no key is currently pressed
000072r 1               ; @mod X, Y, TMP0
000072r 1  A2 0D        scan:             ldx #13
000074r 1  20 rr rr     @next_row:        jsr read_row
000077r 1  D0 06                          bne @row_pressed
000079r 1  CA                             dex
00007Ar 1  10 F8                          bpl @next_row
00007Cr 1  A9 FF                          lda #$ff
00007Er 1  60                             rts
00007Fr 1  A0 07        @row_pressed:     ldy #7
000081r 1  0A           @next_column:     asl
000082r 1  B0 03                          bcs @column_found
000084r 1  88                             dey
000085r 1  10 FA                          bpl @next_column
000087r 1  98           @column_found:    tya
000088r 1  CA           @add_row_offset:  dex
000089r 1  30 05                          bmi @got_scan_code
00008Br 1  18                             clc
00008Cr 1  69 08                          adc #8
00008Er 1  D0 F8                          bne @add_row_offset
000090r 1  60           @got_scan_code:   rts
000091r 1               
000091r 1               ; Read the row that is specified by X
000091r 1               ; @in  X The row to read
000091r 1               ; @out A The column value
000091r 1               ; @mod Y, TMP0
000091r 1               read_row:         ; Set row X low
000091r 1  BD rr rr                       lda row_out_reg_lo,x
000094r 1  85 rr                          sta TMP0
000096r 1  BD rr rr                       lda row_out_reg_hi,x
000099r 1  85 rr                          sta TMP0 + 1
00009Br 1  BD rr rr                       lda row_bit_mask,x
00009Er 1  A0 00                          ldy #0
0000A0r 1  31 rr                          and (TMP0),y
0000A2r 1  91 rr                          sta (TMP0),y
0000A4r 1                                 ; Read column values
0000A4r 1  AD 41 7F                       lda VIA2_IRA
0000A7r 1  49 FF                          eor #$ff
0000A9r 1  A8                             tay
0000AAr 1                                 ; Set all rows high
0000AAr 1  A9 FF                          lda #$ff
0000ACr 1  8D 40 7F                       sta VIA2_ORB
0000AFr 1  AD 20 7F                       lda VIA1_ORB
0000B2r 1  09 3F                          ora #$3f
0000B4r 1  8D 20 7F                       sta VIA1_ORB
0000B7r 1  98                             tya
0000B8r 1  60                             rts
0000B9r 1               
0000B9r 1               ; Table of output register addresses for each row
0000B9r 1  40 40 40 40  row_out_reg_lo:   .byte <VIA2_ORB, <VIA2_ORB, <VIA2_ORB, <VIA2_ORB, <VIA2_ORB, <VIA2_ORB, <VIA2_ORB, <VIA2_ORB
0000BDr 1  40 40 40 40  
0000C1r 1  20 20 20 20                    .byte <VIA1_ORB, <VIA1_ORB, <VIA1_ORB, <VIA1_ORB, <VIA1_ORB, <VIA1_ORB
0000C5r 1  20 20        
0000C7r 1  7F 7F 7F 7F  row_out_reg_hi:   .byte >VIA2_ORB, >VIA2_ORB, >VIA2_ORB, >VIA2_ORB, >VIA2_ORB, >VIA2_ORB, >VIA2_ORB, >VIA2_ORB
0000CBr 1  7F 7F 7F 7F  
0000CFr 1  7F 7F 7F 7F                    .byte >VIA1_ORB, >VIA1_ORB, >VIA1_ORB, >VIA1_ORB, >VIA1_ORB, >VIA1_ORB
0000D3r 1  7F 7F        
0000D5r 1               ; Table of output register bit masks for each row (with a 0 bit for the selected row)
0000D5r 1  FE FD FB F7  row_bit_mask:     .byte <~VIA_PB0, <~VIA_PB1, <~VIA_PB2, <~VIA_PB3, <~VIA_PB4, <~VIA_PB5, <~VIA_PB6, <~VIA_PB7
0000D9r 1  EF DF BF 7F  
0000DDr 1  FE FD FB F7                    .byte <~VIA_PB0, <~VIA_PB1, <~VIA_PB2, <~VIA_PB3, <~VIA_PB4, <~VIA_PB5
0000E1r 1  EF DF        
0000E3r 1               
0000E3r 1  31 61 5E 71  code_to_ascii:    .byte '1', 'a', '^', 'q', 0, $1b, 'y', 0
0000E7r 1  00 1B 79 00  
0000EBr 1  33 64 00 65                    .byte '3', 'd', 0, 'e', 0, 0, 'c', 0
0000EFr 1  00 00 63 00  
0000F3r 1  34 66 35 72                    .byte '4', 'f', '5', 'r', 'b', 'g', 'v', 't'
0000F7r 1  62 67 76 74  
0000FBr 1  37 6A 36 75                    .byte '7', 'j', '6', 'u', 'n', 'h', 'm', 'z'
0000FFr 1  6E 68 6D 7A  
000103r 1  38 6B 00 69                    .byte '8', 'k', 0, 'i', 0, 0, ',', '+'
000107r 1  00 00 2C 2B  
00010Br 1  30 2E 00 70                    .byte '0', '.', 0, 'p', '-', '.', '#', 0
00010Fr 1  2D 2E 23 00  
000113r 1  00 00 00 00                    .byte 0, 0, 0, 0, 0, 0, 0, 0
000117r 1  00 00 00 00  
00011Br 1  00 00 00 00                    .byte 0, 0, 0, 0, 0, 0, 0, 0
00011Fr 1  00 00 00 00  
000123r 1  00 73 00 77                    .byte 0, 's', 0, 'w', '<', 0, 'x', 0
000127r 1  3C 00 78 00  
00012Br 1  00 00 00 00                    .byte 0, 0, 0, 0, ' ', 0, $0a, 0
00012Fr 1  20 00 0A 00  
000133r 1  00 6C 00 6F                    .byte 0, 'l', 0, 'o', 0, 0, '.', 0
000137r 1  00 00 2E 00  
00013Br 1  00 00 00 00                    .byte 0, 0, 0, 0, 0, 0, 0, 0
00013Fr 1  00 00 00 00  
000143r 1  00 32 00 39                    .byte 0, '2', 0, '9', 0, 0, 0, 0
000147r 1  00 00 00 00  
00014Br 1  00 00 00 00                    .byte 0, 0, 0, 0, 0, 0, 0, 0
00014Fr 1  00 00 00 00  
000152r 1               
