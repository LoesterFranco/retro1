ca65 V2.15 - Git f7cdfbf
Main file   : rtc.s65
Current file: rtc.s65

000000r 1                               .setcpu "6502"
000000r 1                               .include "zeropage.inc65"
000000r 2               .importzp RES
000000r 2               .importzp R0
000000r 2               .importzp R1
000000r 2               .importzp TMP0
000000r 2               .importzp TMP1
000000r 2               .importzp TMP_STACK
000000r 2               
000000r 1                               .include "io.inc65"
000000r 2               ; CPU frequency
000000r 2               
000000r 2               F_CPU = 1000000
000000r 2               
000000r 2               ; ACIA registers
000000r 2               
000000r 2               ACIA_BASE    = $8200
000000r 2               ACIA_DATA    = ACIA_BASE
000000r 2               ACIA_STATUS  = ACIA_BASE + 1
000000r 2               ACIA_COMMAND = ACIA_BASE + 2
000000r 2               ACIA_CONTROL = ACIA_BASE + 3
000000r 2               
000000r 2               ; ACIA control register bit values
000000r 2               
000000r 2               ACIA_STOP_BITS_1 = %00000000
000000r 2               ACIA_STOP_BITS_2 = %10000000
000000r 2               ACIA_DATA_BITS_8 = %00000000
000000r 2               ACIA_DATA_BITS_7 = %00100000
000000r 2               ACIA_DATA_BITS_6 = %01000000
000000r 2               ACIA_DATA_BITS_5 = %01100000
000000r 2               ACIA_CLOCK_EXT   = %00000000
000000r 2               ACIA_CLOCK_INT   = %00010000
000000r 2               ACIA_BAUD_16XEXT = %00000000
000000r 2               ACIA_BAUD_50     = %00000001
000000r 2               ACIA_BAUD_75     = %00000010
000000r 2               ACIA_BAUD_109    = %00000011
000000r 2               ACIA_BAUD_134    = %00000100
000000r 2               ACIA_BAUD_150    = %00000101
000000r 2               ACIA_BAUD_300    = %00000110
000000r 2               ACIA_BAUD_600    = %00000111
000000r 2               ACIA_BAUD_1200   = %00001000
000000r 2               ACIA_BAUD_1800   = %00001001
000000r 2               ACIA_BAUD_2400   = %00001010
000000r 2               ACIA_BAUD_3600   = %00001011
000000r 2               ACIA_BAUD_4800   = %00001100
000000r 2               ACIA_BAUD_7200   = %00001101
000000r 2               ACIA_BAUD_9600   = %00001110
000000r 2               ACIA_BAUD_19200  = %00001111
000000r 2               
000000r 2               ; ACIA command register bit values
000000r 2               
000000r 2               ACIA_PARITY_ODD              = %00000000
000000r 2               ACIA_PARITY_EVEN             = %01000000
000000r 2               ACIA_PARITY_MARK             = %10000000
000000r 2               ACIA_PARITY_SPACE            = %11000000
000000r 2               ACIA_PARITY_DISABLE          = %00000000
000000r 2               ACIA_PARITY_ENABLE           = %00100000
000000r 2               ACIA_ECHO_DISABLE            = %00000000
000000r 2               ACIA_ECHO_ENABLE             = %00010000
000000r 2               ACIA_TX_INT_DISABLE_RTS_HIGH = %00000000
000000r 2               ACIA_TX_INT_ENABLE_RTS_LOW   = %00000100
000000r 2               ACIA_TX_INT_DISABLE_RTS_LOW  = %00001000
000000r 2               ACIA_TX_INT_DISABLE_BREAK    = %00001100
000000r 2               ACIA_RX_INT_ENABLE           = %00000000
000000r 2               ACIA_RX_INT_DISABLE          = %00000010
000000r 2               ACIA_DTR_HIGH                = %00000000
000000r 2               ACIA_DTR_LOW                 = %00000001
000000r 2               
000000r 2               ; ACIA status register bit masks
000000r 2               
000000r 2               ACIA_STATUS_IRQ        = 1 << 7
000000r 2               ACIA_STATUS_DSR        = 1 << 6
000000r 2               ACIA_STATUS_DCD        = 1 << 5
000000r 2               ACIA_STATUS_TX_EMPTY   = 1 << 4
000000r 2               ACIA_STATUS_RX_FULL    = 1 << 3
000000r 2               ACIA_STATUS_OVERRUN    = 1 << 2
000000r 2               ACIA_STATUS_FRAME_ERR  = 1 << 1
000000r 2               ACIA_STATUS_PARITY_ERR = 1 << 0
000000r 2               
000000r 2               ; VIA registers
000000r 2               
000000r 2               VIA1_BASE   = $8000
000000r 2               VIA1_ORB    = VIA1_BASE
000000r 2               VIA1_IRB    = VIA1_BASE
000000r 2               VIA1_ORA    = VIA1_BASE + 1
000000r 2               VIA1_IRA    = VIA1_BASE + 1
000000r 2               VIA1_DDRB   = VIA1_BASE + 2
000000r 2               VIA1_DDRA   = VIA1_BASE + 3
000000r 2               VIA1_T1C_L  = VIA1_BASE + 4
000000r 2               VIA1_T1C_H  = VIA1_BASE + 5
000000r 2               VIA1_T1L_L  = VIA1_BASE + 6
000000r 2               VIA1_T1L_H  = VIA1_BASE + 7
000000r 2               VIA1_T2C_L  = VIA1_BASE + 8
000000r 2               VIA1_T2C_H  = VIA1_BASE + 9
000000r 2               VIA1_SR     = VIA1_BASE + 10
000000r 2               VIA1_ACR    = VIA1_BASE + 11
000000r 2               VIA1_PCR    = VIA1_BASE + 12
000000r 2               VIA1_IFR    = VIA1_BASE + 13
000000r 2               VIA1_IER    = VIA1_BASE + 14
000000r 2               VIA1_ORA_NH = VIA1_BASE + 15
000000r 2               VIA1_IRA_NH = VIA1_BASE + 15
000000r 2               
000000r 2               VIA2_BASE   = $8100
000000r 2               VIA2_ORB    = VIA2_BASE
000000r 2               VIA2_IRB    = VIA2_BASE
000000r 2               VIA2_ORA    = VIA2_BASE + 1
000000r 2               VIA2_IRA    = VIA2_BASE + 1
000000r 2               VIA2_DDRB   = VIA2_BASE + 2
000000r 2               VIA2_DDRA   = VIA2_BASE + 3
000000r 2               VIA2_T1C_L  = VIA2_BASE + 4
000000r 2               VIA2_T1C_H  = VIA2_BASE + 5
000000r 2               VIA2_T1L_L  = VIA2_BASE + 6
000000r 2               VIA2_T1L_H  = VIA2_BASE + 7
000000r 2               VIA2_T2C_L  = VIA2_BASE + 8
000000r 2               VIA2_T2C_H  = VIA2_BASE + 9
000000r 2               VIA2_SR     = VIA2_BASE + 10
000000r 2               VIA2_ACR    = VIA2_BASE + 11
000000r 2               VIA2_PCR    = VIA2_BASE + 12
000000r 2               VIA2_IFR    = VIA2_BASE + 13
000000r 2               VIA2_IER    = VIA2_BASE + 14
000000r 2               VIA2_ORA_NH = VIA2_BASE + 15
000000r 2               VIA2_IRA_NH = VIA2_BASE + 15
000000r 2               
000000r 2               ; Port bits
000000r 2               
000000r 2               VIA_PA0 = (1 << 0)
000000r 2               VIA_PA1 = (1 << 1)
000000r 2               VIA_PA2 = (1 << 2)
000000r 2               VIA_PA3 = (1 << 3)
000000r 2               VIA_PA4 = (1 << 4)
000000r 2               VIA_PA5 = (1 << 5)
000000r 2               VIA_PA6 = (1 << 6)
000000r 2               VIA_PA7 = (1 << 7)
000000r 2               
000000r 2               ; Port bits
000000r 2               
000000r 2               VIA_PB0 = 1 << 0
000000r 2               VIA_PB1 = 1 << 1
000000r 2               VIA_PB2 = 1 << 2
000000r 2               VIA_PB3 = 1 << 3
000000r 2               VIA_PB4 = 1 << 4
000000r 2               VIA_PB5 = 1 << 5
000000r 2               VIA_PB6 = 1 << 6
000000r 2               VIA_PB7 = 1 << 7
000000r 2               
000000r 2               ; SID registers
000000r 2               
000000r 2               SID_BASE = $8300
000000r 2               SID_VOICE1_FREQ_L = SID_BASE
000000r 2               SID_VOICE1_FREQ_H = SID_BASE + 1
000000r 2               SID_VOICE1_PW_L   = SID_BASE + 2
000000r 2               SID_VOICE1_PW_H   = SID_BASE + 3
000000r 2               SID_VOICE1_CTRL   = SID_BASE + 4
000000r 2               SID_VOICE1_AD     = SID_BASE + 5
000000r 2               SID_VOICE1_SR     = SID_BASE + 6
000000r 2               SID_VOICE2_FREQ_L = SID_BASE + 7
000000r 2               SID_VOICE2_FREQ_H = SID_BASE + 8
000000r 2               SID_VOICE2_PW_L   = SID_BASE + 9
000000r 2               SID_VOICE2_PW_H   = SID_BASE + 10
000000r 2               SID_VOICE2_CTRL   = SID_BASE + 11
000000r 2               SID_VOICE2_AD     = SID_BASE + 12
000000r 2               SID_VOICE2_SR     = SID_BASE + 13
000000r 2               SID_VOICE3_FREQ_L = SID_BASE + 14
000000r 2               SID_VOICE3_FREQ_H = SID_BASE + 15
000000r 2               SID_VOICE3_PW_L   = SID_BASE + 16
000000r 2               SID_VOICE3_PW_H   = SID_BASE + 17
000000r 2               SID_VOICE3_CTRL   = SID_BASE + 18
000000r 2               SID_VOICE3_AD     = SID_BASE + 19
000000r 2               SID_VOICE3_SR     = SID_BASE + 20
000000r 2               SID_FC_L          = SID_BASE + 21
000000r 2               SID_FC_H          = SID_BASE + 22
000000r 2               SID_RES_FILT      = SID_BASE + 23
000000r 2               SID_MODE_VOLUME   = SID_BASE + 24
000000r 2               SID_POTX          = SID_BASE + 25
000000r 2               SID_POTY          = SID_BASE + 26
000000r 2               SID_OSC3        = SID_BASE + 27
000000r 2               SID_ENV3          = SID_BASE + 28
000000r 2               
000000r 2               ; LED
000000r 2               
000000r 2               LED_DDR = VIA1_DDRA
000000r 2               LED_OUT = VIA1_ORA
000000r 2               LED     = VIA_PA7
000000r 2               
000000r 2               
000000r 2               ;RTC
000000r 2               
000000r 2               RTC_BASE = $8400
000000r 2               RTC_AS   = RTC_BASE + 1
000000r 2               ;RTC_DS   = RTC_BASE + 2
000000r 2               
000000r 1                               .include "macros.inc65"
000000r 2               ; Push X
000000r 2               .macro phx
000000r 2                 sta TMP_STACK
000000r 2                 txa
000000r 2                 pha
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Push Y
000000r 2               .macro phy
000000r 2                 sta TMP_STACK
000000r 2                 tya
000000r 2                 pha
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Push X and Y
000000r 2               .macro phxy
000000r 2                 sta TMP_STACK
000000r 2                 txa
000000r 2                 pha
000000r 2                 tya
000000r 2                 pha
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Push A and X
000000r 2               .macro phax
000000r 2                 sta TMP_STACK
000000r 2                 pha
000000r 2                 txa
000000r 2                 pha
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Push A and Y
000000r 2               .macro phay
000000r 2                 sta TMP_STACK
000000r 2                 pha
000000r 2                 tya
000000r 2                 pha
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Push A, X and Y
000000r 2               .macro phaxy
000000r 2                 sta TMP_STACK
000000r 2                 pha
000000r 2                 txa
000000r 2                 pha
000000r 2                 tya
000000r 2                 pha
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Pull X
000000r 2               .macro plx
000000r 2                 sta TMP_STACK
000000r 2                 pla
000000r 2                 tax
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Pull Y
000000r 2               .macro ply
000000r 2                 sta TMP_STACK
000000r 2                 pla
000000r 2                 tay
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Pull X and Y
000000r 2               .macro plxy
000000r 2                 sta TMP_STACK
000000r 2                 pla
000000r 2                 tay
000000r 2                 pla
000000r 2                 tax
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Pull A and X
000000r 2               .macro plax
000000r 2                 pla
000000r 2                 tax
000000r 2                 pla
000000r 2               .endmacro
000000r 2               
000000r 2               ; Pull A and Y
000000r 2               .macro play
000000r 2                 pla
000000r 2                 tay
000000r 2                 pla
000000r 2               .endmacro
000000r 2               
000000r 2               ; Pull A, X and Y
000000r 2               .macro plaxy
000000r 2                 pla
000000r 2                 tay
000000r 2                 pla
000000r 2                 tax
000000r 2                 pla
000000r 2               .endmacro
000000r 2               
000000r 2               ; Load zero page register reg/reg+1 with the 16-bit value, destroys A
000000r 2               .macro ld16 reg, value
000000r 2                 lda #<(value)
000000r 2                 sta reg
000000r 2                 lda #>(value)
000000r 2                 sta reg + 1
000000r 2               .endmacro
000000r 2               
000000r 1                               .include "acia.inc65"
000000r 2               .import acia_init
000000r 2               .import acia_getc
000000r 2               .import acia_gets
000000r 2               .import acia_gets_buffer
000000r 2               .import acia_putc
000000r 2               .import acia_puts
000000r 2               .import acia_put_newline
000000r 2               
000000r 1               
000000r 1                               .export rtc_init
000000r 1                               .export rtc_test
000000r 1               
000000r 1                               .code
000000r 1               
000000r 1               ; Initialize the RTC
000000r 1               ;the RTC should only need this code run once for a new chip
000000r 1               rtc_init:       ;LDX #$0a    ; control register A. turn on oscillator.
000000r 1                               ;LDA #$20    ; %x010xxxx
000000r 1               
000000r 1  A2 0A                        LDX #$0a    ; control register A. turn on oscillator.
000002r 1  A9 23                        LDA #$23    ; %x010xxxx
000004r 1               
000004r 1  8E 00 84                     STX RTC_BASE
000007r 1  8D 01 84                     STA RTC_AS
00000Ar 1               
00000Ar 1  A2 0B                        LDX #$0B
00000Cr 1  A9 80                        LDA #$80 ;write 1 to UTI bit  to prevent t
00000Er 1               
00000Er 1  8E 00 84                     STX RTC_BASE
000011r 1  8D 01 84                     STA RTC_AS
000014r 1               
000014r 1  A2 0B                        LDX #$0B
000016r 1  A9 8C                        LDA #$8c ;write 1 to UTI bit  to prevent transfers between RTC bytes and user buffer. square wave enabled. Binary coded decimal. 12 hour time.
000018r 1               
000018r 1  8E 00 84                     STX RTC_BASE
00001Br 1  8D 01 84                     STA RTC_AS
00001Er 1               
00001Er 1  A2 00                        LDX #$00 ;seconds
000020r 1  A9 00                        LDA #$00
000022r 1               
000022r 1  8E 00 84                     STX RTC_BASE
000025r 1  8D 01 84                     STA RTC_AS
000028r 1               
000028r 1  A2 01                        LDX #$01 ;seconds alarm
00002Ar 1  A9 00                        LDA #$00
00002Cr 1               
00002Cr 1  8E 00 84                     STX RTC_BASE
00002Fr 1  8D 01 84                     STA RTC_AS
000032r 1               
000032r 1  A2 02                        LDX #$02 ;minutes
000034r 1  A9 10                        LDA #$10
000036r 1               
000036r 1  8E 00 84                     STX RTC_BASE
000039r 1  8D 01 84                     STA RTC_AS
00003Cr 1               
00003Cr 1  A2 03                        LDX #$03 ;minutes alarm
00003Er 1  A9 00                        LDA #$00
000040r 1               
000040r 1  8E 00 84                     STX RTC_BASE
000043r 1  8D 01 84                     STA RTC_AS
000046r 1               
000046r 1  A2 04                        LDX #$04 ;hour
000048r 1  A9 05                        LDA #$05
00004Ar 1               
00004Ar 1  8E 00 84                     STX RTC_BASE
00004Dr 1  8D 01 84                     STA RTC_AS
000050r 1               
000050r 1  A2 05                        LDX #$05 ;hour alarm
000052r 1  A9 01                        LDA #$01
000054r 1               
000054r 1  8E 00 84                     STX RTC_BASE
000057r 1  8D 01 84                     STA RTC_AS
00005Ar 1               
00005Ar 1  A2 06                        LDX #$06 ;day of week
00005Cr 1  A9 02                        LDA #$02 ;Monday
00005Er 1               
00005Er 1  8E 00 84                     STX RTC_BASE
000061r 1  8D 01 84                     STA RTC_AS
000064r 1               
000064r 1  A2 07                        LDX #$07 ;day of month
000066r 1  A9 21                        LDA #$21
000068r 1               
000068r 1  8E 00 84                     STX RTC_BASE
00006Br 1  8D 01 84                     STA RTC_AS
00006Er 1               
00006Er 1  A2 08                        LDX #$08 ;month
000070r 1  A9 03                        LDA #$03  ;march
000072r 1               
000072r 1  8E 00 84                     STX RTC_BASE
000075r 1  8D 01 84                     STA RTC_AS
000078r 1               
000078r 1  A2 09                        LDX #$09 ;year
00007Ar 1  A9 13                        LDA #$13  ;2016
00007Cr 1               
00007Cr 1  8E 00 84                     STX RTC_BASE
00007Fr 1  8D 01 84                     STA RTC_AS
000082r 1               
000082r 1                               ;now Clear the UTI bit to allow update transfers
000082r 1  A2 0B                        LDX #$0B
000084r 1  A9 0C                        LDA #$0c
000086r 1               
000086r 1  8E 00 84                     STX RTC_BASE
000089r 1  8D 01 84                     STA RTC_AS
00008Cr 1               
00008Cr 1  60                           RTS
00008Dr 1               
00008Dr 1               rtc_test:
00008Dr 1  A9 09                        LDA #$09 ; register 9 - year
00008Fr 1  8D 00 84                     STA RTC_BASE    ; address register
000092r 1  AD 01 84                     LDA RTC_AS    ; data register
000095r 1               
000095r 1  20 rr rr                     jsr acia_putc
000098r 1               
000098r 1  20 rr rr                     jsr print_month
00009Br 1               
00009Br 1  60                           rts
00009Cr 1               
00009Cr 1  A9 08        print_month:    LDA #$08 ; register 8 - month
00009Er 1  8D 00 84                     STA RTC_BASE    ; address register
0000A1r 1  AD 01 84                     LDA RTC_AS    ; data register
0000A4r 1               
0000A4r 1  C9 01                              cmp #01
0000A6r 1  D0 0C                              bne @not_january
0000A8r 1  A9 rr 85 rr                        ld16 R0, msg_january
0000ACr 1  A9 rr 85 rr  
0000B0r 1  20 rr rr                           jsr acia_puts
0000B3r 1  60                                 rts
0000B4r 1               
0000B4r 1               @not_january:
0000B4r 1               
0000B4r 1  C9 02                              cmp #02
0000B6r 1  D0 0C                              bne @not_february
0000B8r 1  A9 rr 85 rr                        ld16 R0, msg_february
0000BCr 1  A9 rr 85 rr  
0000C0r 1  20 rr rr                           jsr acia_puts
0000C3r 1  60                                 rts
0000C4r 1               @not_february:
0000C4r 1  C9 03                              cmp #03
0000C6r 1  D0 0C                              bne @not_march
0000C8r 1  A9 rr 85 rr                        ld16 R0, msg_march
0000CCr 1  A9 rr 85 rr  
0000D0r 1  20 rr rr                           jsr acia_puts
0000D3r 1  60                                 rts
0000D4r 1               
0000D4r 1  C9 04        @not_march:           cmp #04
0000D6r 1  D0 0C                              bne @not_april
0000D8r 1  A9 rr 85 rr                        ld16 R0, msg_april
0000DCr 1  A9 rr 85 rr  
0000E0r 1  20 rr rr                           jsr acia_puts
0000E3r 1  60                                 rts
0000E4r 1               
0000E4r 1  A9 rr 85 rr  @not_april:           ld16 R0, msg_unknown
0000E8r 1  A9 rr 85 rr  
0000ECr 1  20 rr rr                           jsr acia_puts
0000EFr 1  60                                   rts
0000F0r 1               
0000F0r 1  0D 0A 4A 61  msg_january:               .byte $0d, $0a, "January ", $00
0000F4r 1  6E 75 61 72  
0000F8r 1  79 20 00     
0000FBr 1               
0000FBr 1  0D 0A 46 65  msg_february:               .byte $0d, $0a, "February ", $00
0000FFr 1  62 72 75 61  
000103r 1  72 79 20 00  
000107r 1               
000107r 1  0D 0A 4D 61  msg_march:               .byte $0d, $0a, "March ", $00
00010Br 1  72 63 68 20  
00010Fr 1  00           
000110r 1               
000110r 1  0D 0A 41 70  msg_april:               .byte $0d, $0a, "April ", $00
000114r 1  72 69 6C 20  
000118r 1  00           
000119r 1               
000119r 1  0D 0A 55 6E  msg_unknown:               .byte $0d, $0a, "Unknown ", $00
00011Dr 1  6B 6E 6F 77  
000121r 1  6E 20 00     
000123r 1               
