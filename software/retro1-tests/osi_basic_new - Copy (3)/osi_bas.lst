ca65 V2.15 - Git a85ac88
Main file   : osi_bas.s
Current file: osi_bas.s

000000r 1               .include "acia.s65"
000000r 2               ACIA        = $A000
000000r 2               ACIA_CTRL   = ACIA+3
000000r 2               ACIA_CMD    = ACIA+2
000000r 2               ACIA_SR     = ACIA+1
000000r 2               ACIA_DAT    = ACIA
000000r 2               MSGL      = $2C ;register low byte for message
000000r 2               MSGH      = $2D ;register high byte for message
000000r 2               
000000r 2  A9 1F        ACIA_INIT:	LDA #$1F        ;* Init ACIA to 19200 Baud.
000002r 2  8D 03 A0                 STA ACIA_CTRL
000005r 2  A9 0B                    LDA #$0B        ;* No Parity.
000007r 2  8D 02 A0                 STA ACIA_CMD
00000Ar 2               
00000Ar 2  60                       RTS
00000Br 2               
00000Br 2               ACIA_WRITE:
00000Br 2  48                       PHA             ;*Save A
00000Cr 2  29 7F                    AND #$7F        ;*Change to "standard ASCII"
00000Er 2               ACIA_SEND:
00000Er 2  8D 00 A0                 STA ACIA_DAT    ;*Send it.
000011r 2               ACIA_WAIT_TXD:
000011r 2  AD 01 A0                 LDA ACIA_SR     ;*Load status register for ACIA
000014r 2  29 10                    AND #$10        ;*Mask bit 4.
000016r 2  F0 F9                    BEQ    ACIA_WAIT_TXD    ;*ACIA not done yet, wait.
000018r 2  68                       PLA             ;*Restore A
000019r 2               
000019r 2  60                       RTS              ;*Done, over and out...
00001Ar 2               
00001Ar 2               ACIA_SHWMSG:
00001Ar 2  A0 00                    LDY #$0         ;for y = 0 to length of message{acia_write}
00001Cr 2               ACIA_PRINT:
00001Cr 2  B1 2C                    LDA (MSGL),Y
00001Er 2  F0 06                    BEQ ACIA_DONE
000020r 2  20 rr rr                 JSR ACIA_WRITE
000023r 2  C8                       INY
000024r 2  D0 F6                    BNE ACIA_PRINT
000026r 2               ACIA_DONE:
000026r 2  60                       RTS
000027r 2               ACIA_GETCHAR:
000027r 2  AD 01 A0                 LDA ACIA_SR
00002Ar 2  29 08                    AND #$08
00002Cr 2  F0 05                    BEQ NoDataIn
00002Er 2  AD 00 A0                 LDA ACIA_DAT
000031r 2  38                       SEC
000032r 2  60                       RTS
000033r 2               NoDataIn:
000033r 2  18                       CLC
000034r 2  60                       RTS
000035r 2               
000035r 1               .setcpu "65C02"
000035r 1               .feature force_range
000035r 1               
000035r 1               ; Microsoft BASIC for 6502 (OSI VERSION)
000035r 1               ;
000035r 1               ; ==================================================================================
000035r 1               ; MODIFIED FROM THE ORIGINAL FILES AT http://www.pagetable.com/?p=46
000035r 1               ; MERGED INTO ONE FILE AND MACROS AND CONDITIONAL STATEMENTS REMOVED
000035r 1               ; BY G. SEARLE 2013
000035r 1               ;
000035r 1               ; I/O and dummy load/saves added to the end of this code
000035r 1               ;
000035r 1               ; This then assembles to the OSI version with the following
000035r 1               ; minor changes to the original BASIC code:
000035r 1               ; 1. Control-C call changed
000035r 1               ; 2. Load/save calls changed
000035r 1               ; 3. RAM start set to $0200 instead of $0300
000035r 1               ; 4. ROM start set to $C000
000035r 1               ; 5. Second letter of error messages back to ASCII value (instead of $80+val)
000035r 1               ; ==================================================================================
000035r 1               ;
000035r 1               ; Extract of original header comments follows:
000035r 1               ;
000035r 1               ; (first revision of this distribution, 20 Oct 2008, Michael Steil www.pagetable.com)
000035r 1               ;
000035r 1               ;
000035r 1               ; Name                 Release   MS Version    ROM   9digit  INPUTBUFFER   extensions
000035r 1               ;---------------------------------------------------------------------------------------------------
000035r 1               ; OSI BASIC             1977     1.0 REV 3.2    Y      N          ZP            -
000035r 1               ;
000035r 1               ; Credits:
000035r 1               ; * main work by Michael Steil
000035r 1               ; * function names and all uppercase comments taken from Bob Sander-Cederlof's excellent AppleSoft II disassembly:
000035r 1               ;   http://www.txbobsc.com/scsc/scdocumentor/
000035r 1               ; * Applesoft lite by Tom Greene http://cowgod.org/replica1/applesoft/ helped a lot, too.
000035r 1               ; * Thanks to Joe Zbicak for help with Intellision Keyboard BASIC
000035r 1               ; * This work is dedicated to the memory of my dear hacking pal Michael "acidity" Kollmann.
000035r 1               
000035r 1               .debuginfo +
000035r 1               
000035r 1               .setcpu "6502"
000035r 1               .macpack longbranch
000035r 2               .macro  jeq     Target
000035r 2                       .if     .match(Target, 0)
000035r 2                       bne     *+5
000035r 2                       jmp     Target
000035r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000035r 2                               beq     Target
000035r 2                       .else
000035r 2                               bne     *+5
000035r 2                               jmp     Target
000035r 2                       .endif
000035r 2               .endmacro
000035r 2               .macro  jne     Target
000035r 2                       .if     .match(Target, 0)
000035r 2                               beq     *+5
000035r 2                               jmp     Target
000035r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000035r 2                               bne     Target
000035r 2                       .else
000035r 2                               beq     *+5
000035r 2                               jmp     Target
000035r 2                       .endif
000035r 2               .endmacro
000035r 2               .macro  jmi     Target
000035r 2                       .if     .match(Target, 0)
000035r 2                               bpl     *+5
000035r 2                               jmp     Target
000035r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000035r 2                               bmi     Target
000035r 2                       .else
000035r 2                               bpl     *+5
000035r 2                               jmp     Target
000035r 2                       .endif
000035r 2               .endmacro
000035r 2               .macro  jpl     Target
000035r 2                       .if     .match(Target, 0)
000035r 2                               bmi     *+5
000035r 2                               jmp     Target
000035r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000035r 2                               bpl     Target
000035r 2                       .else
000035r 2                               bmi     *+5
000035r 2                               jmp     Target
000035r 2                       .endif
000035r 2               .endmacro
000035r 2               .macro  jcs     Target
000035r 2                       .if     .match(Target, 0)
000035r 2                               bcc     *+5
000035r 2                               jmp     Target
000035r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000035r 2                               bcs     Target
000035r 2                       .else
000035r 2                               bcc     *+5
000035r 2                               jmp     Target
000035r 2                       .endif
000035r 2               .endmacro
000035r 2               .macro  jcc     Target
000035r 2                       .if     .match(Target, 0)
000035r 2                               bcs     *+5
000035r 2                               jmp     Target
000035r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000035r 2                               bcc     Target
000035r 2                       .else
000035r 2                               bcs     *+5
000035r 2                               jmp     Target
000035r 2                       .endif
000035r 2               .endmacro
000035r 2               .macro  jvs     Target
000035r 2                       .if     .match(Target, 0)
000035r 2                               bvc     *+5
000035r 2                               jmp     Target
000035r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000035r 2                               bvs     Target
000035r 2                       .else
000035r 2                               bvc     *+5
000035r 2                               jmp     Target
000035r 2                       .endif
000035r 2               .endmacro
000035r 2               .macro  jvc     Target
000035r 2                       .if     .match(Target, 0)
000035r 2                               bvs     *+5
000035r 2                               jmp     Target
000035r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000035r 2                               bvc     Target
000035r 2                       .else
000035r 2                               bvs     *+5
000035r 2                               jmp     Target
000035r 2                       .endif
000035r 2               .endmacro
000035r 2               
000035r 1               
000035r 1               ; zero page
000035r 1               ZP_START1 = $00
000035r 1               ZP_START2 = $0D
000035r 1               ZP_START3 = $5B
000035r 1               ZP_START4 = $65
000035r 1               
000035r 1               ;extra ZP variables
000035r 1               USR             := $000A
000035r 1               
000035r 1               ; constants
000035r 1               STACK_TOP		:= $FC
000035r 1               SPACE_FOR_GOSUB := $33
000035r 1               NULL_MAX		:= $0A
000035r 1               WIDTH			:= 72
000035r 1               WIDTH2			:= 56
000035r 1               
000035r 1               ; memory layout
000035r 1               RAMSTART2		:= $0200
000035r 1               BYTES_FP		:= 4
000035r 1               BYTES_PER_ELEMENT := BYTES_FP
000035r 1               BYTES_PER_VARIABLE := BYTES_FP+2
000035r 1               MANTISSA_BYTES	:= BYTES_FP-1
000035r 1               BYTES_PER_FRAME := 2*BYTES_FP+8
000035r 1               FOR_STACK1		:= 2*BYTES_FP+5
000035r 1               FOR_STACK2		:= BYTES_FP+4
000035r 1               MAX_EXPON = 10
000035r 1               STACK           := $0100
000035r 1               
000035r 1               INPUTBUFFERX = INPUTBUFFER & $FF00
000035r 1               
000035r 1               CR=13
000035r 1               LF=10
000035r 1               
000035r 1               CRLF_1 := CR
000035r 1               CRLF_2 := LF
000035r 1               
000035r 1               .feature org_per_seg
000035r 1               .zeropage
000000r 1               .org $0000
000000  1               .org ZP_START1
000000  1               GORESTART:
000000  1  xx xx xx     	.res 3
000003  1               GOSTROUT:
000003  1  xx xx xx     	.res 3
000006  1               GOAYINT:
000006  1  xx xx        	.res 2
000008  1               GOGIVEAYF:
000008  1  xx xx        	.res 2
00000A  1               
00000A  1               .org ZP_START2
00000D  1               Z15:
00000D  1  xx           	.res 1
00000E  1               POSX:
00000E  1  xx           	.res 1
00000F  1               Z17:
00000F  1  xx           	.res 1
000010  1               Z18:
000010  1  xx           	.res 1
000011  1               LINNUM:
000011  1               TXPSV:
000011  1  xx xx        	.res 2
000013  1               INPUTBUFFER:
000013  1               
000013  1               .org ZP_START3
00005B  1               CHARAC:
00005B  1  xx           	.res 1
00005C  1               ENDCHR:
00005C  1  xx           	.res 1
00005D  1               EOLPNTR:
00005D  1  xx           	.res 1
00005E  1               DIMFLG:
00005E  1  xx           	.res 1
00005F  1               VALTYP:
00005F  1  xx           	.res 1
000060  1               DATAFLG:
000060  1  xx           	.res 1
000061  1               SUBFLG:
000061  1  xx           	.res 1
000062  1               INPUTFLG:
000062  1  xx           	.res 1
000063  1               CPRMASK:
000063  1  xx           	.res 1
000064  1               Z14:
000064  1  xx           	.res 1
000065  1               
000065  1               .org ZP_START4
000065  1               TEMPPT:
000065  1  xx           	.res 1
000066  1               LASTPT:
000066  1  xx xx        	.res 2
000068  1               TEMPST:
000068  1  xx xx xx xx  	.res 9
00006C  1  xx xx xx xx  
000070  1  xx           
000071  1               INDEX:
000071  1  xx xx        	.res 2
000073  1               DEST:
000073  1  xx xx        	.res 2
000075  1               RESULT:
000075  1  xx xx xx xx  	.res BYTES_FP
000079  1               RESULT_LAST = RESULT + BYTES_FP-1
000079  1               TXTTAB:
000079  1  xx xx        	.res 2
00007B  1               VARTAB:
00007B  1  xx xx        	.res 2
00007D  1               ARYTAB:
00007D  1  xx xx        	.res 2
00007F  1               STREND:
00007F  1  xx xx        	.res 2
000081  1               FRETOP:
000081  1  xx xx        	.res 2
000083  1               FRESPC:
000083  1  xx xx        	.res 2
000085  1               MEMSIZ:
000085  1  xx xx        	.res 2
000087  1               CURLIN:
000087  1  xx xx        	.res 2
000089  1               OLDLIN:
000089  1  xx xx        	.res 2
00008B  1               OLDTEXT:
00008B  1  xx xx        	.res 2
00008D  1               Z8C:
00008D  1  xx xx        	.res 2
00008F  1               DATPTR:
00008F  1  xx xx        	.res 2
000091  1               INPTR:
000091  1  xx xx        	.res 2
000093  1               VARNAM:
000093  1  xx xx        	.res 2
000095  1               VARPNT:
000095  1  xx xx        	.res 2
000097  1               FORPNT:
000097  1  xx xx        	.res 2
000099  1               LASTOP:
000099  1  xx xx        	.res 2
00009B  1               CPRTYP:
00009B  1  xx           	.res 1
00009C  1               FNCNAM:
00009C  1               TEMP3:
00009C  1  xx xx        	.res 2
00009E  1               DSCPTR:
00009E  1  xx xx        	.res 2
0000A0  1               DSCLEN:
0000A0  1  xx xx        	.res 2
0000A2  1               JMPADRS	:= DSCLEN + 1
0000A2  1               
0000A2  1               Z52:
0000A2  1  xx           	.res 1
0000A3  1               ARGEXTENSION:
0000A3  1               TEMP1:
0000A3  1  xx           	.res 1
0000A4  1               HIGHDS:
0000A4  1  xx xx        	.res 2
0000A6  1               HIGHTR:
0000A6  1  xx xx        	.res 2
0000A8  1               INDX:
0000A8  1               TMPEXP:
0000A8  1               TEMP2:
0000A8  1  xx           	.res 1
0000A9  1               EXPON:
0000A9  1  xx           	.res 1
0000AA  1               LOWTR:
0000AA  1               LOWTRX:
0000AA  1  xx           	.res 1
0000AB  1               EXPSGN:
0000AB  1  xx           	.res 1
0000AC  1               FAC:
0000AC  1  xx xx xx xx  	.res BYTES_FP
0000B0  1               FAC_LAST = FAC + BYTES_FP-1
0000B0  1               FACSIGN:
0000B0  1  xx           	.res 1
0000B1  1               SERLEN:
0000B1  1  xx           	.res 1
0000B2  1               SHIFTSIGNEXT:
0000B2  1  xx           	.res 1
0000B3  1               ARG:
0000B3  1  xx xx xx xx  	.res BYTES_FP
0000B7  1               ARG_LAST = ARG + BYTES_FP-1
0000B7  1               ARGSIGN:
0000B7  1  xx           	.res 1
0000B8  1               STRNG1:
0000B8  1  xx xx        	.res 2
0000BA  1               SGNCPR = STRNG1
0000BA  1               FACEXTENSION = STRNG1+1
0000BA  1               STRNG2:
0000BA  1  xx xx        	.res 2
0000BC  1               CHRGET:
0000BC  1               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
0000BC  1               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
0000BC  1               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
0000BC  1               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
0000BC  1               
0000BC  1               ;.segment "CODE"
0000BC  1               ;.org $C000 commented out by stache
0000BC  1               
0000BC  1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr                  .word   nmi
000002r 1  rr rr                  .word   reset
000004r 1  rr rr                  .word   irq
000006r 1               
000006r 1                         .code
000035r 1               
000035r 1  4C rr rr     reset:				jmp Reset
000038r 1               
000038r 1  40           nmi:					rti
000039r 1               
000039r 1  40           irq:					rti
00003Ar 1               TOKEN_ADDRESS_TABLE:
00003Ar 1  rr rr        		.word END-1
00003Cr 1  rr rr        		.word FOR-1
00003Er 1  rr rr        		.word NEXT-1
000040r 1  rr rr        		.word DATA-1
000042r 1  rr rr        		.word INPUT-1
000044r 1  rr rr        		.word DIM-1
000046r 1  rr rr        		.word READ-1
000048r 1  rr rr        		.word LET-1
00004Ar 1               TOKEN_GOTO=$80+(*-TOKEN_ADDRESS_TABLE)/2
00004Ar 1  rr rr        		.word GOTO-1
00004Cr 1  rr rr        		.word RUN-1
00004Er 1  rr rr        		.word IF-1
000050r 1  rr rr        		.word RESTORE-1
000052r 1               TOKEN_GOSUB=$80+(*-TOKEN_ADDRESS_TABLE)/2
000052r 1  rr rr        		.word GOSUB-1
000054r 1  rr rr        		.word POP-1
000056r 1               TOKEN_REM=$80+(*-TOKEN_ADDRESS_TABLE)/2
000056r 1  rr rr        		.word REM-1
000058r 1  rr rr        		.word STOP-1
00005Ar 1  rr rr        		.word ON-1
00005Cr 1  rr rr        		.word NULL-1
00005Er 1  rr rr        		.word WAIT-1
000060r 1  rr rr        		.word LOAD-1
000062r 1  rr rr        		.word SAVE-1
000064r 1  rr rr        		.word DEF-1
000066r 1  rr rr        		.word POKE-1
000068r 1               TOKEN_PRINT=$80+(*-TOKEN_ADDRESS_TABLE)/2
000068r 1  rr rr        		.word PRINT-1
00006Ar 1  rr rr        		.word CONT-1
00006Cr 1  rr rr        		.word LIST-1
00006Er 1  rr rr        		.word CLEAR-1
000070r 1  rr rr        		.word NEW-1
000072r 1               TOKEN_TAB=$00+$80+(*-TOKEN_ADDRESS_TABLE)/2
000072r 1               TOKEN_TO=$01+$80+(*-TOKEN_ADDRESS_TABLE)/2
000072r 1               TOKEN_FN=$02+$80+(*-TOKEN_ADDRESS_TABLE)/2
000072r 1               TOKEN_SPC=$03+$80+(*-TOKEN_ADDRESS_TABLE)/2
000072r 1               TOKEN_THEN=$04+$80+(*-TOKEN_ADDRESS_TABLE)/2
000072r 1               TOKEN_NOT=$05+$80+(*-TOKEN_ADDRESS_TABLE)/2
000072r 1               TOKEN_STEP=$06+$80+(*-TOKEN_ADDRESS_TABLE)/2
000072r 1               TOKEN_PLUS=$07+$80+(*-TOKEN_ADDRESS_TABLE)/2
000072r 1               TOKEN_MINUS=$08+$80+(*-TOKEN_ADDRESS_TABLE)/2
000072r 1               TOKEN_GREATER=$0E+$80+(*-TOKEN_ADDRESS_TABLE)/2
000072r 1               TOKEN_EQUAL=$0F+$80+(*-TOKEN_ADDRESS_TABLE)/2
000072r 1               NUM_TOKENS=(*-TOKEN_ADDRESS_TABLE)/2
000072r 1               
000072r 1               UNFNC:
000072r 1               TOKEN_SGN=$11+$80+(*-TOKEN_ADDRESS_TABLE)/2
000072r 1  rr rr        		.word SGN
000074r 1  rr rr        		.word INT
000076r 1  rr rr        		.word ABS
000078r 1  0A 00        		.word USR
00007Ar 1  rr rr        		.word FRE
00007Cr 1  rr rr        		.word POS
00007Er 1  rr rr        		.word SQR
000080r 1  rr rr        		.word RND
000082r 1  rr rr        		.word LOG
000084r 1  rr rr        		.word EXP
000086r 1  rr rr        		.word COS
000088r 1  rr rr        		.word SIN
00008Ar 1  rr rr        		.word TAN
00008Cr 1  rr rr        		.word ATN
00008Er 1  rr rr        		.word PEEK
000090r 1  rr rr        		.word LEN
000092r 1  rr rr        		.word STR
000094r 1  rr rr        		.word VAL
000096r 1  rr rr        		.word ASC
000098r 1  rr rr        		.word CHRSTR
00009Ar 1               TOKEN_LEFTSTR=$11+$80+(*-TOKEN_ADDRESS_TABLE)/2
00009Ar 1  rr rr        		.word LEFTSTR
00009Cr 1  rr rr        		.word RIGHTSTR
00009Er 1  rr rr        		.word MIDSTR
0000A0r 1               
0000A0r 1               MATHTBL:
0000A0r 1  79                   .byte   $79
0000A1r 1  rr rr                .word   FADDT-1
0000A3r 1  79                   .byte   $79
0000A4r 1  rr rr                .word   FSUBT-1
0000A6r 1  7B                   .byte   $7B
0000A7r 1  rr rr                .word   FMULTT-1
0000A9r 1  7B                   .byte   $7B
0000AAr 1  rr rr                .word   FDIVT-1
0000ACr 1  7F                   .byte   $7F
0000ADr 1  rr rr                .word   FPWRT-1
0000AFr 1  50                   .byte   $50
0000B0r 1  rr rr                .word   TAND-1
0000B2r 1  46                   .byte   $46
0000B3r 1  rr rr                .word   OR-1
0000B5r 1  7D                   .byte   $7D
0000B6r 1  rr rr                .word   NEGOP-1
0000B8r 1  5A                   .byte   $5A
0000B9r 1  rr rr                .word   EQUOP-1
0000BBr 1  64                   .byte   $64
0000BCr 1  rr rr                .word   RELOPS-1
0000BEr 1               
0000BEr 1               TOKEN_NAME_TABLE:
0000BEr 1  45 4E C4     		.byte "EN", $80+'D'
0000C1r 1  46 4F D2     		.byte "FO", $80+'R'
0000C4r 1  4E 45 58 D4  		.byte "NEX", $80+'T'
0000C8r 1  44 41 54 C1  		.byte "DAT", $80+'A'
0000CCr 1  49 4E 50 55  		.byte "INPU", $80+'T'
0000D0r 1  D4           
0000D1r 1  44 49 CD     		.byte "DI", $80+'M'
0000D4r 1  52 45 41 C4  		.byte "REA", $80+'D'
0000D8r 1  4C 45 D4     		.byte "LE", $80+'T'
0000DBr 1  47 4F 54 CF  		.byte "GOT", $80+'O'
0000DFr 1  52 55 CE     		.byte "RU", $80+'N'
0000E2r 1  49 C6        		.byte "I", $80+'F'
0000E4r 1  52 45 53 54  		.byte "RESTOR", $80+'E'
0000E8r 1  4F 52 C5     
0000EBr 1  47 4F 53 55  		.byte "GOSU", $80+'B'
0000EFr 1  C2           
0000F0r 1  52 45 54 55  		.byte "RETUR", $80+'N'
0000F4r 1  52 CE        
0000F6r 1  52 45 CD     		.byte "RE", $80+'M'
0000F9r 1  53 54 4F D0  		.byte "STO", $80+'P'
0000FDr 1  4F CE        		.byte "O", $80+'N'
0000FFr 1  4E 55 4C CC  		.byte "NUL", $80+'L'
000103r 1  57 41 49 D4  		.byte "WAI", $80+'T'
000107r 1  4C 4F 41 C4  		.byte "LOA", $80+'D'
00010Br 1  53 41 56 C5  		.byte "SAV", $80+'E'
00010Fr 1  44 45 C6     		.byte "DE", $80+'F'
000112r 1  50 4F 4B C5  		.byte "POK", $80+'E'
000116r 1  50 52 49 4E  		.byte "PRIN", $80+'T'
00011Ar 1  D4           
00011Br 1  43 4F 4E D4  		.byte "CON", $80+'T'
00011Fr 1  4C 49 53 D4  		.byte "LIS", $80+'T'
000123r 1  43 4C 45 41  		.byte "CLEA", $80+'R'
000127r 1  D2           
000128r 1  4E 45 D7     		.byte "NE", $80+'W'
00012Br 1  54 41 42 A8  		.byte "TAB", $80+'('
00012Fr 1  54 CF        		.byte "T", $80+'O'
000131r 1  46 CE        		.byte "F", $80+'N'
000133r 1  53 50 43 A8  		.byte "SPC", $80+'('
000137r 1  54 48 45 CE  		.byte "THE", $80+'N'
00013Br 1  4E 4F D4     		.byte "NO", $80+'T'
00013Er 1  53 54 45 D0  		.byte "STE", $80+'P'
000142r 1  AB           		.byte "", $80+'+'
000143r 1  AD           		.byte "", $80+'-'
000144r 1  AA           		.byte "", $80+'*'
000145r 1  AF           		.byte "", $80+'/'
000146r 1  DE           		.byte "", $80+'^'
000147r 1  41 4E C4     		.byte "AN", $80+'D'
00014Ar 1  4F D2        		.byte "O", $80+'R'
00014Cr 1  BE           		.byte "", $80+'>'
00014Dr 1  BD           		.byte "", $80+'='
00014Er 1  BC           		.byte "", $80+'<'
00014Fr 1  53 47 CE     		.byte "SG", $80+'N'
000152r 1  49 4E D4     		.byte "IN", $80+'T'
000155r 1  41 42 D3     		.byte "AB", $80+'S'
000158r 1  55 53 D2     		.byte "US", $80+'R'
00015Br 1  46 52 C5     		.byte "FR", $80+'E'
00015Er 1  50 4F D3     		.byte "PO", $80+'S'
000161r 1  53 51 D2     		.byte "SQ", $80+'R'
000164r 1  52 4E C4     		.byte "RN", $80+'D'
000167r 1  4C 4F C7     		.byte "LO", $80+'G'
00016Ar 1  45 58 D0     		.byte "EX", $80+'P'
00016Dr 1  43 4F D3     		.byte "CO", $80+'S'
000170r 1  53 49 CE     		.byte "SI", $80+'N'
000173r 1  54 41 CE     		.byte "TA", $80+'N'
000176r 1  41 54 CE     		.byte "AT", $80+'N'
000179r 1  50 45 45 CB  		.byte "PEE", $80+'K'
00017Dr 1  4C 45 CE     		.byte "LE", $80+'N'
000180r 1  53 54 52 A4  		.byte "STR", $80+'$'
000184r 1  56 41 CC     		.byte "VA", $80+'L'
000187r 1  41 53 C3     		.byte "AS", $80+'C'
00018Ar 1  43 48 52 A4  		.byte "CHR", $80+'$'
00018Er 1  4C 45 46 54  		.byte "LEFT", $80+'$'
000192r 1  A4           
000193r 1  52 49 47 48  		.byte "RIGHT", $80+'$'
000197r 1  54 A4        
000199r 1  4D 49 44 A4  		.byte "MID", $80+'$'
00019Dr 1  00           		.byte   0
00019Er 1               
00019Er 1               ERROR_MESSAGES:
00019Er 1               ERR_NOFOR := <(*-ERROR_MESSAGES)
00019Er 1  4E 46                .byte "NF"
0001A0r 1               ERR_SYNTAX := <(*-ERROR_MESSAGES)
0001A0r 1  53 4E                .byte "SN"
0001A2r 1               ERR_NOGOSUB := <(*-ERROR_MESSAGES)
0001A2r 1  52 47                .byte "RG"
0001A4r 1               ERR_NODATA := <(*-ERROR_MESSAGES)
0001A4r 1  4F 44                .byte "OD"
0001A6r 1               ERR_ILLQTY := <(*-ERROR_MESSAGES)
0001A6r 1  46 43                .byte "FC"
0001A8r 1               ERR_OVERFLOW := <(*-ERROR_MESSAGES)
0001A8r 1  4F 56                .byte "OV"
0001AAr 1               ERR_MEMFULL := <(*-ERROR_MESSAGES)
0001AAr 1  4F 4D                .byte "OM"
0001ACr 1               ERR_UNDEFSTAT := <(*-ERROR_MESSAGES)
0001ACr 1  55 53                .byte "US"
0001AEr 1               ERR_BADSUBS := <(*-ERROR_MESSAGES)
0001AEr 1  42 53                .byte "BS"
0001B0r 1               ERR_REDIMD := <(*-ERROR_MESSAGES)
0001B0r 1  44 44                .byte "DD"
0001B2r 1               ERR_ZERODIV := <(*-ERROR_MESSAGES)
0001B2r 1  2F 30                .byte "/0"
0001B4r 1               ERR_ILLDIR := <(*-ERROR_MESSAGES)
0001B4r 1  49 44                .byte "ID"
0001B6r 1               ERR_BADTYPE := <(*-ERROR_MESSAGES)
0001B6r 1  54 4D                .byte "TM"
0001B8r 1               ERR_STRLONG := <(*-ERROR_MESSAGES)
0001B8r 1  4C 53                .byte "LS"
0001BAr 1               ERR_FRMCPX := <(*-ERROR_MESSAGES)
0001BAr 1  53 54                .byte "ST"
0001BCr 1               ERR_CANTCONT := <(*-ERROR_MESSAGES)
0001BCr 1  43 4E                .byte "CN"
0001BEr 1               ERR_UNDEFFN := <(*-ERROR_MESSAGES)
0001BEr 1  55 46                .byte "UF"
0001C0r 1               
0001C0r 1               ; global messages: "error", "in", "ready", "break"
0001C0r 1               QT_ERROR:
0001C0r 1  20 45 52 52          .byte   " ERROR"
0001C4r 1  4F 52        
0001C6r 1  00                   .byte   0
0001C7r 1               QT_IN:
0001C7r 1  20 49 4E 20          .byte   " IN "
0001CBr 1  00                   .byte   $00
0001CCr 1               QT_OK:
0001CCr 1  0D 0A 4F 4B  		.byte   CR,LF,"OK",CR,LF
0001D0r 1  0D 0A        
0001D2r 1  00           		.byte	0
0001D3r 1               QT_BREAK:
0001D3r 1  0D 0A 42 52  		.byte CR,LF,"BREAK"
0001D7r 1  45 41 4B     
0001DAr 1  00                   .byte   0
0001DBr 1               
0001DBr 1               ; generic stack and memory management code
0001DBr 1               ; this code is identical across all versions of
0001DBr 1               ; BASIC
0001DBr 1               ; ----------------------------------------------------------------------------
0001DBr 1               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
0001DBr 1               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
0001DBr 1               ;
0001DBr 1               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
0001DBr 1               ; 	= $XXFF IF CALLED FROM "RETURN"
0001DBr 1               ; 	<<< BUG: SHOULD BE $FFXX >>>
0001DBr 1               ;
0001DBr 1               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
0001DBr 1               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
0001DBr 1               ;
0001DBr 1               ;	.EQ. IF FOUND
0001DBr 1               ;	(X) = STACK PNTR OF FRAME FOUND
0001DBr 1               ; ----------------------------------------------------------------------------
0001DBr 1               GTFORPNT:
0001DBr 1  BA                   tsx
0001DCr 1  E8                   inx
0001DDr 1  E8                   inx
0001DEr 1  E8                   inx
0001DFr 1  E8                   inx
0001E0r 1               L2279:
0001E0r 1  BD 01 01             lda     STACK+1,x
0001E3r 1  C9 81                cmp     #$81
0001E5r 1  D0 21                bne     L22A1
0001E7r 1  A5 98                lda     FORPNT+1
0001E9r 1  D0 0A                bne     L228E
0001EBr 1  BD 02 01             lda     STACK+2,x
0001EEr 1  85 97                sta     FORPNT
0001F0r 1  BD 03 01             lda     STACK+3,x
0001F3r 1  85 98                sta     FORPNT+1
0001F5r 1               L228E:
0001F5r 1  DD 03 01             cmp     STACK+3,x
0001F8r 1  D0 07                bne     L229A
0001FAr 1  A5 97                lda     FORPNT
0001FCr 1  DD 02 01             cmp     STACK+2,x
0001FFr 1  F0 07                beq     L22A1
000201r 1               L229A:
000201r 1  8A                   txa
000202r 1  18                   clc
000203r 1  69 10                adc     #BYTES_PER_FRAME
000205r 1  AA                   tax
000206r 1  D0 D8                bne     L2279
000208r 1               L22A1:
000208r 1  60                   rts
000209r 1               ; ----------------------------------------------------------------------------
000209r 1               ; MOVE BLOCK OF MEMORY UP
000209r 1               ;
000209r 1               ; ON ENTRY:
000209r 1               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
000209r 1               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
000209r 1               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
000209r 1               ; ----------------------------------------------------------------------------
000209r 1               BLTU:
000209r 1  20 rr rr             jsr     REASON
00020Cr 1  85 7F                sta     STREND
00020Er 1  84 80                sty     STREND+1
000210r 1               BLTU2:
000210r 1  38                   sec
000211r 1  A5 A6                lda     HIGHTR
000213r 1  E5 AA                sbc     LOWTR
000215r 1  85 71                sta     INDEX
000217r 1  A8                   tay
000218r 1  A5 A7                lda     HIGHTR+1
00021Ar 1  E5 AB                sbc     LOWTR+1
00021Cr 1  AA                   tax
00021Dr 1  E8                   inx
00021Er 1  98                   tya
00021Fr 1  F0 23                beq     L22DD
000221r 1  A5 A6                lda     HIGHTR
000223r 1  38                   sec
000224r 1  E5 71                sbc     INDEX
000226r 1  85 A6                sta     HIGHTR
000228r 1  B0 03                bcs     L22C6
00022Ar 1  C6 A7                dec     HIGHTR+1
00022Cr 1  38                   sec
00022Dr 1               L22C6:
00022Dr 1  A5 A4                lda     HIGHDS
00022Fr 1  E5 71                sbc     INDEX
000231r 1  85 A4                sta     HIGHDS
000233r 1  B0 08                bcs     L22D6
000235r 1  C6 A5                dec     HIGHDS+1
000237r 1  90 04                bcc     L22D6
000239r 1               L22D2:
000239r 1  B1 A6                lda     (HIGHTR),y
00023Br 1  91 A4                sta     (HIGHDS),y
00023Dr 1               L22D6:
00023Dr 1  88                   dey
00023Er 1  D0 F9                bne     L22D2
000240r 1  B1 A6                lda     (HIGHTR),y
000242r 1  91 A4                sta     (HIGHDS),y
000244r 1               L22DD:
000244r 1  C6 A7                dec     HIGHTR+1
000246r 1  C6 A5                dec     HIGHDS+1
000248r 1  CA                   dex
000249r 1  D0 F2                bne     L22D6
00024Br 1  60                   rts
00024Cr 1               ; ----------------------------------------------------------------------------
00024Cr 1               ; CHECK IF ENOUGH ROOM LEFT ON STACK
00024Cr 1               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
00024Cr 1               ; ----------------------------------------------------------------------------
00024Cr 1               CHKMEM:
00024Cr 1  0A                   asl     a
00024Dr 1  69 33                adc     #SPACE_FOR_GOSUB
00024Fr 1  B0 35                bcs     MEMERR
000251r 1  85 71                sta     INDEX
000253r 1  BA                   tsx
000254r 1  E4 71                cpx     INDEX
000256r 1  90 2E                bcc     MEMERR
000258r 1  60                   rts
000259r 1               ; ----------------------------------------------------------------------------
000259r 1               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
000259r 1               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
000259r 1               ; ----------------------------------------------------------------------------
000259r 1               REASON:
000259r 1  C4 82                cpy     FRETOP+1
00025Br 1  90 28                bcc     L231E
00025Dr 1  D0 04                bne     L22FC
00025Fr 1  C5 81                cmp     FRETOP
000261r 1  90 22                bcc     L231E
000263r 1               L22FC:
000263r 1  48                   pha
000264r 1  A2 08                ldx     #FAC-TEMP1-1
000266r 1  98                   tya
000267r 1               L2300:
000267r 1  48                   pha
000268r 1  B5 A3                lda     TEMP1,x
00026Ar 1  CA                   dex
00026Br 1  10 FA                bpl     L2300
00026Dr 1  20 rr rr             jsr     GARBAG
000270r 1  A2 F8                ldx     #TEMP1-FAC+1
000272r 1               L230B:
000272r 1  68                   pla
000273r 1  95 AC                sta     FAC,x
000275r 1  E8                   inx
000276r 1  30 FA                bmi     L230B
000278r 1  68                   pla
000279r 1  A8                   tay
00027Ar 1  68                   pla
00027Br 1  C4 82                cpy     FRETOP+1
00027Dr 1  90 06                bcc     L231E
00027Fr 1  D0 05                bne     MEMERR
000281r 1  C5 81                cmp     FRETOP
000283r 1  B0 01                bcs     MEMERR
000285r 1               L231E:
000285r 1  60                   rts
000286r 1               MEMERR:
000286r 1  A2 0C                ldx     #ERR_MEMFULL
000288r 1               ; ----------------------------------------------------------------------------
000288r 1               ; HANDLE AN ERROR
000288r 1               ;
000288r 1               ; (X)=OFFSET IN ERROR MESSAGE TABLE
000288r 1               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
000288r 1               ; (CURLIN+1) = $FF IF IN DIRECT MODE
000288r 1               ; ----------------------------------------------------------------------------
000288r 1               ERROR:
000288r 1  46 64                lsr     Z14
00028Ar 1  20 rr rr             jsr     CRDO
00028Dr 1  20 rr rr             jsr     OUTQUES
000290r 1  BD rr rr             lda     ERROR_MESSAGES,x
000293r 1  20 rr rr             jsr     OUTDO
000296r 1  BD rr rr             lda     ERROR_MESSAGES+1,x
000299r 1  20 rr rr             jsr     OUTDO
00029Cr 1  20 rr rr             jsr     STKINI
00029Fr 1  A9 rr                lda     #<QT_ERROR
0002A1r 1  A0 rr                ldy     #>QT_ERROR
0002A3r 1               ; ----------------------------------------------------------------------------
0002A3r 1               ; PRINT STRING AT (Y,A)
0002A3r 1               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
0002A3r 1               ; FALL INTO WARM RESTART
0002A3r 1               ; ----------------------------------------------------------------------------
0002A3r 1               PRINT_ERROR_LINNUM:
0002A3r 1  20 rr rr             jsr     STROUT
0002A6r 1  A4 88                ldy     CURLIN+1
0002A8r 1  C8                   iny
0002A9r 1  F0 03                beq     RESTART
0002ABr 1  20 rr rr             jsr     INPRT
0002AEr 1               ; ----------------------------------------------------------------------------
0002AEr 1               ; WARM RESTART ENTRY
0002AEr 1               ; ----------------------------------------------------------------------------
0002AEr 1               RESTART:
0002AEr 1  46 64                lsr     Z14
0002B0r 1  A9 rr                lda     #<QT_OK
0002B2r 1  A0 rr                ldy     #>QT_OK
0002B4r 1  20 03 00             jsr     GOSTROUT
0002B7r 1               L2351:
0002B7r 1  20 rr rr             jsr     INLIN
0002BAr 1  86 C3                stx     TXTPTR
0002BCr 1  84 C4                sty     TXTPTR+1
0002BEr 1  20 BC 00             jsr     CHRGET
0002C1r 1               ; bug in pre-1.1: CHRGET sets Z on '\0'
0002C1r 1               ; and ':' - a line starting with ':' in
0002C1r 1               ; direct mode gets ignored
0002C1r 1  F0 F4                beq     L2351
0002C3r 1  A2 FF                ldx     #$FF
0002C5r 1  86 88                stx     CURLIN+1
0002C7r 1  90 06                bcc     NUMBERED_LINE
0002C9r 1  20 rr rr             jsr     PARSE_INPUT_LINE
0002CCr 1  4C rr rr             jmp     NEWSTT2
0002CFr 1               ; ----------------------------------------------------------------------------
0002CFr 1               ; HANDLE NUMBERED LINE
0002CFr 1               ; ----------------------------------------------------------------------------
0002CFr 1               NUMBERED_LINE:
0002CFr 1  20 rr rr             jsr     LINGET
0002D2r 1  20 rr rr             jsr     PARSE_INPUT_LINE
0002D5r 1  84 5D                sty     EOLPNTR
0002D7r 1  20 rr rr             jsr     FNDLIN
0002DAr 1  90 44                bcc     PUT_NEW_LINE
0002DCr 1  A0 01                ldy     #$01
0002DEr 1  B1 AA                lda     (LOWTR),y
0002E0r 1  85 72                sta     INDEX+1
0002E2r 1  A5 7B                lda     VARTAB
0002E4r 1  85 71                sta     INDEX
0002E6r 1  A5 AB                lda     LOWTR+1
0002E8r 1  85 74                sta     DEST+1
0002EAr 1  A5 AA                lda     LOWTR
0002ECr 1  88                   dey
0002EDr 1  F1 AA                sbc     (LOWTR),y
0002EFr 1  18                   clc
0002F0r 1  65 7B                adc     VARTAB
0002F2r 1  85 7B                sta     VARTAB
0002F4r 1  85 73                sta     DEST
0002F6r 1  A5 7C                lda     VARTAB+1
0002F8r 1  69 FF                adc     #$FF
0002FAr 1  85 7C                sta     VARTAB+1
0002FCr 1  E5 AB                sbc     LOWTR+1
0002FEr 1  AA                   tax
0002FFr 1  38                   sec
000300r 1  A5 AA                lda     LOWTR
000302r 1  E5 7B                sbc     VARTAB
000304r 1  A8                   tay
000305r 1  B0 03                bcs     L23A5
000307r 1  E8                   inx
000308r 1  C6 74                dec     DEST+1
00030Ar 1               L23A5:
00030Ar 1  18                   clc
00030Br 1  65 71                adc     INDEX
00030Dr 1  90 03                bcc     L23AD
00030Fr 1  C6 72                dec     INDEX+1
000311r 1  18                   clc
000312r 1               L23AD:
000312r 1  B1 71                lda     (INDEX),y
000314r 1  91 73                sta     (DEST),y
000316r 1  C8                   iny
000317r 1  D0 F9                bne     L23AD
000319r 1  E6 72                inc     INDEX+1
00031Br 1  E6 74                inc     DEST+1
00031Dr 1  CA                   dex
00031Er 1  D0 F2                bne     L23AD
000320r 1               ; ----------------------------------------------------------------------------
000320r 1               PUT_NEW_LINE:
000320r 1  A5 13                lda     INPUTBUFFER
000322r 1  F0 2F                beq     FIX_LINKS
000324r 1  A5 85                lda     MEMSIZ
000326r 1  A4 86                ldy     MEMSIZ+1
000328r 1  85 81                sta     FRETOP
00032Ar 1  84 82                sty     FRETOP+1
00032Cr 1  A5 7B                lda     VARTAB
00032Er 1  85 A6                sta     HIGHTR
000330r 1  65 5D                adc     EOLPNTR
000332r 1  85 A4                sta     HIGHDS
000334r 1  A4 7C                ldy     VARTAB+1
000336r 1  84 A7                sty     HIGHTR+1
000338r 1  90 01                bcc     L23D6
00033Ar 1  C8                   iny
00033Br 1               L23D6:
00033Br 1  84 A5                sty     HIGHDS+1
00033Dr 1  20 rr rr             jsr     BLTU
000340r 1  A5 7F                lda     STREND
000342r 1  A4 80                ldy     STREND+1
000344r 1  85 7B                sta     VARTAB
000346r 1  84 7C                sty     VARTAB+1
000348r 1  A4 5D                ldy     EOLPNTR
00034Ar 1  88                   dey
00034Br 1               ; ---COPY LINE INTO PROGRAM-------
00034Br 1               L23E6:
00034Br 1  B9 0F 00             lda     INPUTBUFFER-4,y
00034Er 1  91 AA                sta     (LOWTR),y
000350r 1  88                   dey
000351r 1  10 F8                bpl     L23E6
000353r 1               ; ----------------------------------------------------------------------------
000353r 1               ; CLEAR ALL VARIABLES
000353r 1               ; RE-ESTABLISH ALL FORWARD LINKS
000353r 1               ; ----------------------------------------------------------------------------
000353r 1               FIX_LINKS:
000353r 1  20 rr rr             jsr     SETPTRS
000356r 1  A5 79                lda     TXTTAB
000358r 1  A4 7A                ldy     TXTTAB+1
00035Ar 1  85 71                sta     INDEX
00035Cr 1  84 72                sty     INDEX+1
00035Er 1  18                   clc
00035Fr 1               L23FA:
00035Fr 1  A0 01                ldy     #$01
000361r 1  B1 71                lda     (INDEX),y
000363r 1  D0 03 4C rr          jeq     L2351
000367r 1  rr           
000368r 1               
000368r 1  A0 04                ldy     #$04
00036Ar 1               L2405:
00036Ar 1  C8                   iny
00036Br 1  B1 71                lda     (INDEX),y
00036Dr 1  D0 FB                bne     L2405
00036Fr 1  C8                   iny
000370r 1  98                   tya
000371r 1  65 71                adc     INDEX
000373r 1  AA                   tax
000374r 1  A0 00                ldy     #$00
000376r 1  91 71                sta     (INDEX),y
000378r 1  A5 72                lda     INDEX+1
00037Ar 1  69 00                adc     #$00
00037Cr 1  C8                   iny
00037Dr 1  91 71                sta     (INDEX),y
00037Fr 1  86 71                stx     INDEX
000381r 1  85 72                sta     INDEX+1
000383r 1  90 DA                bcc     L23FA	; always
000385r 1               ; ----------------------------------------------------------------------------
000385r 1               L2420:
000385r 1  20 rr rr             jsr     OUTDO
000388r 1  CA                   dex
000389r 1  10 08                bpl     INLIN2
00038Br 1               L2423:
00038Br 1  20 rr rr             jsr     OUTDO
00038Er 1  20 rr rr             jsr     CRDO
000391r 1               ; ----------------------------------------------------------------------------
000391r 1               ; READ A LINE, AND STRIP OFF SIGN BITS
000391r 1               ; ----------------------------------------------------------------------------
000391r 1               INLIN:
000391r 1  A2 00                ldx     #$00
000393r 1               INLIN2:
000393r 1  20 rr rr             jsr     GETLN
000396r 1  C9 07                cmp     #$07
000398r 1  F0 14                beq     L2443
00039Ar 1  C9 0D                cmp     #$0D
00039Cr 1  F0 1F                beq     L2453
00039Er 1  C9 20                cmp     #$20
0003A0r 1  90 F1                bcc     INLIN2
0003A2r 1  C9 7D                cmp     #$7D
0003A4r 1  B0 ED                bcs     INLIN2
0003A6r 1  C9 40                cmp     #$40 ; @
0003A8r 1  F0 E1                beq     L2423
0003AAr 1  C9 5F                cmp     #$5F ; _
0003ACr 1  F0 D7                beq     L2420
0003AEr 1               L2443:
0003AEr 1  E0 47                cpx     #$47
0003B0r 1  B0 04                bcs     L244C
0003B2r 1  95 13                sta     INPUTBUFFER,x
0003B4r 1  E8                   inx
0003B5r 1  2C                   .byte   $2C
0003B6r 1               L244C:
0003B6r 1  A9 07                lda     #$07 ; BEL
0003B8r 1  20 rr rr             jsr     OUTDO
0003BBr 1  D0 D6                bne     INLIN2
0003BDr 1               L2453:
0003BDr 1  4C rr rr             jmp     L29B9
0003C0r 1               GETLN:
0003C0r 1  20 rr rr             jsr     MONRDKEY
0003C3r 1  EA                   nop
0003C4r 1  EA                   nop
0003C5r 1  EA                   nop
0003C6r 1  EA                   nop
0003C7r 1  EA                   nop
0003C8r 1  EA                   nop
0003C9r 1  EA                   nop
0003CAr 1  EA                   nop
0003CBr 1  EA                   nop
0003CCr 1  EA                   nop
0003CDr 1  EA                   nop
0003CEr 1  EA                   nop
0003CFr 1  EA                   nop
0003D0r 1  EA                   nop
0003D1r 1  29 7F                and     #$7F
0003D3r 1               RDKEY:
0003D3r 1  C9 0F                cmp     #$0F
0003D5r 1  D0 08                bne     L2465
0003D7r 1  48                   pha
0003D8r 1  A5 64                lda     Z14
0003DAr 1  49 FF                eor     #$FF
0003DCr 1  85 64                sta     Z14
0003DEr 1  68                   pla
0003DFr 1               L2465:
0003DFr 1  60                   rts
0003E0r 1               ; ----------------------------------------------------------------------------
0003E0r 1               ; TOKENIZE THE INPUT LINE
0003E0r 1               ; ----------------------------------------------------------------------------
0003E0r 1               PARSE_INPUT_LINE:
0003E0r 1  A6 C3                ldx     TXTPTR
0003E2r 1  A0 04                ldy     #$04
0003E4r 1  84 60                sty     DATAFLG
0003E6r 1               L246C:
0003E6r 1  B5 00                lda     INPUTBUFFERX,x
0003E8r 1  C9 20                cmp     #$20
0003EAr 1  F0 3A                beq     L24AC
0003ECr 1  85 5C                sta     ENDCHR
0003EEr 1  C9 22                cmp     #$22
0003F0r 1  F0 58                beq     L24D0
0003F2r 1  24 60                bit     DATAFLG
0003F4r 1  70 30                bvs     L24AC
0003F6r 1  C9 3F                cmp     #$3F
0003F8r 1  D0 04                bne     L2484
0003FAr 1  A9 97                lda     #TOKEN_PRINT
0003FCr 1  D0 28                bne     L24AC
0003FEr 1               L2484:
0003FEr 1  C9 30                cmp     #$30
000400r 1  90 04                bcc     L248C
000402r 1  C9 3C                cmp     #$3C
000404r 1  90 20                bcc     L24AC
000406r 1               ; ----------------------------------------------------------------------------
000406r 1               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
000406r 1               ; WITH CURRENT CHAR FROM INPUT LINE
000406r 1               ; ----------------------------------------------------------------------------
000406r 1               L248C:
000406r 1  84 BA                sty     STRNG2
000408r 1  A0 00                ldy     #$00
00040Ar 1  84 5D                sty     EOLPNTR
00040Cr 1  88                   dey
00040Dr 1  86 C3                stx     TXTPTR
00040Fr 1  CA                   dex
000410r 1               L2496:
000410r 1  C8                   iny
000411r 1               L2497:
000411r 1  E8                   inx
000412r 1               L2498:
000412r 1  B5 00                lda     INPUTBUFFERX,x
000414r 1  C9 20                cmp     #$20
000416r 1  F0 F9                beq     L2497
000418r 1  38                   sec
000419r 1  F9 rr rr             sbc     TOKEN_NAME_TABLE,y
00041Cr 1  F0 F2                beq     L2496
00041Er 1  C9 80                cmp     #$80
000420r 1  D0 2F                bne     L24D7
000422r 1  05 5D                ora     EOLPNTR
000424r 1               ; ----------------------------------------------------------------------------
000424r 1               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
000424r 1               ; ----------------------------------------------------------------------------
000424r 1               L24AA:
000424r 1  A4 BA                ldy     STRNG2
000426r 1               L24AC:
000426r 1  E8                   inx
000427r 1  C8                   iny
000428r 1  99 0E 00             sta     INPUTBUFFER-5,y
00042Br 1  B9 0E 00             lda     INPUTBUFFER-5,y
00042Er 1  F0 34                beq     L24EA
000430r 1  38                   sec
000431r 1  E9 3A                sbc     #$3A
000433r 1  F0 04                beq     L24BF
000435r 1  C9 49                cmp     #$49
000437r 1  D0 02                bne     L24C1
000439r 1               L24BF:
000439r 1  85 60                sta     DATAFLG
00043Br 1               L24C1:
00043Br 1  38                   sec
00043Cr 1  E9 54                sbc     #TOKEN_REM-':'
00043Er 1  D0 A6                bne     L246C
000440r 1  85 5C                sta     ENDCHR
000442r 1               ; ----------------------------------------------------------------------------
000442r 1               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
000442r 1               ; BY COPYING CHARS UP TO ENDCHR.
000442r 1               ; ----------------------------------------------------------------------------
000442r 1               L24C8:
000442r 1  B5 00                lda     INPUTBUFFERX,x
000444r 1  F0 E0                beq     L24AC
000446r 1  C5 5C                cmp     ENDCHR
000448r 1  F0 DC                beq     L24AC
00044Ar 1               L24D0:
00044Ar 1  C8                   iny
00044Br 1  99 0E 00             sta     INPUTBUFFER-5,y
00044Er 1  E8                   inx
00044Fr 1  D0 F1                bne     L24C8
000451r 1               ; ----------------------------------------------------------------------------
000451r 1               ; ADVANCE POINTER TO NEXT TOKEN NAME
000451r 1               ; ----------------------------------------------------------------------------
000451r 1               L24D7:
000451r 1  A6 C3                ldx     TXTPTR
000453r 1  E6 5D                inc     EOLPNTR
000455r 1               L24DB:
000455r 1  C8                   iny
000456r 1  B9 rr rr             lda     MATHTBL+28+1,y
000459r 1  10 FA                bpl     L24DB
00045Br 1  B9 rr rr             lda     TOKEN_NAME_TABLE,y
00045Er 1  D0 B2                bne     L2498
000460r 1  B5 00                lda     INPUTBUFFERX,x
000462r 1  10 C0                bpl     L24AA
000464r 1               ; ---END OF LINE------------------
000464r 1               L24EA:
000464r 1  99 10 00             sta     INPUTBUFFER-3,y
000467r 1  A9 12                lda     #<INPUTBUFFER-1
000469r 1  85 C3                sta     TXTPTR
00046Br 1  60                   rts
00046Cr 1               ; ----------------------------------------------------------------------------
00046Cr 1               ; SEARCH FOR LINE
00046Cr 1               ;
00046Cr 1               ; (LINNUM) = LINE # TO FIND
00046Cr 1               ; IF NOT FOUND:  CARRY = 0
00046Cr 1               ;	LOWTR POINTS AT NEXT LINE
00046Cr 1               ; IF FOUND:      CARRY = 1
00046Cr 1               ;	LOWTR POINTS AT LINE
00046Cr 1               ; ----------------------------------------------------------------------------
00046Cr 1               FNDLIN:
00046Cr 1  A5 79                lda     TXTTAB
00046Er 1  A6 7A                ldx     TXTTAB+1
000470r 1               FL1:
000470r 1  A0 01                ldy     #$01
000472r 1  85 AA                sta     LOWTR
000474r 1  86 AB                stx     LOWTR+1
000476r 1  B1 AA                lda     (LOWTR),y
000478r 1  F0 1F                beq     L251F
00047Ar 1  C8                   iny
00047Br 1  C8                   iny
00047Cr 1  A5 12                lda     LINNUM+1
00047Er 1  D1 AA                cmp     (LOWTR),y
000480r 1  90 18                bcc     L2520
000482r 1  F0 03                beq     L250D
000484r 1  88                   dey
000485r 1  D0 09                bne     L2516
000487r 1               L250D:
000487r 1  A5 11                lda     LINNUM
000489r 1  88                   dey
00048Ar 1  D1 AA                cmp     (LOWTR),y
00048Cr 1  90 0C                bcc     L2520
00048Er 1  F0 0A                beq     L2520
000490r 1               L2516:
000490r 1  88                   dey
000491r 1  B1 AA                lda     (LOWTR),y
000493r 1  AA                   tax
000494r 1  88                   dey
000495r 1  B1 AA                lda     (LOWTR),y
000497r 1  B0 D7                bcs     FL1
000499r 1               L251F:
000499r 1  18                   clc
00049Ar 1               L2520:
00049Ar 1  60                   rts
00049Br 1               ; ----------------------------------------------------------------------------
00049Br 1               ; "NEW" STATEMENT
00049Br 1               ; ----------------------------------------------------------------------------
00049Br 1               NEW:
00049Br 1  D0 FD                bne     L2520
00049Dr 1               SCRTCH:
00049Dr 1  A9 00                lda     #$00
00049Fr 1  A8                   tay
0004A0r 1  91 79                sta     (TXTTAB),y
0004A2r 1  C8                   iny
0004A3r 1  91 79                sta     (TXTTAB),y
0004A5r 1  A5 79                lda     TXTTAB
0004A7r 1  69 02                adc     #$02
0004A9r 1  85 7B                sta     VARTAB
0004ABr 1  A5 7A                lda     TXTTAB+1
0004ADr 1  69 00                adc     #$00
0004AFr 1  85 7C                sta     VARTAB+1
0004B1r 1               ; ----------------------------------------------------------------------------
0004B1r 1               SETPTRS:
0004B1r 1  20 rr rr             jsr     STXTPT
0004B4r 1               ; ----------------------------------------------------------------------------
0004B4r 1               ; "CLEAR" STATEMENT
0004B4r 1               ; ----------------------------------------------------------------------------
0004B4r 1               CLEARC:
0004B4r 1  A5 85                lda     MEMSIZ
0004B6r 1  A4 86                ldy     MEMSIZ+1
0004B8r 1  85 81                sta     FRETOP
0004BAr 1  84 82                sty     FRETOP+1
0004BCr 1  A5 7B                lda     VARTAB
0004BEr 1  A4 7C                ldy     VARTAB+1
0004C0r 1  85 7D                sta     ARYTAB
0004C2r 1  84 7E                sty     ARYTAB+1
0004C4r 1  85 7F                sta     STREND
0004C6r 1  84 80                sty     STREND+1
0004C8r 1  20 rr rr             jsr     RESTORE
0004CBr 1               ; ----------------------------------------------------------------------------
0004CBr 1               STKINI:
0004CBr 1  A2 68                ldx     #TEMPST
0004CDr 1  86 65                stx     TEMPPT
0004CFr 1  68                   pla
0004D0r 1  8D FD 01             sta     STACK+STACK_TOP+1
0004D3r 1  68                   pla
0004D4r 1  8D FE 01             sta     STACK+STACK_TOP+2
0004D7r 1  A2 FC                ldx     #STACK_TOP
0004D9r 1  9A                   txs
0004DAr 1  A9 00                lda     #$00
0004DCr 1  85 8C                sta     OLDTEXT+1
0004DEr 1  85 61                sta     SUBFLG
0004E0r 1               L256A:
0004E0r 1  60                   rts
0004E1r 1               ; ----------------------------------------------------------------------------
0004E1r 1               ; SET TXTPTR TO BEGINNING OF PROGRAM
0004E1r 1               ; ----------------------------------------------------------------------------
0004E1r 1               STXTPT:
0004E1r 1  18                   clc
0004E2r 1  A5 79                lda     TXTTAB
0004E4r 1  69 FF                adc     #$FF
0004E6r 1  85 C3                sta     TXTPTR
0004E8r 1  A5 7A                lda     TXTTAB+1
0004EAr 1  69 FF                adc     #$FF
0004ECr 1  85 C4                sta     TXTPTR+1
0004EEr 1  60                   rts
0004EFr 1               ; ----------------------------------------------------------------------------
0004EFr 1               ; ----------------------------------------------------------------------------
0004EFr 1               ; "LIST" STATEMENT
0004EFr 1               ; ----------------------------------------------------------------------------
0004EFr 1               LIST:
0004EFr 1  90 06                bcc     L2581
0004F1r 1  F0 04                beq     L2581
0004F3r 1  C9 A4                cmp     #TOKEN_MINUS
0004F5r 1  D0 E9                bne     L256A
0004F7r 1               L2581:
0004F7r 1  20 rr rr             jsr     LINGET
0004FAr 1  20 rr rr             jsr     FNDLIN
0004FDr 1  20 C2 00             jsr     CHRGOT
000500r 1  F0 0C                beq     L2598
000502r 1  C9 A4                cmp     #TOKEN_MINUS
000504r 1  D0 94                bne     L2520
000506r 1  20 BC 00             jsr     CHRGET
000509r 1  20 rr rr             jsr     LINGET
00050Cr 1  D0 8C                bne     L2520
00050Er 1               L2598:
00050Er 1  68                   pla
00050Fr 1  68                   pla
000510r 1  A5 11                lda     LINNUM
000512r 1  05 12                ora     LINNUM+1
000514r 1  D0 06                bne     L25A6
000516r 1  A9 FF                lda     #$FF
000518r 1  85 11                sta     LINNUM
00051Ar 1  85 12                sta     LINNUM+1
00051Cr 1               L25A6:
00051Cr 1  A0 01                ldy     #$01
00051Er 1  84 60                sty     DATAFLG
000520r 1  B1 AA                lda     (LOWTRX),y
000522r 1  F0 41                beq     L25E5
000524r 1  20 rr rr             jsr     ISCNTC
000527r 1  20 rr rr             jsr     CRDO
00052Ar 1  C8                   iny
00052Br 1  B1 AA                lda     (LOWTRX),y
00052Dr 1  AA                   tax
00052Er 1  C8                   iny
00052Fr 1  B1 AA                lda     (LOWTRX),y
000531r 1  C5 12                cmp     LINNUM+1
000533r 1  D0 04                bne     L25C1
000535r 1  E4 11                cpx     LINNUM
000537r 1  F0 02                beq     L25C3
000539r 1               L25C1:
000539r 1  B0 2A                bcs     L25E5
00053Br 1               ; ---LIST ONE LINE----------------
00053Br 1               L25C3:
00053Br 1  84 97                sty     FORPNT
00053Dr 1  20 rr rr             jsr     LINPRT
000540r 1  A9 20                lda     #$20
000542r 1               L25CA:
000542r 1  A4 97                ldy     FORPNT
000544r 1  29 7F                and     #$7F
000546r 1               L25CE:
000546r 1  20 rr rr             jsr     OUTDO
000549r 1  C9 22                cmp     #$22
00054Br 1  D0 06                bne     LA519
00054Dr 1  A5 60                lda     DATAFLG
00054Fr 1  49 FF                eor     #$FF
000551r 1  85 60                sta     DATAFLG
000553r 1               LA519:
000553r 1  C8                   iny
000554r 1  B1 AA                lda     (LOWTRX),y
000556r 1  D0 10                bne     L25E8
000558r 1  A8                   tay
000559r 1  B1 AA                lda     (LOWTRX),y
00055Br 1  AA                   tax
00055Cr 1  C8                   iny
00055Dr 1  B1 AA                lda     (LOWTRX),y
00055Fr 1  86 AA                stx     LOWTRX
000561r 1  85 AB                sta     LOWTRX+1
000563r 1  D0 B7                bne     L25A6
000565r 1               L25E5:
000565r 1  4C rr rr             jmp     RESTART
000568r 1               L25E8:
000568r 1  10 DC                bpl     L25CE
00056Ar 1  C9 FF                cmp     #$FF
00056Cr 1  F0 D8                beq     L25CE
00056Er 1  24 60                bit     DATAFLG
000570r 1  30 D4                bmi     L25CE
000572r 1  38                   sec
000573r 1  E9 7F                sbc     #$7F
000575r 1  AA                   tax
000576r 1  84 97                sty     FORPNT
000578r 1  A0 FF                ldy     #$FF
00057Ar 1               L25F2:
00057Ar 1  CA                   dex
00057Br 1  F0 08                beq     L25FD
00057Dr 1               L25F5:
00057Dr 1  C8                   iny
00057Er 1  B9 rr rr             lda     TOKEN_NAME_TABLE,y
000581r 1  10 FA                bpl     L25F5
000583r 1  30 F5                bmi     L25F2
000585r 1               L25FD:
000585r 1  C8                   iny
000586r 1  B9 rr rr             lda     TOKEN_NAME_TABLE,y
000589r 1  30 B7                bmi     L25CA
00058Br 1  20 rr rr             jsr     OUTDO
00058Er 1  D0 F5                bne     L25FD	; always
000590r 1               ; ----------------------------------------------------------------------------
000590r 1               ; "FOR" STATEMENT
000590r 1               ;
000590r 1               ; FOR PUSHES 18 BYTES ON THE STACK:
000590r 1               ; 2 -- TXTPTR
000590r 1               ; 2 -- LINE NUMBER
000590r 1               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
000590r 1               ; 1 -- STEP SIGN
000590r 1               ; 5 -- STEP VALUE
000590r 1               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
000590r 1               ; 1 -- FOR TOKEN ($81)
000590r 1               ; ----------------------------------------------------------------------------
000590r 1               FOR:
000590r 1  A9 80                lda     #$80
000592r 1  85 61                sta     SUBFLG
000594r 1  20 rr rr             jsr     LET
000597r 1  20 rr rr             jsr     GTFORPNT
00059Ar 1  D0 05                bne     L2619
00059Cr 1  8A                   txa
00059Dr 1  69 0D                adc     #FOR_STACK1
00059Fr 1  AA                   tax
0005A0r 1  9A                   txs
0005A1r 1               L2619:
0005A1r 1  68                   pla
0005A2r 1  68                   pla
0005A3r 1  A9 08                lda     #FOR_STACK2
0005A5r 1  20 rr rr             jsr     CHKMEM
0005A8r 1  20 rr rr             jsr     DATAN
0005ABr 1  18                   clc
0005ACr 1  98                   tya
0005ADr 1  65 C3                adc     TXTPTR
0005AFr 1  48                   pha
0005B0r 1  A5 C4                lda     TXTPTR+1
0005B2r 1  69 00                adc     #$00
0005B4r 1  48                   pha
0005B5r 1  A5 88                lda     CURLIN+1
0005B7r 1  48                   pha
0005B8r 1  A5 87                lda     CURLIN
0005BAr 1  48                   pha
0005BBr 1  A9 9D                lda     #TOKEN_TO
0005BDr 1  20 rr rr             jsr     SYNCHR
0005C0r 1  20 rr rr             jsr     CHKNUM
0005C3r 1  20 rr rr             jsr     FRMNUM
0005C6r 1  A5 B0                lda     FACSIGN
0005C8r 1  09 7F                ora     #$7F
0005CAr 1  25 AD                and     FAC+1
0005CCr 1  85 AD                sta     FAC+1
0005CEr 1  A9 rr                lda     #<STEP
0005D0r 1  A0 rr                ldy     #>STEP
0005D2r 1  85 71                sta     INDEX
0005D4r 1  84 72                sty     INDEX+1
0005D6r 1  4C rr rr             jmp     FRM_STACK3
0005D9r 1               ; ----------------------------------------------------------------------------
0005D9r 1               ; "STEP" PHRASE OF "FOR" STATEMENT
0005D9r 1               ; ----------------------------------------------------------------------------
0005D9r 1               STEP:
0005D9r 1  A9 rr                lda     #<CON_ONE
0005DBr 1  A0 rr                ldy     #>CON_ONE
0005DDr 1  20 rr rr             jsr     LOAD_FAC_FROM_YA
0005E0r 1  20 C2 00             jsr     CHRGOT
0005E3r 1  C9 A2                cmp     #TOKEN_STEP
0005E5r 1  D0 06                bne     L2665
0005E7r 1  20 BC 00             jsr     CHRGET
0005EAr 1  20 rr rr             jsr     FRMNUM
0005EDr 1               L2665:
0005EDr 1  20 rr rr             jsr     SIGN
0005F0r 1  20 rr rr             jsr     FRM_STACK2
0005F3r 1  A5 98                lda     FORPNT+1
0005F5r 1  48                   pha
0005F6r 1  A5 97                lda     FORPNT
0005F8r 1  48                   pha
0005F9r 1  A9 81                lda     #$81
0005FBr 1  48                   pha
0005FCr 1               ; ----------------------------------------------------------------------------
0005FCr 1               ; PERFORM NEXT STATEMENT
0005FCr 1               ; ----------------------------------------------------------------------------
0005FCr 1               NEWSTT:
0005FCr 1  20 rr rr             jsr     ISCNTC
0005FFr 1  A5 C3                lda     TXTPTR
000601r 1  A4 C4                ldy     TXTPTR+1
000603r 1  F0 06                beq     L2683
000605r 1  85 8B                sta     OLDTEXT
000607r 1  84 8C                sty     OLDTEXT+1
000609r 1  A0 00                ldy     #$00
00060Br 1               L2683:
00060Br 1  B1 C3                lda     (TXTPTR),y
00060Dr 1  F0 07                beq     LA5DC	; old: 1 cycle more on generic case
00060Fr 1  C9 3A                cmp     #$3A
000611r 1  F0 1D                beq     NEWSTT2
000613r 1               SYNERR1:
000613r 1  4C rr rr             jmp     SYNERR
000616r 1               LA5DC:
000616r 1  A0 02                ldy     #$02
000618r 1  B1 C3                lda     (TXTPTR),y
00061Ar 1  18                   clc
00061Br 1  F0 62                beq     L2701
00061Dr 1  C8                   iny
00061Er 1  B1 C3                lda     (TXTPTR),y
000620r 1  85 87                sta     CURLIN
000622r 1  C8                   iny
000623r 1  B1 C3                lda     (TXTPTR),y
000625r 1  85 88                sta     CURLIN+1
000627r 1  98                   tya
000628r 1  65 C3                adc     TXTPTR
00062Ar 1  85 C3                sta     TXTPTR
00062Cr 1  90 02                bcc     NEWSTT2
00062Er 1  E6 C4                inc     TXTPTR+1
000630r 1               NEWSTT2:
000630r 1  20 BC 00             jsr     CHRGET
000633r 1  20 rr rr             jsr     EXECUTE_STATEMENT
000636r 1  4C rr rr             jmp     NEWSTT
000639r 1               ; ----------------------------------------------------------------------------
000639r 1               ; EXECUTE A STATEMENT
000639r 1               ;
000639r 1               ; (A) IS FIRST CHAR OF STATEMENT
000639r 1               ; CARRY IS SET
000639r 1               ; ----------------------------------------------------------------------------
000639r 1               EXECUTE_STATEMENT:
000639r 1  F0 6D                beq     RET1
00063Br 1  38                   sec
00063Cr 1               EXECUTE_STATEMENT1:
00063Cr 1  E9 80                sbc     #$80
00063Er 1  B0 03 4C rr          jcc     LET	; old: 1 cycle more on instr.
000642r 1  rr           
000643r 1               
000643r 1  C9 1C                cmp     #NUM_TOKENS
000645r 1  B0 CC                bcs     SYNERR1
000647r 1  0A                   asl     a
000648r 1  A8                   tay
000649r 1  B9 rr rr             lda     TOKEN_ADDRESS_TABLE+1,y
00064Cr 1  48                   pha
00064Dr 1  B9 rr rr             lda     TOKEN_ADDRESS_TABLE,y
000650r 1  48                   pha
000651r 1  4C BC 00             jmp     CHRGET
000654r 1               ; ----------------------------------------------------------------------------
000654r 1               ; "RESTORE" STATEMENT
000654r 1               ; ----------------------------------------------------------------------------
000654r 1               RESTORE:
000654r 1  38                   sec
000655r 1  A5 79                lda     TXTTAB
000657r 1  E9 01                sbc     #$01
000659r 1  A4 7A                ldy     TXTTAB+1
00065Br 1  B0 01                bcs     SETDA
00065Dr 1  88                   dey
00065Er 1               SETDA:
00065Er 1  85 8F                sta     DATPTR
000660r 1  84 90                sty     DATPTR+1
000662r 1  60                   rts
000663r 1               ; ----------------------------------------------------------------------------
000663r 1               ; SEE IF CONTROL-C TYPED
000663r 1               ; ----------------------------------------------------------------------------
000663r 1               
000663r 1               ISCNTC:
000663r 1               ; MODIFIED CALL BY G.SEARLE FROM THE ORIGINAL OSI CODE
000663r 1  20 rr rr             jsr     MONISCNTC
000666r 1               ; runs into "STOP"
000666r 1               ; ----------------------------------------------------------------------------
000666r 1               ; "STOP" STATEMENT
000666r 1               ; ----------------------------------------------------------------------------
000666r 1               STOP:
000666r 1  B0 01                bcs     END2
000668r 1               ; ----------------------------------------------------------------------------
000668r 1               ; "END" STATEMENT
000668r 1               ; ----------------------------------------------------------------------------
000668r 1               END:
000668r 1  18                   clc
000669r 1               END2:
000669r 1  D0 3D                bne     RET1
00066Br 1  A5 C3                lda     TXTPTR
00066Dr 1  A4 C4                ldy     TXTPTR+1
00066Fr 1  F0 0C                beq     END4
000671r 1  85 8B                sta     OLDTEXT
000673r 1  84 8C                sty     OLDTEXT+1
000675r 1               CONTROL_C_TYPED:
000675r 1  A5 87                lda     CURLIN
000677r 1  A4 88                ldy     CURLIN+1
000679r 1  85 89                sta     OLDLIN
00067Br 1  84 8A                sty     OLDLIN+1
00067Dr 1               END4:
00067Dr 1  68                   pla
00067Er 1  68                   pla
00067Fr 1               L2701:
00067Fr 1  A9 rr                lda     #<QT_BREAK
000681r 1  A0 rr                ldy     #>QT_BREAK
000683r 1  A2 00                ldx     #$00
000685r 1  86 64                stx     Z14
000687r 1  90 03                bcc     L270E
000689r 1  4C rr rr             jmp     PRINT_ERROR_LINNUM
00068Cr 1               L270E:
00068Cr 1  4C rr rr             jmp     RESTART
00068Fr 1               ; ----------------------------------------------------------------------------
00068Fr 1               ; "CONT" COMMAND
00068Fr 1               ; ----------------------------------------------------------------------------
00068Fr 1               CONT:
00068Fr 1  D0 17                bne     RET1
000691r 1  A2 1E                ldx     #ERR_CANTCONT
000693r 1  A4 8C                ldy     OLDTEXT+1
000695r 1  D0 03                bne     L271C
000697r 1  4C rr rr             jmp     ERROR
00069Ar 1               L271C:
00069Ar 1  A5 8B                lda     OLDTEXT
00069Cr 1  85 C3                sta     TXTPTR
00069Er 1  84 C4                sty     TXTPTR+1
0006A0r 1  A5 89                lda     OLDLIN
0006A2r 1  A4 8A                ldy     OLDLIN+1
0006A4r 1  85 87                sta     CURLIN
0006A6r 1  84 88                sty     CURLIN+1
0006A8r 1               RET1:
0006A8r 1  60                   rts
0006A9r 1               NULL:
0006A9r 1  20 rr rr             jsr     GETBYT
0006ACr 1  D0 FA                bne     RET1
0006AEr 1  E8                   inx
0006AFr 1  E0 0A                cpx     #NULL_MAX
0006B1r 1  B0 04                bcs     L2739
0006B3r 1  CA                   dex
0006B4r 1  86 0D                stx     Z15
0006B6r 1  60                   rts
0006B7r 1               L2739:
0006B7r 1  4C rr rr             jmp     IQERR
0006BAr 1               CLEAR:
0006BAr 1  D0 EC                bne     RET1
0006BCr 1  4C rr rr             jmp     CLEARC
0006BFr 1               ; ----------------------------------------------------------------------------
0006BFr 1               ; "RUN" COMMAND
0006BFr 1               ; ----------------------------------------------------------------------------
0006BFr 1               RUN:
0006BFr 1  D0 03                bne     L27CF
0006C1r 1  4C rr rr             jmp     SETPTRS
0006C4r 1               L27CF:
0006C4r 1  20 rr rr             jsr     CLEARC
0006C7r 1  4C rr rr             jmp     L27E9
0006CAr 1               ; ----------------------------------------------------------------------------
0006CAr 1               ; "GOSUB" STATEMENT
0006CAr 1               ;
0006CAr 1               ; LEAVES 7 BYTES ON STACK:
0006CAr 1               ; 2 -- RETURN ADDRESS (NEWSTT)
0006CAr 1               ; 2 -- TXTPTR
0006CAr 1               ; 2 -- LINE #
0006CAr 1               ; 1 -- GOSUB TOKEN
0006CAr 1               ; ----------------------------------------------------------------------------
0006CAr 1               GOSUB:
0006CAr 1  A9 03                lda     #$03
0006CCr 1  20 rr rr             jsr     CHKMEM
0006CFr 1  A5 C4                lda     TXTPTR+1
0006D1r 1  48                   pha
0006D2r 1  A5 C3                lda     TXTPTR
0006D4r 1  48                   pha
0006D5r 1  A5 88                lda     CURLIN+1
0006D7r 1  48                   pha
0006D8r 1  A5 87                lda     CURLIN
0006DAr 1  48                   pha
0006DBr 1  A9 8C                lda     #TOKEN_GOSUB
0006DDr 1  48                   pha
0006DEr 1               L27E9:
0006DEr 1  20 C2 00             jsr     CHRGOT
0006E1r 1  20 rr rr             jsr     GOTO
0006E4r 1  4C rr rr             jmp     NEWSTT
0006E7r 1               ; ----------------------------------------------------------------------------
0006E7r 1               ; "GOTO" STATEMENT
0006E7r 1               ; ALSO USED BY "RUN" AND "GOSUB"
0006E7r 1               ; ----------------------------------------------------------------------------
0006E7r 1               GOTO:
0006E7r 1  20 rr rr             jsr     LINGET
0006EAr 1  20 rr rr             jsr     REMN
0006EDr 1  A5 88                lda     CURLIN+1
0006EFr 1  C5 12                cmp     LINNUM+1
0006F1r 1  B0 0B                bcs     L2809
0006F3r 1  98                   tya
0006F4r 1  38                   sec
0006F5r 1  65 C3                adc     TXTPTR
0006F7r 1  A6 C4                ldx     TXTPTR+1
0006F9r 1  90 07                bcc     L280D
0006FBr 1  E8                   inx
0006FCr 1  B0 04                bcs     L280D
0006FEr 1               L2809:
0006FEr 1  A5 79                lda     TXTTAB
000700r 1  A6 7A                ldx     TXTTAB+1
000702r 1               L280D:
000702r 1  20 rr rr             jsr     FL1
000705r 1  90 1E                bcc     UNDERR
000707r 1  A5 AA                lda     LOWTRX
000709r 1  E9 01                sbc     #$01
00070Br 1  85 C3                sta     TXTPTR
00070Dr 1  A5 AB                lda     LOWTRX+1
00070Fr 1  E9 00                sbc     #$00
000711r 1  85 C4                sta     TXTPTR+1
000713r 1               L281E:
000713r 1  60                   rts
000714r 1               ; ----------------------------------------------------------------------------
000714r 1               ; "POP" AND "RETURN" STATEMENTS
000714r 1               ; ----------------------------------------------------------------------------
000714r 1               POP:
000714r 1  D0 FD                bne     L281E
000716r 1  A9 FF                lda     #$FF
000718r 1  85 97                sta     FORPNT
00071Ar 1  20 rr rr             jsr     GTFORPNT
00071Dr 1  9A                   txs
00071Er 1  C9 8C                cmp     #TOKEN_GOSUB
000720r 1  F0 0B                beq     RETURN
000722r 1  A2 04                ldx     #ERR_NOGOSUB
000724r 1  2C                   .byte   $2C
000725r 1               UNDERR:
000725r 1  A2 0E                ldx     #ERR_UNDEFSTAT
000727r 1  4C rr rr             jmp     ERROR
00072Ar 1               ; ----------------------------------------------------------------------------
00072Ar 1               SYNERR2:
00072Ar 1  4C rr rr             jmp     SYNERR
00072Dr 1               ; ----------------------------------------------------------------------------
00072Dr 1               RETURN:
00072Dr 1  68                   pla
00072Er 1  68                   pla
00072Fr 1  85 87                sta     CURLIN
000731r 1  68                   pla
000732r 1  85 88                sta     CURLIN+1
000734r 1  68                   pla
000735r 1  85 C3                sta     TXTPTR
000737r 1  68                   pla
000738r 1  85 C4                sta     TXTPTR+1
00073Ar 1               ; ----------------------------------------------------------------------------
00073Ar 1               ; "DATA" STATEMENT
00073Ar 1               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
00073Ar 1               ; ----------------------------------------------------------------------------
00073Ar 1               DATA:
00073Ar 1  20 rr rr             jsr     DATAN
00073Dr 1               ; ----------------------------------------------------------------------------
00073Dr 1               ; ADD (Y) TO TXTPTR
00073Dr 1               ; ----------------------------------------------------------------------------
00073Dr 1               ADDON:
00073Dr 1  98                   tya
00073Er 1  18                   clc
00073Fr 1  65 C3                adc     TXTPTR
000741r 1  85 C3                sta     TXTPTR
000743r 1  90 02                bcc     L2852
000745r 1  E6 C4                inc     TXTPTR+1
000747r 1               L2852:
000747r 1  60                   rts
000748r 1               ; ----------------------------------------------------------------------------
000748r 1               ; SCAN AHEAD TO NEXT ":" OR EOL
000748r 1               ; ----------------------------------------------------------------------------
000748r 1               DATAN:
000748r 1  A2 3A                ldx     #$3A
00074Ar 1  2C                   .byte   $2C
00074Br 1               REMN:
00074Br 1  A2 00                ldx     #$00
00074Dr 1  86 5B                stx     CHARAC
00074Fr 1  A0 00                ldy     #$00
000751r 1  84 5C                sty     ENDCHR
000753r 1               L285E:
000753r 1  A5 5C                lda     ENDCHR
000755r 1  A6 5B                ldx     CHARAC
000757r 1  85 5B                sta     CHARAC
000759r 1  86 5C                stx     ENDCHR
00075Br 1               L2866:
00075Br 1  B1 C3                lda     (TXTPTR),y
00075Dr 1  F0 E8                beq     L2852
00075Fr 1  C5 5C                cmp     ENDCHR
000761r 1  F0 E4                beq     L2852
000763r 1  C8                   iny
000764r 1  C9 22                cmp     #$22
000766r 1  F0 EB                beq     L285E; old: swap & cont is faster
000768r 1  D0 F1                bne     L2866
00076Ar 1               ; ----------------------------------------------------------------------------
00076Ar 1               ; "IF" STATEMENT
00076Ar 1               ; ----------------------------------------------------------------------------
00076Ar 1               IF:
00076Ar 1  20 rr rr             jsr     FRMEVL
00076Dr 1  20 C2 00             jsr     CHRGOT
000770r 1  C9 88                cmp     #TOKEN_GOTO
000772r 1  F0 05                beq     L2884
000774r 1  A9 A0                lda     #TOKEN_THEN
000776r 1  20 rr rr             jsr     SYNCHR
000779r 1               L2884:
000779r 1  A5 AC                lda     FAC
00077Br 1  D0 05                bne     L288D
00077Dr 1               ; ----------------------------------------------------------------------------
00077Dr 1               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
00077Dr 1               ; ----------------------------------------------------------------------------
00077Dr 1               REM:
00077Dr 1  20 rr rr             jsr     REMN
000780r 1  F0 BB                beq     ADDON
000782r 1               L288D:
000782r 1  20 C2 00             jsr     CHRGOT
000785r 1  B0 03                bcs     L2895
000787r 1  4C rr rr             jmp     GOTO
00078Ar 1               L2895:
00078Ar 1  4C rr rr             jmp     EXECUTE_STATEMENT
00078Dr 1               ; ----------------------------------------------------------------------------
00078Dr 1               ; "ON" STATEMENT
00078Dr 1               ;
00078Dr 1               ; ON <EXP> GOTO <LIST>
00078Dr 1               ; ON <EXP> GOSUB <LIST>
00078Dr 1               ; ----------------------------------------------------------------------------
00078Dr 1               ON:
00078Dr 1  20 rr rr             jsr     GETBYT
000790r 1  48                   pha
000791r 1  C9 8C                cmp     #TOKEN_GOSUB
000793r 1  F0 04                beq     L28A4
000795r 1               L28A0:
000795r 1  C9 88                cmp     #TOKEN_GOTO
000797r 1  D0 91                bne     SYNERR2
000799r 1               L28A4:
000799r 1  C6 AF                dec     FAC_LAST
00079Br 1  D0 04                bne     L28AC
00079Dr 1  68                   pla
00079Er 1  4C rr rr             jmp     EXECUTE_STATEMENT1
0007A1r 1               L28AC:
0007A1r 1  20 BC 00             jsr     CHRGET
0007A4r 1  20 rr rr             jsr     LINGET
0007A7r 1  C9 2C                cmp     #$2C
0007A9r 1  F0 EE                beq     L28A4
0007ABr 1  68                   pla
0007ACr 1               L28B7:
0007ACr 1  60                   rts
0007ADr 1               ; ----------------------------------------------------------------------------
0007ADr 1               ; CONVERT LINE NUMBER
0007ADr 1               ; ----------------------------------------------------------------------------
0007ADr 1               LINGET:
0007ADr 1  A2 00                ldx     #$00
0007AFr 1  86 11                stx     LINNUM
0007B1r 1  86 12                stx     LINNUM+1
0007B3r 1               L28BE:
0007B3r 1  B0 F7                bcs     L28B7
0007B5r 1  E9 2F                sbc     #$2F
0007B7r 1  85 5B                sta     CHARAC
0007B9r 1  A5 12                lda     LINNUM+1
0007BBr 1  85 71                sta     INDEX
0007BDr 1  C9 19                cmp     #$19
0007BFr 1  B0 D4                bcs     L28A0
0007C1r 1               ; <<<<<DANGEROUS CODE>>>>>
0007C1r 1               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
0007C1r 1               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
0007C1r 1               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
0007C1r 1               ; FOR OTHER CALLS TO LINGET.
0007C1r 1               ;
0007C1r 1               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
0007C1r 1               ; THEN TYPE "GO TO 437761".
0007C1r 1               ;
0007C1r 1               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
0007C1r 1               ; THE PROBLEM.  ($AB00 - $ABFF)
0007C1r 1               ; <<<<<DANGEROUS CODE>>>>>
0007C1r 1  A5 11                lda     LINNUM
0007C3r 1  0A                   asl     a
0007C4r 1  26 71                rol     INDEX
0007C6r 1  0A                   asl     a
0007C7r 1  26 71                rol     INDEX
0007C9r 1  65 11                adc     LINNUM
0007CBr 1  85 11                sta     LINNUM
0007CDr 1  A5 71                lda     INDEX
0007CFr 1  65 12                adc     LINNUM+1
0007D1r 1  85 12                sta     LINNUM+1
0007D3r 1  06 11                asl     LINNUM
0007D5r 1  26 12                rol     LINNUM+1
0007D7r 1  A5 11                lda     LINNUM
0007D9r 1  65 5B                adc     CHARAC
0007DBr 1  85 11                sta     LINNUM
0007DDr 1  90 02                bcc     L28EC
0007DFr 1  E6 12                inc     LINNUM+1
0007E1r 1               L28EC:
0007E1r 1  20 BC 00             jsr     CHRGET
0007E4r 1  4C rr rr             jmp     L28BE
0007E7r 1               ; ----------------------------------------------------------------------------
0007E7r 1               ; "LET" STATEMENT
0007E7r 1               ;
0007E7r 1               ; LET <VAR> = <EXP>
0007E7r 1               ; <VAR> = <EXP>
0007E7r 1               ; ----------------------------------------------------------------------------
0007E7r 1               LET:
0007E7r 1  20 rr rr             jsr     PTRGET
0007EAr 1  85 97                sta     FORPNT
0007ECr 1  84 98                sty     FORPNT+1
0007EEr 1  A9 AB                lda     #TOKEN_EQUAL
0007F0r 1  20 rr rr             jsr     SYNCHR
0007F3r 1  A5 5F                lda     VALTYP
0007F5r 1  48                   pha
0007F6r 1  20 rr rr             jsr     FRMEVL
0007F9r 1  68                   pla
0007FAr 1  2A                   rol     a
0007FBr 1  20 rr rr             jsr     CHKVAL
0007FEr 1  D0 03                bne     LETSTRING
000800r 1               ; ----------------------------------------------------------------------------
000800r 1               ; REAL VARIABLE = EXPRESSION
000800r 1               ; ----------------------------------------------------------------------------
000800r 1  4C rr rr             jmp     SETFOR
000803r 1               LETSTRING:
000803r 1               ; ----------------------------------------------------------------------------
000803r 1               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
000803r 1               ; ----------------------------------------------------------------------------
000803r 1  A0 02                ldy     #$02
000805r 1  B1 AE                lda     (FAC_LAST-1),y
000807r 1  C5 82                cmp     FRETOP+1
000809r 1  90 17                bcc     L2946
00080Br 1  D0 07                bne     L2938
00080Dr 1  88                   dey
00080Er 1  B1 AE                lda     (FAC_LAST-1),y
000810r 1  C5 81                cmp     FRETOP
000812r 1  90 0E                bcc     L2946
000814r 1               L2938:
000814r 1  A4 AF                ldy     FAC_LAST
000816r 1  C4 7C                cpy     VARTAB+1
000818r 1  90 08                bcc     L2946
00081Ar 1  D0 0D                bne     L294D
00081Cr 1  A5 AE                lda     FAC_LAST-1
00081Er 1  C5 7B                cmp     VARTAB
000820r 1  B0 07                bcs     L294D
000822r 1               L2946:
000822r 1  A5 AE                lda     FAC_LAST-1
000824r 1  A4 AF                ldy     FAC_LAST
000826r 1  4C rr rr             jmp     L2963
000829r 1               L294D:
000829r 1  A0 00                ldy     #$00
00082Br 1  B1 AE                lda     (FAC_LAST-1),y
00082Dr 1  20 rr rr             jsr     STRINI
000830r 1  A5 9E                lda     DSCPTR
000832r 1  A4 9F                ldy     DSCPTR+1
000834r 1  85 B8                sta     STRNG1
000836r 1  84 B9                sty     STRNG1+1
000838r 1  20 rr rr             jsr     MOVINS
00083Br 1  A9 AC                lda     #FAC
00083Dr 1  A0 00                ldy     #$00
00083Fr 1               L2963:
00083Fr 1  85 9E                sta     DSCPTR
000841r 1  84 9F                sty     DSCPTR+1
000843r 1  20 rr rr             jsr     FRETMS
000846r 1  A0 00                ldy     #$00
000848r 1  B1 9E                lda     (DSCPTR),y
00084Ar 1  91 97                sta     (FORPNT),y
00084Cr 1  C8                   iny
00084Dr 1  B1 9E                lda     (DSCPTR),y
00084Fr 1  91 97                sta     (FORPNT),y
000851r 1  C8                   iny
000852r 1  B1 9E                lda     (DSCPTR),y
000854r 1  91 97                sta     (FORPNT),y
000856r 1  60                   rts
000857r 1               PRSTRING:
000857r 1  20 rr rr             jsr     STRPRT
00085Ar 1               L297E:
00085Ar 1  20 C2 00             jsr     CHRGOT
00085Dr 1               ; ----------------------------------------------------------------------------
00085Dr 1               ; "PRINT" STATEMENT
00085Dr 1               ; ----------------------------------------------------------------------------
00085Dr 1               PRINT:
00085Dr 1  F0 3B                beq     CRDO
00085Fr 1               PRINT2:
00085Fr 1  F0 57                beq     L29DD
000861r 1  C9 9C                cmp     #TOKEN_TAB
000863r 1  F0 6B                beq     L29F5
000865r 1  C9 9F                cmp     #TOKEN_SPC
000867r 1  F0 67                beq     L29F5
000869r 1  C9 2C                cmp     #','
00086Br 1  F0 4C                beq     L29DE
00086Dr 1  C9 3B                cmp     #$3B
00086Fr 1  F0 7A                beq     L2A0D
000871r 1  20 rr rr             jsr     FRMEVL
000874r 1  24 5F                bit     VALTYP
000876r 1  30 DF                bmi     PRSTRING
000878r 1  20 rr rr             jsr     FOUT
00087Br 1  20 rr rr             jsr     STRLIT
00087Er 1  A0 00                ldy     #$00
000880r 1  B1 AE                lda     (FAC_LAST-1),y
000882r 1  18                   clc
000883r 1  65 0E                adc     POSX
000885r 1  C5 0F                cmp     Z17
000887r 1  90 03                bcc     L29B1
000889r 1  20 rr rr             jsr     CRDO
00088Cr 1               L29B1:
00088Cr 1  20 rr rr             jsr     STRPRT
00088Fr 1  20 rr rr             jsr     OUTSP
000892r 1  D0 C6                bne     L297E ; branch always
000894r 1               L29B9:
000894r 1  A0 00                ldy     #$00
000896r 1  94 13                sty     INPUTBUFFER,x
000898r 1  A2 12                ldx     #LINNUM+1
00089Ar 1               CRDO:
00089Ar 1  A9 0D                lda     #CRLF_1
00089Cr 1  85 0E                sta     POSX
00089Er 1  20 rr rr             jsr     OUTDO
0008A1r 1  A9 0A                lda     #CRLF_2
0008A3r 1  20 rr rr             jsr     OUTDO
0008A6r 1               PRINTNULLS:
0008A6r 1  8A                   txa
0008A7r 1  48                   pha
0008A8r 1  A6 0D                ldx     Z15
0008AAr 1  F0 08                beq     L29D9
0008ACr 1  A9 00                lda     #$00
0008AEr 1               L29D3:
0008AEr 1  20 rr rr             jsr     OUTDO
0008B1r 1  CA                   dex
0008B2r 1  D0 FA                bne     L29D3
0008B4r 1               L29D9:
0008B4r 1  86 0E                stx     POSX
0008B6r 1  68                   pla
0008B7r 1  AA                   tax
0008B8r 1               L29DD:
0008B8r 1  60                   rts
0008B9r 1               L29DE:
0008B9r 1  A5 0E                lda     POSX
0008BBr 1  C5 10                cmp     Z18
0008BDr 1  90 06                bcc     L29EA
0008BFr 1  20 rr rr             jsr     CRDO
0008C2r 1  4C rr rr             jmp     L2A0D
0008C5r 1               L29EA:
0008C5r 1  38                   sec
0008C6r 1               L29EB:
0008C6r 1  E9 0E                sbc     #$0E
0008C8r 1  B0 FC                bcs     L29EB
0008CAr 1  49 FF                eor     #$FF
0008CCr 1  69 01                adc     #$01
0008CEr 1  D0 14                bne     L2A08
0008D0r 1               L29F5:
0008D0r 1  48                   pha
0008D1r 1  20 rr rr             jsr     GTBYTC
0008D4r 1  C9 29                cmp     #')'
0008D6r 1  D0 66                bne     SYNERR4
0008D8r 1  68                   pla
0008D9r 1  C9 9C                cmp     #TOKEN_TAB
0008DBr 1  D0 08                bne     L2A0A
0008DDr 1  8A                   txa
0008DEr 1  E5 0E                sbc     POSX
0008E0r 1  90 09                bcc     L2A0D
0008E2r 1  F0 07                beq     L2A0D
0008E4r 1               L2A08:
0008E4r 1  AA                   tax
0008E5r 1               L2A0A:
0008E5r 1  20 rr rr             jsr     OUTSP
0008E8r 1  CA                   dex
0008E9r 1  D0 FA                bne     L2A0A
0008EBr 1               L2A0D:
0008EBr 1  20 BC 00             jsr     CHRGET
0008EEr 1  4C rr rr             jmp     PRINT2
0008F1r 1               ; ----------------------------------------------------------------------------
0008F1r 1               ; PRINT STRING AT (Y,A)
0008F1r 1               ; ----------------------------------------------------------------------------
0008F1r 1               STROUT:
0008F1r 1  20 rr rr             jsr     STRLIT
0008F4r 1               ; ----------------------------------------------------------------------------
0008F4r 1               ; PRINT STRING AT (FACMO,FACLO)
0008F4r 1               ; ----------------------------------------------------------------------------
0008F4r 1               STRPRT:
0008F4r 1  20 rr rr             jsr     FREFAC
0008F7r 1  AA                   tax
0008F8r 1  A0 00                ldy     #$00
0008FAr 1  E8                   inx
0008FBr 1               L2A22:
0008FBr 1  CA                   dex
0008FCr 1  F0 BA                beq     L29DD
0008FEr 1  B1 71                lda     (INDEX),y
000900r 1  20 rr rr             jsr     OUTDO
000903r 1  C8                   iny
000904r 1  C9 0D                cmp     #$0D
000906r 1  D0 F3                bne     L2A22
000908r 1  20 rr rr             jsr     PRINTNULLS
00090Br 1  4C rr rr             jmp     L2A22
00090Er 1               ; ----------------------------------------------------------------------------
00090Er 1               OUTSP:
00090Er 1  A9 20                lda     #$20
000910r 1  2C                   .byte   $2C
000911r 1               OUTQUES:
000911r 1  A9 3F                lda     #$3F
000913r 1               ; ----------------------------------------------------------------------------
000913r 1               ; PRINT CHAR FROM (A)
000913r 1               ; ----------------------------------------------------------------------------
000913r 1               OUTDO:
000913r 1  24 64                bit     Z14
000915r 1  30 18                bmi     L2A56
000917r 1               ; Commodore forgot to remove this in CBM1
000917r 1  48                   pha
000918r 1  C9 20                cmp     #$20
00091Ar 1  90 0B                bcc     L2A4E
00091Cr 1  A5 0E                lda     POSX
00091Er 1  C5 0F                cmp     Z17
000920r 1  D0 03                bne     L2A4C
000922r 1  20 rr rr             jsr     CRDO
000925r 1               L2A4C:
000925r 1  E6 0E                inc     POSX
000927r 1               L2A4E:
000927r 1               ; Commodore forgot to remove this in CBM1
000927r 1  68                   pla
000928r 1  20 rr rr             jsr     MONCOUT
00092Br 1  EA                   nop
00092Cr 1  EA                   nop
00092Dr 1  EA                   nop
00092Er 1  EA                   nop
00092Fr 1               L2A56:
00092Fr 1  29 FF                and     #$FF
000931r 1  60                   rts
000932r 1               ; ----------------------------------------------------------------------------
000932r 1               ; ???
000932r 1               ; ----------------------------------------------------------------------------
000932r 1               ; ----------------------------------------------------------------------------
000932r 1               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
000932r 1               ; IN NUMERIC FIELD.  MUST DISTINGUISH
000932r 1               ; BETWEEN INPUT, READ, AND GET
000932r 1               ; ----------------------------------------------------------------------------
000932r 1               INPUTERR:
000932r 1  A5 62                lda     INPUTFLG
000934r 1  F0 0B                beq     RESPERR	; INPUT
000936r 1               ; without this, it treats GET errors
000936r 1               ; like READ errors
000936r 1  A5 8D                lda     Z8C
000938r 1  A4 8E                ldy     Z8C+1
00093Ar 1  85 87                sta     CURLIN
00093Cr 1  84 88                sty     CURLIN+1
00093Er 1               SYNERR4:
00093Er 1  4C rr rr             jmp     SYNERR
000941r 1               RESPERR:
000941r 1  A9 rr                lda     #<ERRREENTRY
000943r 1  A0 rr                ldy     #>ERRREENTRY
000945r 1  20 rr rr             jsr     STROUT
000948r 1  A5 8B                lda     OLDTEXT
00094Ar 1  A4 8C                ldy     OLDTEXT+1
00094Cr 1  85 C3                sta     TXTPTR
00094Er 1  84 C4                sty     TXTPTR+1
000950r 1  60                   rts
000951r 1               ; ----------------------------------------------------------------------------
000951r 1               ; "GET" STATEMENT
000951r 1               ; ----------------------------------------------------------------------------
000951r 1               GET:
000951r 1               ; ----------------------------------------------------------------------------
000951r 1               ; "INPUT#" STATEMENT
000951r 1               ; ----------------------------------------------------------------------------
000951r 1               ; ----------------------------------------------------------------------------
000951r 1               ; "INPUT" STATEMENT
000951r 1               ; ----------------------------------------------------------------------------
000951r 1               INPUT:
000951r 1  46 64                lsr     Z14
000953r 1  C9 22                cmp     #$22
000955r 1  D0 0B                bne     L2A9E
000957r 1  20 rr rr             jsr     STRTXT
00095Ar 1  A9 3B                lda     #$3B
00095Cr 1  20 rr rr             jsr     SYNCHR
00095Fr 1  20 rr rr             jsr     STRPRT
000962r 1               L2A9E:
000962r 1  20 rr rr             jsr     ERRDIR
000965r 1  A9 2C                lda     #$2C
000967r 1  85 12                sta     INPUTBUFFER-1
000969r 1  20 rr rr             jsr     NXIN
00096Cr 1  A5 13                lda     INPUTBUFFER
00096Er 1  D0 12                bne     L2ABE
000970r 1  18                   clc
000971r 1  4C rr rr             jmp     CONTROL_C_TYPED
000974r 1               NXIN:
000974r 1  20 rr rr             jsr     OUTQUES	; '?'
000977r 1  20 rr rr             jsr     OUTSP
00097Ar 1  4C rr rr             jmp     INLIN
00097Dr 1               ; ----------------------------------------------------------------------------
00097Dr 1               ; "GETC" STATEMENT
00097Dr 1               ; ----------------------------------------------------------------------------
00097Dr 1               ; ----------------------------------------------------------------------------
00097Dr 1               ; "READ" STATEMENT
00097Dr 1               ; ----------------------------------------------------------------------------
00097Dr 1               READ:
00097Dr 1  A6 8F                ldx     DATPTR
00097Fr 1  A4 90                ldy     DATPTR+1
000981r 1               ; AppleSoft II, too
000981r 1  A9                   .byte   $A9	; LDA #$98
000982r 1               L2ABE:
000982r 1  98                   tya
000983r 1               ; ----------------------------------------------------------------------------
000983r 1               ; PROCESS INPUT LIST
000983r 1               ;
000983r 1               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
000983r 1               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
000983r 1               ; 				$40 FOR GET
000983r 1               ;				$98 FOR READ
000983r 1               ; ----------------------------------------------------------------------------
000983r 1  85 62                sta     INPUTFLG
000985r 1  86 91                stx     INPTR
000987r 1  84 92                sty     INPTR+1
000989r 1               PROCESS_INPUT_ITEM:
000989r 1  20 rr rr             jsr     PTRGET
00098Cr 1  85 97                sta     FORPNT
00098Er 1  84 98                sty     FORPNT+1
000990r 1  A5 C3                lda     TXTPTR
000992r 1  A4 C4                ldy     TXTPTR+1
000994r 1  85 11                sta     TXPSV
000996r 1  84 12                sty     TXPSV+1
000998r 1  A6 91                ldx     INPTR
00099Ar 1  A4 92                ldy     INPTR+1
00099Cr 1  86 C3                stx     TXTPTR
00099Er 1  84 C4                sty     TXTPTR+1
0009A0r 1  20 C2 00             jsr     CHRGOT
0009A3r 1  D0 0E                bne     INSTART
0009A5r 1  24 62                bit     INPUTFLG
0009A7r 1               ; BUG: The beq/bne L2AF8 below is supposed
0009A7r 1               ; to be always taken. For this to happen,
0009A7r 1               ; the last load must be a 0 for beq
0009A7r 1               ; and != 0 for bne. The original Microsoft
0009A7r 1               ; code had ldx/ldy/bne here, which was only
0009A7r 1               ; correct for a non-ZP INPUTBUFFER. Commodore
0009A7r 1               ; fixed it in CBMBASIC V1 by swapping the
0009A7r 1               ; ldx and the ldy. It was broken on KIM,
0009A7r 1               ; but okay on APPLE and CBM2, because
0009A7r 1               ; these used a non-ZP INPUTBUFFER.
0009A7r 1               ; Microsoft fixed this somewhere after KIM
0009A7r 1               ; and before MICROTAN, by using beq instead
0009A7r 1               ; of bne in the ZP case.
0009A7r 1  30 62                bmi     FINDATA
0009A9r 1  20 rr rr             jsr     OUTQUES
0009ACr 1  20 rr rr             jsr     NXIN
0009AFr 1  86 C3                stx     TXTPTR
0009B1r 1  84 C4                sty     TXTPTR+1
0009B3r 1               ; ----------------------------------------------------------------------------
0009B3r 1               INSTART:
0009B3r 1  20 BC 00             jsr     CHRGET
0009B6r 1  24 5F                bit     VALTYP
0009B8r 1  10 24                bpl     L2B34
0009BAr 1  85 5B                sta     CHARAC
0009BCr 1  C9 22                cmp     #$22
0009BEr 1  F0 07                beq     L2B1D
0009C0r 1  A9 3A                lda     #$3A
0009C2r 1  85 5B                sta     CHARAC
0009C4r 1  A9 2C                lda     #$2C
0009C6r 1  18                   clc
0009C7r 1               L2B1D:
0009C7r 1  85 5C                sta     ENDCHR
0009C9r 1  A5 C3                lda     TXTPTR
0009CBr 1  A4 C4                ldy     TXTPTR+1
0009CDr 1  69 00                adc     #$00
0009CFr 1  90 01                bcc     L2B28
0009D1r 1  C8                   iny
0009D2r 1               L2B28:
0009D2r 1  20 rr rr             jsr     STRLT2
0009D5r 1  20 rr rr             jsr     POINT
0009D8r 1  20 rr rr             jsr     LETSTRING
0009DBr 1  4C rr rr             jmp     INPUT_MORE
0009DEr 1               ; ----------------------------------------------------------------------------
0009DEr 1               L2B34:
0009DEr 1  20 rr rr             jsr     FIN
0009E1r 1  20 rr rr             jsr     SETFOR
0009E4r 1               ; ----------------------------------------------------------------------------
0009E4r 1               INPUT_MORE:
0009E4r 1  20 C2 00             jsr     CHRGOT
0009E7r 1  F0 07                beq     L2B48
0009E9r 1  C9 2C                cmp     #$2C
0009EBr 1  F0 03                beq     L2B48
0009EDr 1  4C rr rr             jmp     INPUTERR
0009F0r 1               L2B48:
0009F0r 1  A5 C3                lda     TXTPTR
0009F2r 1  A4 C4                ldy     TXTPTR+1
0009F4r 1  85 91                sta     INPTR
0009F6r 1  84 92                sty     INPTR+1
0009F8r 1  A5 11                lda     TXPSV
0009FAr 1  A4 12                ldy     TXPSV+1
0009FCr 1  85 C3                sta     TXTPTR
0009FEr 1  84 C4                sty     TXTPTR+1
000A00r 1  20 C2 00             jsr     CHRGOT
000A03r 1  F0 2C                beq     INPDONE
000A05r 1  20 rr rr             jsr     CHKCOM
000A08r 1  4C rr rr             jmp     PROCESS_INPUT_ITEM
000A0Br 1               ; ----------------------------------------------------------------------------
000A0Br 1               FINDATA:
000A0Br 1  20 rr rr             jsr     DATAN
000A0Er 1  C8                   iny
000A0Fr 1  AA                   tax
000A10r 1  D0 12                bne     L2B7C
000A12r 1  A2 06                ldx     #ERR_NODATA
000A14r 1  C8                   iny
000A15r 1  B1 C3                lda     (TXTPTR),y
000A17r 1  F0 69                beq     GERR
000A19r 1  C8                   iny
000A1Ar 1  B1 C3                lda     (TXTPTR),y
000A1Cr 1  85 8D                sta     Z8C
000A1Er 1  C8                   iny
000A1Fr 1  B1 C3                lda     (TXTPTR),y
000A21r 1  C8                   iny
000A22r 1  85 8E                sta     Z8C+1
000A24r 1               L2B7C:
000A24r 1  B1 C3                lda     (TXTPTR),y
000A26r 1  AA                   tax
000A27r 1  20 rr rr             jsr     ADDON
000A2Ar 1  E0 83                cpx     #$83
000A2Cr 1  D0 DD                bne     FINDATA
000A2Er 1  4C rr rr             jmp     INSTART
000A31r 1               ; ---NO MORE INPUT REQUESTED------
000A31r 1               INPDONE:
000A31r 1  A5 91                lda     INPTR
000A33r 1  A4 92                ldy     INPTR+1
000A35r 1  A6 62                ldx     INPUTFLG
000A37r 1  F0 03                beq     L2B94 ; INPUT
000A39r 1  4C rr rr             jmp     SETDA
000A3Cr 1               L2B94:
000A3Cr 1  A0 00                ldy     #$00
000A3Er 1  B1 91                lda     (INPTR),y
000A40r 1  F0 07                beq     L2BA1
000A42r 1  A9 rr                lda     #<ERREXTRA
000A44r 1  A0 rr                ldy     #>ERREXTRA
000A46r 1  4C rr rr             jmp     STROUT
000A49r 1               L2BA1:
000A49r 1  60                   rts
000A4Ar 1               ; ----------------------------------------------------------------------------
000A4Ar 1               ERREXTRA:
000A4Ar 1  3F 45 58 54          .byte   "?EXTRA IGNORED"
000A4Er 1  52 41 20 49  
000A52r 1  47 4E 4F 52  
000A58r 1               
000A58r 1               
000A58r 1  0D 0A 00             .byte   $0D,$0A,$00
000A5Br 1               ERRREENTRY:
000A5Br 1  3F 52 45 44          .byte   "?REDO FROM START"
000A5Fr 1  4F 20 46 52  
000A63r 1  4F 4D 20 53  
000A6Br 1               
000A6Br 1               
000A6Br 1  0D 0A 00             .byte   $0D,$0A,$00
000A6Er 1               ; ----------------------------------------------------------------------------
000A6Er 1               ; "NEXT" STATEMENT
000A6Er 1               ; ----------------------------------------------------------------------------
000A6Er 1               NEXT:
000A6Er 1  D0 04                bne     NEXT1
000A70r 1  A0 00                ldy     #$00
000A72r 1  F0 03                beq     NEXT2
000A74r 1               NEXT1:
000A74r 1  20 rr rr             jsr     PTRGET
000A77r 1               NEXT2:
000A77r 1  85 97                sta     FORPNT
000A79r 1  84 98                sty     FORPNT+1
000A7Br 1  20 rr rr             jsr     GTFORPNT
000A7Er 1  F0 04                beq     NEXT3
000A80r 1  A2 00                ldx     #$00
000A82r 1               GERR:
000A82r 1  F0 68                beq     JERROR
000A84r 1               NEXT3:
000A84r 1  9A                   txs
000A85r 1  E8                   inx
000A86r 1  E8                   inx
000A87r 1  E8                   inx
000A88r 1  E8                   inx
000A89r 1  8A                   txa
000A8Ar 1  E8                   inx
000A8Br 1  E8                   inx
000A8Cr 1  E8                   inx
000A8Dr 1  E8                   inx
000A8Er 1  E8                   inx
000A8Fr 1  86 73                stx     DEST
000A91r 1  A0 01                ldy     #>STACK
000A93r 1  20 rr rr             jsr     LOAD_FAC_FROM_YA
000A96r 1  BA                   tsx
000A97r 1  BD 08 01             lda     STACK+BYTES_FP+4,x
000A9Ar 1  85 B0                sta     FACSIGN
000A9Cr 1  A5 97                lda     FORPNT
000A9Er 1  A4 98                ldy     FORPNT+1
000AA0r 1  20 rr rr             jsr     FADD
000AA3r 1  20 rr rr             jsr     SETFOR
000AA6r 1  A0 01                ldy     #>STACK
000AA8r 1  20 rr rr             jsr     FCOMP2
000AABr 1  BA                   tsx
000AACr 1  38                   sec
000AADr 1  FD 08 01             sbc     STACK+BYTES_FP+4,x
000AB0r 1  F0 17                beq     L2C22
000AB2r 1  BD 0D 01             lda     STACK+2*BYTES_FP+5,x
000AB5r 1  85 87                sta     CURLIN
000AB7r 1  BD 0E 01             lda     STACK+2*BYTES_FP+6,x
000ABAr 1  85 88                sta     CURLIN+1
000ABCr 1  BD 10 01             lda     STACK+2*BYTES_FP+8,x
000ABFr 1  85 C3                sta     TXTPTR
000AC1r 1  BD 0F 01             lda     STACK+2*BYTES_FP+7,x
000AC4r 1  85 C4                sta     TXTPTR+1
000AC6r 1               L2C1F:
000AC6r 1  4C rr rr             jmp     NEWSTT
000AC9r 1               L2C22:
000AC9r 1  8A                   txa
000ACAr 1  69 0F                adc     #2*BYTES_FP+7
000ACCr 1  AA                   tax
000ACDr 1  9A                   txs
000ACEr 1  20 C2 00             jsr     CHRGOT
000AD1r 1  C9 2C                cmp     #$2C
000AD3r 1  D0 F1                bne     L2C1F
000AD5r 1  20 BC 00             jsr     CHRGET
000AD8r 1  20 rr rr             jsr     NEXT1
000ADBr 1               ; ----------------------------------------------------------------------------
000ADBr 1               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
000ADBr 1               ; ----------------------------------------------------------------------------
000ADBr 1               FRMNUM:
000ADBr 1  20 rr rr             jsr     FRMEVL
000ADEr 1               ; ----------------------------------------------------------------------------
000ADEr 1               ; MAKE SURE (FAC) IS NUMERIC
000ADEr 1               ; ----------------------------------------------------------------------------
000ADEr 1               CHKNUM:
000ADEr 1  18                   clc
000ADFr 1  24                   .byte   $24
000AE0r 1               ; ----------------------------------------------------------------------------
000AE0r 1               ; MAKE SURE (FAC) IS STRING
000AE0r 1               ; ----------------------------------------------------------------------------
000AE0r 1               CHKSTR:
000AE0r 1  38                   sec
000AE1r 1               ; ----------------------------------------------------------------------------
000AE1r 1               ; MAKE SURE (FAC) IS CORRECT TYPE
000AE1r 1               ; IF C=0, TYPE MUST BE NUMERIC
000AE1r 1               ; IF C=1, TYPE MUST BE STRING
000AE1r 1               ; ----------------------------------------------------------------------------
000AE1r 1               CHKVAL:
000AE1r 1  24 5F                bit     VALTYP
000AE3r 1  30 03                bmi     L2C41
000AE5r 1  B0 03                bcs     L2C43
000AE7r 1               L2C40:
000AE7r 1  60                   rts
000AE8r 1               L2C41:
000AE8r 1  B0 FD                bcs     L2C40
000AEAr 1               L2C43:
000AEAr 1  A2 18                ldx     #ERR_BADTYPE
000AECr 1               JERROR:
000AECr 1  4C rr rr             jmp     ERROR
000AEFr 1               ; ----------------------------------------------------------------------------
000AEFr 1               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
000AEFr 1               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
000AEFr 1               ; EXPRESSIONS.
000AEFr 1               ; ----------------------------------------------------------------------------
000AEFr 1               FRMEVL:
000AEFr 1  A6 C3                ldx     TXTPTR
000AF1r 1  D0 02                bne     L2C4E
000AF3r 1  C6 C4                dec     TXTPTR+1
000AF5r 1               L2C4E:
000AF5r 1  C6 C3                dec     TXTPTR
000AF7r 1  A2 00                ldx     #$00
000AF9r 1  24                   .byte   $24
000AFAr 1               FRMEVL1:
000AFAr 1  48                   pha
000AFBr 1  8A                   txa
000AFCr 1  48                   pha
000AFDr 1  A9 01                lda     #$01
000AFFr 1  20 rr rr             jsr     CHKMEM
000B02r 1  20 rr rr             jsr     FRM_ELEMENT
000B05r 1  A9 00                lda     #$00
000B07r 1  85 9B                sta     CPRTYP
000B09r 1               FRMEVL2:
000B09r 1  20 C2 00             jsr     CHRGOT
000B0Cr 1               L2C65:
000B0Cr 1  38                   sec
000B0Dr 1  E9 AA                sbc     #TOKEN_GREATER
000B0Fr 1  90 17                bcc     L2C81
000B11r 1  C9 03                cmp     #$03
000B13r 1  B0 13                bcs     L2C81
000B15r 1  C9 01                cmp     #$01
000B17r 1  2A                   rol     a
000B18r 1  49 01                eor     #$01
000B1Ar 1  45 9B                eor     CPRTYP
000B1Cr 1  C5 9B                cmp     CPRTYP
000B1Er 1  90 61                bcc     SNTXERR
000B20r 1  85 9B                sta     CPRTYP
000B22r 1  20 BC 00             jsr     CHRGET
000B25r 1  4C rr rr             jmp     L2C65
000B28r 1               L2C81:
000B28r 1  A6 9B                ldx     CPRTYP
000B2Ar 1  D0 2C                bne     FRM_RELATIONAL
000B2Cr 1  B0 78                bcs     L2D02
000B2Er 1  69 07                adc     #$07
000B30r 1  90 74                bcc     L2D02
000B32r 1  65 5F                adc     VALTYP
000B34r 1  D0 03                bne     L2C92
000B36r 1  4C rr rr             jmp     CAT
000B39r 1               L2C92:
000B39r 1  69 FF                adc     #$FF
000B3Br 1  85 71                sta     INDEX
000B3Dr 1  0A                   asl     a
000B3Er 1  65 71                adc     INDEX
000B40r 1  A8                   tay
000B41r 1               FRM_PRECEDENCE_TEST:
000B41r 1  68                   pla
000B42r 1  D9 rr rr             cmp     MATHTBL,y
000B45r 1  B0 64                bcs     FRM_PERFORM1
000B47r 1  20 rr rr             jsr     CHKNUM
000B4Ar 1               L2CA3:
000B4Ar 1  48                   pha
000B4Br 1               L2CA4:
000B4Br 1  20 rr rr             jsr     FRM_RECURSE
000B4Er 1  68                   pla
000B4Fr 1  A4 99                ldy     LASTOP
000B51r 1  10 17                bpl     PREFNC
000B53r 1  AA                   tax
000B54r 1  F0 53                beq     GOEX
000B56r 1  D0 5C                bne     FRM_PERFORM2
000B58r 1               ; ----------------------------------------------------------------------------
000B58r 1               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
000B58r 1               ; ----------------------------------------------------------------------------
000B58r 1               FRM_RELATIONAL:
000B58r 1  46 5F                lsr     VALTYP
000B5Ar 1  8A                   txa
000B5Br 1  2A                   rol     a
000B5Cr 1  A6 C3                ldx     TXTPTR
000B5Er 1  D0 02                bne     L2CBB
000B60r 1  C6 C4                dec     TXTPTR+1
000B62r 1               L2CBB:
000B62r 1  C6 C3                dec     TXTPTR
000B64r 1  A0 1B                ldy     #$1B
000B66r 1  85 9B                sta     CPRTYP
000B68r 1  D0 D7                bne     FRM_PRECEDENCE_TEST
000B6Ar 1               PREFNC:
000B6Ar 1  D9 rr rr             cmp     MATHTBL,y
000B6Dr 1  B0 45                bcs     FRM_PERFORM2
000B6Fr 1  90 D9                bcc     L2CA3
000B71r 1               ; ----------------------------------------------------------------------------
000B71r 1               ; STACK THIS OPERATION AND CALL FRMEVL FOR
000B71r 1               ; ANOTHER ONE
000B71r 1               ; ----------------------------------------------------------------------------
000B71r 1               FRM_RECURSE:
000B71r 1  B9 rr rr             lda     MATHTBL+2,y
000B74r 1  48                   pha
000B75r 1  B9 rr rr             lda     MATHTBL+1,y
000B78r 1  48                   pha
000B79r 1  20 rr rr             jsr     FRM_STACK1
000B7Cr 1  A5 9B                lda     CPRTYP
000B7Er 1  4C rr rr             jmp     FRMEVL1
000B81r 1               SNTXERR:
000B81r 1  4C rr rr             jmp     SYNERR
000B84r 1               ; ----------------------------------------------------------------------------
000B84r 1               ; STACK (FAC)
000B84r 1               ; THREE ENTRY POINTS:
000B84r 1               ; 	1, FROM FRMEVL
000B84r 1               ;	2, FROM "STEP"
000B84r 1               ;	3, FROM "FOR"
000B84r 1               ; ----------------------------------------------------------------------------
000B84r 1               FRM_STACK1:
000B84r 1  A5 B0                lda     FACSIGN
000B86r 1  BE rr rr             ldx     MATHTBL,y
000B89r 1               ; ----------------------------------------------------------------------------
000B89r 1               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
000B89r 1               ; ----------------------------------------------------------------------------
000B89r 1               FRM_STACK2:
000B89r 1  A8                   tay
000B8Ar 1  68                   pla
000B8Br 1  85 71                sta     INDEX
000B8Dr 1  E6 71                inc     INDEX ; bug: assumes not on page boundary
000B8Fr 1               ; bug exists on AppleSoft II
000B8Fr 1  68                   pla
000B90r 1  85 72                sta     INDEX+1
000B92r 1  98                   tya
000B93r 1  48                   pha
000B94r 1               ; ----------------------------------------------------------------------------
000B94r 1               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
000B94r 1               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
000B94r 1               ; ----------------------------------------------------------------------------
000B94r 1               FRM_STACK3:
000B94r 1  20 rr rr             jsr     ROUND_FAC
000B97r 1  A5 AF                lda     FAC+3
000B99r 1  48                   pha
000B9Ar 1  A5 AE                lda     FAC+2
000B9Cr 1  48                   pha
000B9Dr 1  A5 AD                lda     FAC+1
000B9Fr 1  48                   pha
000BA0r 1  A5 AC                lda     FAC
000BA2r 1  48                   pha
000BA3r 1  6C 71 00             jmp     (INDEX)
000BA6r 1               L2D02:
000BA6r 1  A0 FF                ldy     #$FF
000BA8r 1  68                   pla
000BA9r 1               GOEX:
000BA9r 1  F0 20                beq     EXIT
000BABr 1               ; ----------------------------------------------------------------------------
000BABr 1               ; PERFORM STACKED OPERATION
000BABr 1               ;
000BABr 1               ; (A) = PRECEDENCE BYTE
000BABr 1               ; STACK:  1 -- CPRMASK
000BABr 1               ;	5 -- (ARG)
000BABr 1               ;	2 -- ADDR OF PERFORMER
000BABr 1               ; ----------------------------------------------------------------------------
000BABr 1               FRM_PERFORM1:
000BABr 1  C9 64                cmp     #$64
000BADr 1  F0 03                beq     L2D0E
000BAFr 1  20 rr rr             jsr     CHKNUM
000BB2r 1               L2D0E:
000BB2r 1  84 99                sty     LASTOP
000BB4r 1               FRM_PERFORM2:
000BB4r 1  68                   pla
000BB5r 1  4A                   lsr     a
000BB6r 1  85 63                sta     CPRMASK
000BB8r 1  68                   pla
000BB9r 1  85 B3                sta     ARG
000BBBr 1  68                   pla
000BBCr 1  85 B4                sta     ARG+1
000BBEr 1  68                   pla
000BBFr 1  85 B5                sta     ARG+2
000BC1r 1  68                   pla
000BC2r 1  85 B6                sta     ARG+3
000BC4r 1  68                   pla
000BC5r 1  85 B7                sta     ARGSIGN
000BC7r 1  45 B0                eor     FACSIGN
000BC9r 1  85 B8                sta     SGNCPR
000BCBr 1               EXIT:
000BCBr 1  A5 AC                lda     FAC
000BCDr 1  60                   rts
000BCEr 1               ; ----------------------------------------------------------------------------
000BCEr 1               ; GET ELEMENT IN EXPRESSION
000BCEr 1               ;
000BCEr 1               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
000BCEr 1               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
000BCEr 1               ; ----------------------------------------------------------------------------
000BCEr 1               FRM_ELEMENT:
000BCEr 1  A9 00                lda     #$00
000BD0r 1  85 5F                sta     VALTYP
000BD2r 1               L2D31:
000BD2r 1  20 BC 00             jsr     CHRGET
000BD5r 1  B0 03                bcs     L2D39
000BD7r 1               L2D36:
000BD7r 1  4C rr rr             jmp     FIN
000BDAr 1               L2D39:
000BDAr 1  20 rr rr             jsr     ISLETC
000BDDr 1  B0 67                bcs     FRM_VARIABLE
000BDFr 1               CON_PI:
000BDFr 1  C9 2E                cmp     #$2E
000BE1r 1  F0 F4                beq     L2D36
000BE3r 1  C9 A4                cmp     #TOKEN_MINUS
000BE5r 1  F0 58                beq     MIN
000BE7r 1  C9 A3                cmp     #TOKEN_PLUS
000BE9r 1  F0 E7                beq     L2D31
000BEBr 1  C9 22                cmp     #$22
000BEDr 1  D0 0F                bne     NOT_
000BEFr 1               ; ----------------------------------------------------------------------------
000BEFr 1               ; STRING CONSTANT ELEMENT
000BEFr 1               ;
000BEFr 1               ; SET Y,A = (TXTPTR)+CARRY
000BEFr 1               ; ----------------------------------------------------------------------------
000BEFr 1               STRTXT:
000BEFr 1  A5 C3                lda     TXTPTR
000BF1r 1  A4 C4                ldy     TXTPTR+1
000BF3r 1  69 00                adc     #$00
000BF5r 1  90 01                bcc     L2D57
000BF7r 1  C8                   iny
000BF8r 1               L2D57:
000BF8r 1  20 rr rr             jsr     STRLIT
000BFBr 1  4C rr rr             jmp     POINT
000BFEr 1               ; ----------------------------------------------------------------------------
000BFEr 1               ; "NOT" FUNCTION
000BFEr 1               ; IF FAC=0, RETURN FAC=1
000BFEr 1               ; IF FAC<>0, RETURN FAC=0
000BFEr 1               ; ----------------------------------------------------------------------------
000BFEr 1               NOT_:
000BFEr 1  C9 A1                cmp     #TOKEN_NOT
000C00r 1  D0 13                bne     L2D74
000C02r 1  A0 18                ldy     #$18
000C04r 1  D0 3B                bne     EQUL
000C06r 1               ; ----------------------------------------------------------------------------
000C06r 1               ; COMPARISON FOR EQUALITY (= OPERATOR)
000C06r 1               ; ALSO USED TO EVALUATE "NOT" FUNCTION
000C06r 1               ; ----------------------------------------------------------------------------
000C06r 1               EQUOP:
000C06r 1  20 rr rr             jsr     AYINT
000C09r 1  A5 AF                lda     FAC_LAST
000C0Br 1  49 FF                eor     #$FF
000C0Dr 1  A8                   tay
000C0Er 1  A5 AE                lda     FAC_LAST-1
000C10r 1  49 FF                eor     #$FF
000C12r 1  4C rr rr             jmp     GIVAYF
000C15r 1               L2D74:
000C15r 1  C9 9E                cmp     #TOKEN_FN
000C17r 1  D0 03                bne     L2D7B
000C19r 1  4C rr rr             jmp     L31F3
000C1Cr 1               L2D7B:
000C1Cr 1  C9 AD                cmp     #TOKEN_SGN
000C1Er 1  90 03                bcc     PARCHK
000C20r 1  4C rr rr             jmp     UNARY
000C23r 1               ; ----------------------------------------------------------------------------
000C23r 1               ; EVALUATE "(EXPRESSION)"
000C23r 1               ; ----------------------------------------------------------------------------
000C23r 1               PARCHK:
000C23r 1  20 rr rr             jsr     CHKOPN
000C26r 1  20 rr rr             jsr     FRMEVL
000C29r 1               CHKCLS:
000C29r 1  A9 29                lda     #$29
000C2Br 1  2C                   .byte   $2C
000C2Cr 1               CHKOPN:
000C2Cr 1  A9 28                lda     #$28
000C2Er 1  2C                   .byte   $2C
000C2Fr 1               CHKCOM:
000C2Fr 1  A9 2C                lda     #$2C
000C31r 1               ; ----------------------------------------------------------------------------
000C31r 1               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
000C31r 1               ; ----------------------------------------------------------------------------
000C31r 1               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
000C31r 1  A0 00                ldy     #$00
000C33r 1  D1 C3                cmp     (TXTPTR),y
000C35r 1  D0 03                bne     SYNERR
000C37r 1  4C BC 00             jmp     CHRGET
000C3Ar 1               ; ----------------------------------------------------------------------------
000C3Ar 1               SYNERR:
000C3Ar 1  A2 02                ldx     #ERR_SYNTAX
000C3Cr 1  4C rr rr             jmp     ERROR
000C3Fr 1               ; ----------------------------------------------------------------------------
000C3Fr 1               MIN:
000C3Fr 1  A0 15                ldy     #$15
000C41r 1               EQUL:
000C41r 1  68                   pla
000C42r 1  68                   pla
000C43r 1  4C rr rr             jmp     L2CA4
000C46r 1               ; ----------------------------------------------------------------------------
000C46r 1               FRM_VARIABLE:
000C46r 1  20 rr rr             jsr     PTRGET
000C49r 1               FRM_VARIABLE_CALL	= *-1
000C49r 1  85 AE                sta     FAC_LAST-1
000C4Br 1  84 AF                sty     FAC_LAST
000C4Dr 1  A6 5F                ldx     VALTYP
000C4Fr 1  F0 01                beq     L2DB1
000C51r 1               ; bugfix?
000C51r 1               ; fixed on AppleSoft II, not on any CBM
000C51r 1  60                   rts
000C52r 1               L2DB1:
000C52r 1  4C rr rr             jmp     LOAD_FAC_FROM_YA
000C55r 1               ; ----------------------------------------------------------------------------
000C55r 1               UNARY:
000C55r 1  0A                   asl     a
000C56r 1  48                   pha
000C57r 1  AA                   tax
000C58r 1  20 BC 00             jsr     CHRGET
000C5Br 1  E0 81                cpx     #<(TOKEN_LEFTSTR*2-1)
000C5Dr 1  90 20                bcc     L2DEF
000C5Fr 1  20 rr rr             jsr     CHKOPN
000C62r 1  20 rr rr             jsr     FRMEVL
000C65r 1  20 rr rr             jsr     CHKCOM
000C68r 1  20 rr rr             jsr     CHKSTR
000C6Br 1  68                   pla
000C6Cr 1  AA                   tax
000C6Dr 1  A5 AF                lda     FAC_LAST
000C6Fr 1  48                   pha
000C70r 1  A5 AE                lda     FAC_LAST-1
000C72r 1  48                   pha
000C73r 1  8A                   txa
000C74r 1  48                   pha
000C75r 1  20 rr rr             jsr     GETBYT
000C78r 1  68                   pla
000C79r 1  A8                   tay
000C7Ar 1  8A                   txa
000C7Br 1  48                   pha
000C7Cr 1  4C rr rr             jmp     L2DF4
000C7Fr 1               L2DEF:
000C7Fr 1  20 rr rr             jsr     PARCHK
000C82r 1  68                   pla
000C83r 1  A8                   tay
000C84r 1               L2DF4:
000C84r 1  B9 rr rr             lda     UNFNC+($80-TOKEN_SGN)*2,y
000C87r 1  85 A2                sta     JMPADRS+1
000C89r 1  B9 rr rr             lda     UNFNC+($80-TOKEN_SGN)*2+1,y
000C8Cr 1  85 A3                sta     JMPADRS+2
000C8Er 1  20 A1 00             jsr     JMPADRS
000C91r 1  4C rr rr             jmp     CHKNUM
000C94r 1               ; ----------------------------------------------------------------------------
000C94r 1               OR:
000C94r 1  A0 FF                ldy     #$FF
000C96r 1  2C                   .byte   $2C
000C97r 1               ; ----------------------------------------------------------------------------
000C97r 1               TAND:
000C97r 1  A0 00                ldy     #$00
000C99r 1  84 5D                sty     EOLPNTR
000C9Br 1  20 rr rr             jsr     AYINT
000C9Er 1  A5 AE                lda     FAC_LAST-1
000CA0r 1  45 5D                eor     EOLPNTR
000CA2r 1  85 5B                sta     CHARAC
000CA4r 1  A5 AF                lda     FAC_LAST
000CA6r 1  45 5D                eor     EOLPNTR
000CA8r 1  85 5C                sta     ENDCHR
000CAAr 1  20 rr rr             jsr     COPY_ARG_TO_FAC
000CADr 1  20 rr rr             jsr     AYINT
000CB0r 1  A5 AF                lda     FAC_LAST
000CB2r 1  45 5D                eor     EOLPNTR
000CB4r 1  25 5C                and     ENDCHR
000CB6r 1  45 5D                eor     EOLPNTR
000CB8r 1  A8                   tay
000CB9r 1  A5 AE                lda     FAC_LAST-1
000CBBr 1  45 5D                eor     EOLPNTR
000CBDr 1  25 5B                and     CHARAC
000CBFr 1  45 5D                eor     EOLPNTR
000CC1r 1  4C rr rr             jmp     GIVAYF
000CC4r 1               ; ----------------------------------------------------------------------------
000CC4r 1               ; PERFORM RELATIONAL OPERATIONS
000CC4r 1               ; ----------------------------------------------------------------------------
000CC4r 1               RELOPS:
000CC4r 1  20 rr rr             jsr     CHKVAL
000CC7r 1  B0 13                bcs     STRCMP
000CC9r 1  A5 B7                lda     ARGSIGN
000CCBr 1  09 7F                ora     #$7F
000CCDr 1  25 B4                and     ARG+1
000CCFr 1  85 B4                sta     ARG+1
000CD1r 1  A9 B3                lda     #<ARG
000CD3r 1  A0 00                ldy     #$00
000CD5r 1  20 rr rr             jsr     FCOMP
000CD8r 1  AA                   tax
000CD9r 1  4C rr rr             jmp     NUMCMP
000CDCr 1               ; ----------------------------------------------------------------------------
000CDCr 1               ; STRING COMPARISON
000CDCr 1               ; ----------------------------------------------------------------------------
000CDCr 1               STRCMP:
000CDCr 1  A9 00                lda     #$00
000CDEr 1  85 5F                sta     VALTYP
000CE0r 1  C6 9B                dec     CPRTYP
000CE2r 1  20 rr rr             jsr     FREFAC
000CE5r 1  85 AC                sta     FAC
000CE7r 1  86 AD                stx     FAC+1
000CE9r 1  84 AE                sty     FAC+2
000CEBr 1  A5 B5                lda     ARG_LAST-1
000CEDr 1  A4 B6                ldy     ARG_LAST
000CEFr 1  20 rr rr             jsr     FRETMP
000CF2r 1  86 B5                stx     ARG_LAST-1
000CF4r 1  84 B6                sty     ARG_LAST
000CF6r 1  AA                   tax
000CF7r 1  38                   sec
000CF8r 1  E5 AC                sbc     FAC
000CFAr 1  F0 08                beq     L2E74
000CFCr 1  A9 01                lda     #$01
000CFEr 1  90 04                bcc     L2E74
000D00r 1  A6 AC                ldx     FAC
000D02r 1  A9 FF                lda     #$FF
000D04r 1               L2E74:
000D04r 1  85 B0                sta     FACSIGN
000D06r 1  A0 FF                ldy     #$FF
000D08r 1  E8                   inx
000D09r 1               STRCMP1:
000D09r 1  C8                   iny
000D0Ar 1  CA                   dex
000D0Br 1  D0 07                bne     L2E84
000D0Dr 1  A6 B0                ldx     FACSIGN
000D0Fr 1               NUMCMP:
000D0Fr 1  30 0F                bmi     CMPDONE
000D11r 1  18                   clc
000D12r 1  90 0C                bcc     CMPDONE
000D14r 1               L2E84:
000D14r 1  B1 B5                lda     (ARG_LAST-1),y
000D16r 1  D1 AD                cmp     (FAC+1),y
000D18r 1  F0 EF                beq     STRCMP1
000D1Ar 1  A2 FF                ldx     #$FF
000D1Cr 1  B0 02                bcs     CMPDONE
000D1Er 1  A2 01                ldx     #$01
000D20r 1               CMPDONE:
000D20r 1  E8                   inx
000D21r 1  8A                   txa
000D22r 1  2A                   rol     a
000D23r 1  25 63                and     CPRMASK
000D25r 1  F0 02                beq     L2E99
000D27r 1  A9 FF                lda     #$FF
000D29r 1               L2E99:
000D29r 1  4C rr rr             jmp     FLOAT
000D2Cr 1               ; ----------------------------------------------------------------------------
000D2Cr 1               ; "DIM" STATEMENT
000D2Cr 1               ; ----------------------------------------------------------------------------
000D2Cr 1               NXDIM:
000D2Cr 1  20 rr rr             jsr     CHKCOM
000D2Fr 1               DIM:
000D2Fr 1  AA                   tax
000D30r 1  20 rr rr             jsr     PTRGET2
000D33r 1  20 C2 00             jsr     CHRGOT
000D36r 1  D0 F4                bne     NXDIM
000D38r 1  60                   rts
000D39r 1               ; ----------------------------------------------------------------------------
000D39r 1               ; PTRGET -- GENERAL VARIABLE SCAN
000D39r 1               ;
000D39r 1               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
000D39r 1               ; VARTAB AND ARYTAB FOR THE NAME.
000D39r 1               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
000D39r 1               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
000D39r 1               ;
000D39r 1               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
000D39r 1               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
000D39r 1               ;		ELSE = 0
000D39r 1               ;
000D39r 1               ;	SUBFLG -- = $00
000D39r 1               ;		= $40 IF CALLED FROM "GETARYPT"
000D39r 1               ; ----------------------------------------------------------------------------
000D39r 1               PTRGET:
000D39r 1  A2 00                ldx     #$00
000D3Br 1  20 C2 00             jsr     CHRGOT
000D3Er 1               PTRGET2:
000D3Er 1  86 5E                stx     DIMFLG
000D40r 1               PTRGET3:
000D40r 1  85 93                sta     VARNAM
000D42r 1  20 C2 00             jsr     CHRGOT
000D45r 1  20 rr rr             jsr     ISLETC
000D48r 1  B0 03                bcs     NAMOK
000D4Ar 1  4C rr rr             jmp     SYNERR
000D4Dr 1               NAMOK:
000D4Dr 1  A2 00                ldx     #$00
000D4Fr 1  86 5F                stx     VALTYP
000D51r 1  20 BC 00             jsr     CHRGET
000D54r 1  90 05                bcc     L2ECD
000D56r 1  20 rr rr             jsr     ISLETC
000D59r 1  90 0B                bcc     L2ED8
000D5Br 1               L2ECD:
000D5Br 1  AA                   tax
000D5Cr 1               L2ECE:
000D5Cr 1  20 BC 00             jsr     CHRGET
000D5Fr 1  90 FB                bcc     L2ECE
000D61r 1  20 rr rr             jsr     ISLETC
000D64r 1  B0 F6                bcs     L2ECE
000D66r 1               L2ED8:
000D66r 1  C9 24                cmp     #$24
000D68r 1  D0 0B                bne     L2EF9
000D6Ar 1  A9 FF                lda     #$FF
000D6Cr 1  85 5F                sta     VALTYP
000D6Er 1  8A                   txa
000D6Fr 1  09 80                ora     #$80
000D71r 1  AA                   tax
000D72r 1  20 BC 00             jsr     CHRGET
000D75r 1               L2EF9:
000D75r 1  86 94                stx     VARNAM+1
000D77r 1  38                   sec
000D78r 1  05 61                ora     SUBFLG
000D7Ar 1  E9 28                sbc     #$28
000D7Cr 1  D0 03                bne     L2F05
000D7Er 1  4C rr rr             jmp     ARRAY
000D81r 1               L2F05:
000D81r 1  A9 00                lda     #$00
000D83r 1  85 61                sta     SUBFLG
000D85r 1  A5 7B                lda     VARTAB
000D87r 1  A6 7C                ldx     VARTAB+1
000D89r 1  A0 00                ldy     #$00
000D8Br 1               L2F0F:
000D8Br 1  86 AB                stx     LOWTR+1
000D8Dr 1               L2F11:
000D8Dr 1  85 AA                sta     LOWTR
000D8Fr 1  E4 7E                cpx     ARYTAB+1
000D91r 1  D0 04                bne     L2F1B
000D93r 1  C5 7D                cmp     ARYTAB
000D95r 1  F0 22                beq     NAMENOTFOUND
000D97r 1               L2F1B:
000D97r 1  A5 93                lda     VARNAM
000D99r 1  D1 AA                cmp     (LOWTR),y
000D9Br 1  D0 08                bne     L2F29
000D9Dr 1  A5 94                lda     VARNAM+1
000D9Fr 1  C8                   iny
000DA0r 1  D1 AA                cmp     (LOWTR),y
000DA2r 1  F0 61                beq     SET_VARPNT_AND_YA
000DA4r 1  88                   dey
000DA5r 1               L2F29:
000DA5r 1  18                   clc
000DA6r 1  A5 AA                lda     LOWTR
000DA8r 1  69 06                adc     #BYTES_PER_VARIABLE
000DAAr 1  90 E1                bcc     L2F11
000DACr 1  E8                   inx
000DADr 1  D0 DC                bne     L2F0F
000DAFr 1               ; ----------------------------------------------------------------------------
000DAFr 1               ; CHECK IF (A) IS ASCII LETTER A-Z
000DAFr 1               ;
000DAFr 1               ; RETURN CARRY = 1 IF A-Z
000DAFr 1               ;	= 0 IF NOT
000DAFr 1               ; ----------------------------------------------------------------------------
000DAFr 1               ISLETC:
000DAFr 1  C9 41                cmp     #$41
000DB1r 1  90 05                bcc     L2F3C
000DB3r 1  E9 5B                sbc     #$5B
000DB5r 1  38                   sec
000DB6r 1  E9 A5                sbc     #$A5
000DB8r 1               L2F3C:
000DB8r 1  60                   rts
000DB9r 1               ; ----------------------------------------------------------------------------
000DB9r 1               ; VARIABLE NOT FOUND, SO MAKE ONE
000DB9r 1               ; ----------------------------------------------------------------------------
000DB9r 1               NAMENOTFOUND:
000DB9r 1  68                   pla
000DBAr 1  48                   pha
000DBBr 1  C9 rr                cmp     #<FRM_VARIABLE_CALL
000DBDr 1  D0 07                bne     MAKENEWVARIABLE
000DBFr 1  A9 rr                lda     #<C_ZERO
000DC1r 1  A0 rr                ldy     #>C_ZERO
000DC3r 1  60                   rts
000DC4r 1               ; ----------------------------------------------------------------------------
000DC4r 1               C_ZERO:
000DC4r 1  00 00                .byte   $00,$00
000DC6r 1               ; ----------------------------------------------------------------------------
000DC6r 1               ; MAKE A NEW SIMPLE VARIABLE
000DC6r 1               ;
000DC6r 1               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
000DC6r 1               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
000DC6r 1               ; ----------------------------------------------------------------------------
000DC6r 1               MAKENEWVARIABLE:
000DC6r 1  A5 7D                lda     ARYTAB
000DC8r 1  A4 7E                ldy     ARYTAB+1
000DCAr 1  85 AA                sta     LOWTR
000DCCr 1  84 AB                sty     LOWTR+1
000DCEr 1  A5 7F                lda     STREND
000DD0r 1  A4 80                ldy     STREND+1
000DD2r 1  85 A6                sta     HIGHTR
000DD4r 1  84 A7                sty     HIGHTR+1
000DD6r 1  18                   clc
000DD7r 1  69 06                adc     #BYTES_PER_VARIABLE
000DD9r 1  90 01                bcc     L2F68
000DDBr 1  C8                   iny
000DDCr 1               L2F68:
000DDCr 1  85 A4                sta     HIGHDS
000DDEr 1  84 A5                sty     HIGHDS+1
000DE0r 1  20 rr rr             jsr     BLTU
000DE3r 1  A5 A4                lda     HIGHDS
000DE5r 1  A4 A5                ldy     HIGHDS+1
000DE7r 1  C8                   iny
000DE8r 1  85 7D                sta     ARYTAB
000DEAr 1  84 7E                sty     ARYTAB+1
000DECr 1  A0 00                ldy     #$00
000DEEr 1  A5 93                lda     VARNAM
000DF0r 1  91 AA                sta     (LOWTR),y
000DF2r 1  C8                   iny
000DF3r 1  A5 94                lda     VARNAM+1
000DF5r 1  91 AA                sta     (LOWTR),y
000DF7r 1  A9 00                lda     #$00
000DF9r 1  C8                   iny
000DFAr 1  91 AA                sta     (LOWTR),y
000DFCr 1  C8                   iny
000DFDr 1  91 AA                sta     (LOWTR),y
000DFFr 1  C8                   iny
000E00r 1  91 AA                sta     (LOWTR),y
000E02r 1  C8                   iny
000E03r 1  91 AA                sta     (LOWTR),y
000E05r 1               ; ----------------------------------------------------------------------------
000E05r 1               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
000E05r 1               ; ----------------------------------------------------------------------------
000E05r 1               SET_VARPNT_AND_YA:
000E05r 1  A5 AA                lda     LOWTR
000E07r 1  18                   clc
000E08r 1  69 02                adc     #$02
000E0Ar 1  A4 AB                ldy     LOWTR+1
000E0Cr 1  90 01                bcc     L2F9E
000E0Er 1  C8                   iny
000E0Fr 1               L2F9E:
000E0Fr 1  85 95                sta     VARPNT
000E11r 1  84 96                sty     VARPNT+1
000E13r 1  60                   rts
000E14r 1               ; ----------------------------------------------------------------------------
000E14r 1               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
000E14r 1               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
000E14r 1               ; ----------------------------------------------------------------------------
000E14r 1               GETARY:
000E14r 1  A5 5D                lda     EOLPNTR
000E16r 1  0A                   asl     a
000E17r 1  69 05                adc     #$05
000E19r 1  65 AA                adc     LOWTR
000E1Br 1  A4 AB                ldy     LOWTR+1
000E1Dr 1  90 01                bcc     L2FAF
000E1Fr 1  C8                   iny
000E20r 1               L2FAF:
000E20r 1  85 A4                sta     HIGHDS
000E22r 1  84 A5                sty     HIGHDS+1
000E24r 1  60                   rts
000E25r 1               ; ----------------------------------------------------------------------------
000E25r 1               NEG32768:
000E25r 1  90 80 00 00          .byte   $90,$80,$00,$00
000E29r 1               ; ----------------------------------------------------------------------------
000E29r 1               ; EVALUATE NUMERIC FORMULA AT TXTPTR
000E29r 1               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
000E29r 1               ; IN FAC+3,4
000E29r 1               ; ----------------------------------------------------------------------------
000E29r 1               MAKINT:
000E29r 1  20 BC 00             jsr     CHRGET
000E2Cr 1  20 rr rr             jsr     FRMNUM
000E2Fr 1               ; ----------------------------------------------------------------------------
000E2Fr 1               ; CONVERT FAC TO INTEGER
000E2Fr 1               ; MUST BE POSITIVE AND LESS THAN 32768
000E2Fr 1               ; ----------------------------------------------------------------------------
000E2Fr 1               MKINT:
000E2Fr 1  A5 B0                lda     FACSIGN
000E31r 1  30 0D                bmi     MI1
000E33r 1               ; ----------------------------------------------------------------------------
000E33r 1               ; CONVERT FAC TO INTEGER
000E33r 1               ; MUST BE -32767 <= FAC <= 32767
000E33r 1               ; ----------------------------------------------------------------------------
000E33r 1               AYINT:
000E33r 1  A5 AC                lda     FAC
000E35r 1  C9 90                cmp     #$90
000E37r 1  90 09                bcc     MI2
000E39r 1  A9 rr                lda     #<NEG32768
000E3Br 1  A0 rr                ldy     #>NEG32768
000E3Dr 1  20 rr rr             jsr     FCOMP
000E40r 1               MI1:
000E40r 1  D0 74                bne     IQERR
000E42r 1               MI2:
000E42r 1  4C rr rr             jmp     QINT
000E45r 1               ; ----------------------------------------------------------------------------
000E45r 1               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
000E45r 1               ; ----------------------------------------------------------------------------
000E45r 1               ARRAY:
000E45r 1  A5 5E                lda     DIMFLG
000E47r 1  48                   pha
000E48r 1  A5 5F                lda     VALTYP
000E4Ar 1  48                   pha
000E4Br 1  A0 00                ldy     #$00
000E4Dr 1               L2FDE:
000E4Dr 1  98                   tya
000E4Er 1  48                   pha
000E4Fr 1  A5 94                lda     VARNAM+1
000E51r 1  48                   pha
000E52r 1  A5 93                lda     VARNAM
000E54r 1  48                   pha
000E55r 1  20 rr rr             jsr     MAKINT
000E58r 1  68                   pla
000E59r 1  85 93                sta     VARNAM
000E5Br 1  68                   pla
000E5Cr 1  85 94                sta     VARNAM+1
000E5Er 1  68                   pla
000E5Fr 1  A8                   tay
000E60r 1  BA                   tsx
000E61r 1  BD 02 01             lda     STACK+2,x
000E64r 1  48                   pha
000E65r 1  BD 01 01             lda     STACK+1,x
000E68r 1  48                   pha
000E69r 1  A5 AE                lda     FAC_LAST-1
000E6Br 1  9D 02 01             sta     STACK+2,x
000E6Er 1  A5 AF                lda     FAC_LAST
000E70r 1  9D 01 01             sta     STACK+1,x
000E73r 1  C8                   iny
000E74r 1  20 C2 00             jsr     CHRGOT
000E77r 1  C9 2C                cmp     #$2C
000E79r 1  F0 D2                beq     L2FDE
000E7Br 1  84 5D                sty     EOLPNTR
000E7Dr 1  20 rr rr             jsr     CHKCLS
000E80r 1  68                   pla
000E81r 1  85 5F                sta     VALTYP
000E83r 1  68                   pla
000E84r 1  85 5E                sta     DIMFLG
000E86r 1               ; ----------------------------------------------------------------------------
000E86r 1               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
000E86r 1               ; ----------------------------------------------------------------------------
000E86r 1  A6 7D                ldx     ARYTAB
000E88r 1  A5 7E                lda     ARYTAB+1
000E8Ar 1               L301F:
000E8Ar 1  86 AA                stx     LOWTR
000E8Cr 1  85 AB                sta     LOWTR+1
000E8Er 1  C5 80                cmp     STREND+1
000E90r 1  D0 04                bne     L302B
000E92r 1  E4 7F                cpx     STREND
000E94r 1  F0 39                beq     MAKE_NEW_ARRAY
000E96r 1               L302B:
000E96r 1  A0 00                ldy     #$00
000E98r 1  B1 AA                lda     (LOWTR),y
000E9Ar 1  C8                   iny
000E9Br 1  C5 93                cmp     VARNAM
000E9Dr 1  D0 06                bne     L303A
000E9Fr 1  A5 94                lda     VARNAM+1
000EA1r 1  D1 AA                cmp     (LOWTR),y
000EA3r 1  F0 16                beq     USE_OLD_ARRAY
000EA5r 1               L303A:
000EA5r 1  C8                   iny
000EA6r 1  B1 AA                lda     (LOWTR),y
000EA8r 1  18                   clc
000EA9r 1  65 AA                adc     LOWTR
000EABr 1  AA                   tax
000EACr 1  C8                   iny
000EADr 1  B1 AA                lda     (LOWTR),y
000EAFr 1  65 AB                adc     LOWTR+1
000EB1r 1  90 D7                bcc     L301F
000EB3r 1               ; ----------------------------------------------------------------------------
000EB3r 1               ; ERROR:  BAD SUBSCRIPTS
000EB3r 1               ; ----------------------------------------------------------------------------
000EB3r 1               SUBERR:
000EB3r 1  A2 10                ldx     #ERR_BADSUBS
000EB5r 1  2C                   .byte   $2C
000EB6r 1               ; ----------------------------------------------------------------------------
000EB6r 1               ; ERROR:  ILLEGAL QUANTITY
000EB6r 1               ; ----------------------------------------------------------------------------
000EB6r 1               IQERR:
000EB6r 1  A2 08                ldx     #ERR_ILLQTY
000EB8r 1               JER:
000EB8r 1  4C rr rr             jmp     ERROR
000EBBr 1               ; ----------------------------------------------------------------------------
000EBBr 1               ; FOUND THE ARRAY
000EBBr 1               ; ----------------------------------------------------------------------------
000EBBr 1               USE_OLD_ARRAY:
000EBBr 1  A2 12                ldx     #ERR_REDIMD
000EBDr 1  A5 5E                lda     DIMFLG
000EBFr 1  D0 F7                bne     JER
000EC1r 1  20 rr rr             jsr     GETARY
000EC4r 1  A5 5D                lda     EOLPNTR
000EC6r 1  A0 04                ldy     #$04
000EC8r 1  D1 AA                cmp     (LOWTR),y
000ECAr 1  D0 E7                bne     SUBERR
000ECCr 1  4C rr rr             jmp     FIND_ARRAY_ELEMENT
000ECFr 1               ; ----------------------------------------------------------------------------
000ECFr 1               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
000ECFr 1               ; ----------------------------------------------------------------------------
000ECFr 1               MAKE_NEW_ARRAY:
000ECFr 1  20 rr rr             jsr     GETARY
000ED2r 1  20 rr rr             jsr     REASON
000ED5r 1  A9 00                lda     #$00
000ED7r 1  A8                   tay
000ED8r 1  85 BB                sta     STRNG2+1
000EDAr 1  A2 04                ldx     #BYTES_PER_ELEMENT
000EDCr 1  86 BA                stx     STRNG2
000EDEr 1  A5 93                lda     VARNAM
000EE0r 1  91 AA                sta     (LOWTR),y
000EE2r 1  C8                   iny
000EE3r 1  A5 94                lda     VARNAM+1
000EE5r 1  91 AA                sta     (LOWTR),y
000EE7r 1  A5 5D                lda     EOLPNTR
000EE9r 1  C8                   iny
000EEAr 1  C8                   iny
000EEBr 1  C8                   iny
000EECr 1  91 AA                sta     (LOWTR),y
000EEEr 1               L308A:
000EEEr 1  A2 0B                ldx     #$0B
000EF0r 1  A9 00                lda     #$00
000EF2r 1  24 5E                bit     DIMFLG
000EF4r 1  50 08                bvc     L309A
000EF6r 1  68                   pla
000EF7r 1  18                   clc
000EF8r 1  69 01                adc     #$01
000EFAr 1  AA                   tax
000EFBr 1  68                   pla
000EFCr 1  69 00                adc     #$00
000EFEr 1               L309A:
000EFEr 1  C8                   iny
000EFFr 1  91 AA                sta     (LOWTR),y
000F01r 1  C8                   iny
000F02r 1  8A                   txa
000F03r 1  91 AA                sta     (LOWTR),y
000F05r 1  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000F08r 1  86 BA                stx     STRNG2
000F0Ar 1  85 BB                sta     STRNG2+1
000F0Cr 1  A4 71                ldy     INDEX
000F0Er 1  C6 5D                dec     EOLPNTR
000F10r 1  D0 DC                bne     L308A
000F12r 1  65 A5                adc     HIGHDS+1
000F14r 1  B0 5D                bcs     GME
000F16r 1  85 A5                sta     HIGHDS+1
000F18r 1  A8                   tay
000F19r 1  8A                   txa
000F1Ar 1  65 A4                adc     HIGHDS
000F1Cr 1  90 03                bcc     L30BD
000F1Er 1  C8                   iny
000F1Fr 1  F0 52                beq     GME
000F21r 1               L30BD:
000F21r 1  20 rr rr             jsr     REASON
000F24r 1  85 7F                sta     STREND
000F26r 1  84 80                sty     STREND+1
000F28r 1  A9 00                lda     #$00
000F2Ar 1  E6 BB                inc     STRNG2+1
000F2Cr 1  A4 BA                ldy     STRNG2
000F2Er 1  F0 05                beq     L30D1
000F30r 1               L30CC:
000F30r 1  88                   dey
000F31r 1  91 A4                sta     (HIGHDS),y
000F33r 1  D0 FB                bne     L30CC
000F35r 1               L30D1:
000F35r 1  C6 A5                dec     HIGHDS+1
000F37r 1  C6 BB                dec     STRNG2+1
000F39r 1  D0 F5                bne     L30CC
000F3Br 1  E6 A5                inc     HIGHDS+1
000F3Dr 1  38                   sec
000F3Er 1  A5 7F                lda     STREND
000F40r 1  E5 AA                sbc     LOWTR
000F42r 1  A0 02                ldy     #$02
000F44r 1  91 AA                sta     (LOWTR),y
000F46r 1  A5 80                lda     STREND+1
000F48r 1  C8                   iny
000F49r 1  E5 AB                sbc     LOWTR+1
000F4Br 1  91 AA                sta     (LOWTR),y
000F4Dr 1  A5 5E                lda     DIMFLG
000F4Fr 1  D0 58                bne     RTS9
000F51r 1  C8                   iny
000F52r 1               ; ----------------------------------------------------------------------------
000F52r 1               ; FIND SPECIFIED ARRAY ELEMENT
000F52r 1               ;
000F52r 1               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
000F52r 1               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
000F52r 1               ; ----------------------------------------------------------------------------
000F52r 1               FIND_ARRAY_ELEMENT:
000F52r 1  B1 AA                lda     (LOWTR),y
000F54r 1  85 5D                sta     EOLPNTR
000F56r 1  A9 00                lda     #$00
000F58r 1  85 BA                sta     STRNG2
000F5Ar 1               L30F6:
000F5Ar 1  85 BB                sta     STRNG2+1
000F5Cr 1  C8                   iny
000F5Dr 1  68                   pla
000F5Er 1  AA                   tax
000F5Fr 1  85 AE                sta     FAC_LAST-1
000F61r 1  68                   pla
000F62r 1  85 AF                sta     FAC_LAST
000F64r 1  D1 AA                cmp     (LOWTR),y
000F66r 1  90 0E                bcc     FAE2
000F68r 1  D0 06                bne     GSE
000F6Ar 1  C8                   iny
000F6Br 1  8A                   txa
000F6Cr 1  D1 AA                cmp     (LOWTR),y
000F6Er 1  90 07                bcc     FAE3
000F70r 1               ; ----------------------------------------------------------------------------
000F70r 1               GSE:
000F70r 1  4C rr rr             jmp     SUBERR
000F73r 1               GME:
000F73r 1  4C rr rr             jmp     MEMERR
000F76r 1               ; ----------------------------------------------------------------------------
000F76r 1               FAE2:
000F76r 1  C8                   iny
000F77r 1               FAE3:
000F77r 1  A5 BB                lda     STRNG2+1
000F79r 1  05 BA                ora     STRNG2
000F7Br 1  18                   clc
000F7Cr 1  F0 0A                beq     L3124
000F7Er 1  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000F81r 1  8A                   txa
000F82r 1  65 AE                adc     FAC_LAST-1
000F84r 1  AA                   tax
000F85r 1  98                   tya
000F86r 1  A4 71                ldy     INDEX
000F88r 1               L3124:
000F88r 1  65 AF                adc     FAC_LAST
000F8Ar 1  86 BA                stx     STRNG2
000F8Cr 1  C6 5D                dec     EOLPNTR
000F8Er 1  D0 CA                bne     L30F6
000F90r 1  06 BA                asl     STRNG2
000F92r 1  2A                   rol     a
000F93r 1  B0 DB                bcs     GSE
000F95r 1  06 BA                asl     STRNG2
000F97r 1  2A                   rol     a
000F98r 1  B0 D6                bcs     GSE
000F9Ar 1  A8                   tay
000F9Br 1  A5 BA                lda     STRNG2
000F9Dr 1  65 A4                adc     HIGHDS
000F9Fr 1  85 95                sta     VARPNT
000FA1r 1  98                   tya
000FA2r 1  65 A5                adc     HIGHDS+1
000FA4r 1  85 96                sta     VARPNT+1
000FA6r 1  A8                   tay
000FA7r 1  A5 95                lda     VARPNT
000FA9r 1               RTS9:
000FA9r 1  60                   rts
000FAAr 1               ; ----------------------------------------------------------------------------
000FAAr 1               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
000FAAr 1               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
000FAAr 1               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
000FAAr 1               ; ----------------------------------------------------------------------------
000FAAr 1               MULTIPLY_SUBSCRIPT:
000FAAr 1  84 71                sty     INDEX
000FACr 1  B1 AA                lda     (LOWTR),y
000FAEr 1  85 76                sta     RESULT_LAST-2
000FB0r 1  88                   dey
000FB1r 1  B1 AA                lda     (LOWTR),y
000FB3r 1  85 77                sta     RESULT_LAST-1
000FB5r 1  A9 10                lda     #$10
000FB7r 1  85 A8                sta     INDX
000FB9r 1  A2 00                ldx     #$00
000FBBr 1  A0 00                ldy     #$00
000FBDr 1               L3163:
000FBDr 1  8A                   txa
000FBEr 1  0A                   asl     a
000FBFr 1  AA                   tax
000FC0r 1  98                   tya
000FC1r 1  2A                   rol     a
000FC2r 1  A8                   tay
000FC3r 1  B0 AE                bcs     GME
000FC5r 1  06 BA                asl     STRNG2
000FC7r 1  26 BB                rol     STRNG2+1
000FC9r 1  90 0B                bcc     L317C
000FCBr 1  18                   clc
000FCCr 1  8A                   txa
000FCDr 1  65 76                adc     RESULT_LAST-2
000FCFr 1  AA                   tax
000FD0r 1  98                   tya
000FD1r 1  65 77                adc     RESULT_LAST-1
000FD3r 1  A8                   tay
000FD4r 1  B0 9D                bcs     GME
000FD6r 1               L317C:
000FD6r 1  C6 A8                dec     INDX
000FD8r 1  D0 E3                bne     L3163
000FDAr 1  60                   rts
000FDBr 1               ; ----------------------------------------------------------------------------
000FDBr 1               ; "FRE" FUNCTION
000FDBr 1               ;
000FDBr 1               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
000FDBr 1               ; ----------------------------------------------------------------------------
000FDBr 1               FRE:
000FDBr 1  A5 5F                lda     VALTYP
000FDDr 1  F0 03                beq     L3188
000FDFr 1  20 rr rr             jsr     FREFAC
000FE2r 1               L3188:
000FE2r 1  20 rr rr             jsr     GARBAG
000FE5r 1  38                   sec
000FE6r 1  A5 81                lda     FRETOP
000FE8r 1  E5 7F                sbc     STREND
000FEAr 1  A8                   tay
000FEBr 1  A5 82                lda     FRETOP+1
000FEDr 1  E5 80                sbc     STREND+1
000FEFr 1               ; FALL INTO GIVAYF TO FLOAT THE VALUE
000FEFr 1               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
000FEFr 1               ; ----------------------------------------------------------------------------
000FEFr 1               ; FLOAT THE SIGNED INTEGER IN A,Y
000FEFr 1               ; ----------------------------------------------------------------------------
000FEFr 1               GIVAYF:
000FEFr 1  A2 00                ldx     #$00
000FF1r 1  86 5F                stx     VALTYP
000FF3r 1  85 AD                sta     FAC+1
000FF5r 1  84 AE                sty     FAC+2
000FF7r 1  A2 90                ldx     #$90
000FF9r 1  4C rr rr             jmp     FLOAT1
000FFCr 1               POS:
000FFCr 1  A4 0E                ldy     POSX
000FFEr 1               ; ----------------------------------------------------------------------------
000FFEr 1               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
000FFEr 1               ; ----------------------------------------------------------------------------
000FFEr 1               SNGFLT:
000FFEr 1  A9 00                lda     #$00
001000r 1  F0 ED                beq     GIVAYF
001002r 1               ; ----------------------------------------------------------------------------
001002r 1               ; CHECK FOR DIRECT OR RUNNING MODE
001002r 1               ; GIVING ERROR IF DIRECT MODE
001002r 1               ; ----------------------------------------------------------------------------
001002r 1               ERRDIR:
001002r 1  A6 88                ldx     CURLIN+1
001004r 1  E8                   inx
001005r 1  D0 A2                bne     RTS9
001007r 1  A2 16                ldx     #ERR_ILLDIR
001009r 1               L31AF:
001009r 1  4C rr rr             jmp     ERROR
00100Cr 1               DEF:
00100Cr 1  20 rr rr             jsr     FNC
00100Fr 1  20 rr rr             jsr     ERRDIR
001012r 1  20 rr rr             jsr     CHKOPN
001015r 1  A9 80                lda     #$80
001017r 1  85 61                sta     SUBFLG
001019r 1  20 rr rr             jsr     PTRGET
00101Cr 1  20 rr rr             jsr     CHKNUM
00101Fr 1  20 rr rr             jsr     CHKCLS
001022r 1  A9 AB                lda     #TOKEN_EQUAL
001024r 1  20 rr rr             jsr     SYNCHR
001027r 1  A5 96                lda     VARPNT+1
001029r 1  48                   pha
00102Ar 1  A5 95                lda     VARPNT
00102Cr 1  48                   pha
00102Dr 1  A5 C4                lda     TXTPTR+1
00102Fr 1  48                   pha
001030r 1  A5 C3                lda     TXTPTR
001032r 1  48                   pha
001033r 1  20 rr rr             jsr     DATA
001036r 1  4C rr rr             jmp     L3250
001039r 1               FNC:
001039r 1  A9 9E                lda     #TOKEN_FN
00103Br 1  20 rr rr             jsr     SYNCHR
00103Er 1  09 80                ora     #$80
001040r 1  85 61                sta     SUBFLG
001042r 1  20 rr rr             jsr     PTRGET3
001045r 1  85 9C                sta     FNCNAM
001047r 1  84 9D                sty     FNCNAM+1
001049r 1  4C rr rr             jmp     CHKNUM
00104Cr 1               L31F3:
00104Cr 1  20 rr rr             jsr     FNC
00104Fr 1  A5 9D                lda     FNCNAM+1
001051r 1  48                   pha
001052r 1  A5 9C                lda     FNCNAM
001054r 1  48                   pha
001055r 1  20 rr rr             jsr     PARCHK
001058r 1  20 rr rr             jsr     CHKNUM
00105Br 1  68                   pla
00105Cr 1  85 9C                sta     FNCNAM
00105Er 1  68                   pla
00105Fr 1  85 9D                sta     FNCNAM+1
001061r 1  A0 02                ldy     #$02
001063r 1  A2 20                ldx     #ERR_UNDEFFN
001065r 1  B1 9C                lda     (FNCNAM),y
001067r 1  F0 A0                beq     L31AF
001069r 1  85 95                sta     VARPNT
00106Br 1  AA                   tax
00106Cr 1  C8                   iny
00106Dr 1  B1 9C                lda     (FNCNAM),y
00106Fr 1  85 96                sta     VARPNT+1
001071r 1               L3219:
001071r 1  B1 95                lda     (VARPNT),y
001073r 1  48                   pha
001074r 1  88                   dey
001075r 1  10 FA                bpl     L3219
001077r 1  A4 96                ldy     VARPNT+1
001079r 1  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
00107Cr 1  A5 C4                lda     TXTPTR+1
00107Er 1  48                   pha
00107Fr 1  A5 C3                lda     TXTPTR
001081r 1  48                   pha
001082r 1  B1 9C                lda     (FNCNAM),y
001084r 1  85 C3                sta     TXTPTR
001086r 1  C8                   iny
001087r 1  B1 9C                lda     (FNCNAM),y
001089r 1  85 C4                sta     TXTPTR+1
00108Br 1  A5 96                lda     VARPNT+1
00108Dr 1  48                   pha
00108Er 1  A5 95                lda     VARPNT
001090r 1  48                   pha
001091r 1  20 rr rr             jsr     FRMNUM
001094r 1  68                   pla
001095r 1  85 9C                sta     FNCNAM
001097r 1  68                   pla
001098r 1  85 9D                sta     FNCNAM+1
00109Ar 1  20 C2 00             jsr     CHRGOT
00109Dr 1  F0 03                beq     L324A
00109Fr 1  4C rr rr             jmp     SYNERR
0010A2r 1               L324A:
0010A2r 1  68                   pla
0010A3r 1  85 C3                sta     TXTPTR
0010A5r 1  68                   pla
0010A6r 1  85 C4                sta     TXTPTR+1
0010A8r 1               L3250:
0010A8r 1  A0 00                ldy     #$00
0010AAr 1  68                   pla
0010ABr 1  91 9C                sta     (FNCNAM),y
0010ADr 1  68                   pla
0010AEr 1  C8                   iny
0010AFr 1  91 9C                sta     (FNCNAM),y
0010B1r 1  68                   pla
0010B2r 1  C8                   iny
0010B3r 1  91 9C                sta     (FNCNAM),y
0010B5r 1  68                   pla
0010B6r 1  C8                   iny
0010B7r 1  91 9C                sta     (FNCNAM),y
0010B9r 1  60                   rts
0010BAr 1               ; ----------------------------------------------------------------------------
0010BAr 1               ; "STR$" FUNCTION
0010BAr 1               ; ----------------------------------------------------------------------------
0010BAr 1               STR:
0010BAr 1  20 rr rr             jsr     CHKNUM
0010BDr 1  A0 00                ldy     #$00
0010BFr 1  20 rr rr             jsr     FOUT1
0010C2r 1  68                   pla
0010C3r 1  68                   pla
0010C4r 1  A9 FF                lda     #$FF
0010C6r 1  A0 00                ldy     #$00
0010C8r 1  F0 12                beq     STRLIT
0010CAr 1               ; ----------------------------------------------------------------------------
0010CAr 1               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
0010CAr 1               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
0010CAr 1               ; ----------------------------------------------------------------------------
0010CAr 1               STRINI:
0010CAr 1  A6 AE                ldx     FAC_LAST-1
0010CCr 1  A4 AF                ldy     FAC_LAST
0010CEr 1  86 9E                stx     DSCPTR
0010D0r 1  84 9F                sty     DSCPTR+1
0010D2r 1               ; ----------------------------------------------------------------------------
0010D2r 1               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
0010D2r 1               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
0010D2r 1               ; ----------------------------------------------------------------------------
0010D2r 1               STRSPA:
0010D2r 1  20 rr rr             jsr     GETSPA
0010D5r 1  86 AD                stx     FAC+1
0010D7r 1  84 AE                sty     FAC+2
0010D9r 1  85 AC                sta     FAC
0010DBr 1  60                   rts
0010DCr 1               ; ----------------------------------------------------------------------------
0010DCr 1               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
0010DCr 1               ; AND TERMINATED BY $00 OR QUOTATION MARK
0010DCr 1               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
0010DCr 1               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
0010DCr 1               ; ----------------------------------------------------------------------------
0010DCr 1               STRLIT:
0010DCr 1  A2 22                ldx     #$22
0010DEr 1  86 5B                stx     CHARAC
0010E0r 1  86 5C                stx     ENDCHR
0010E2r 1               ; ----------------------------------------------------------------------------
0010E2r 1               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
0010E2r 1               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
0010E2r 1               ;
0010E2r 1               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
0010E2r 1               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
0010E2r 1               ; ----------------------------------------------------------------------------
0010E2r 1               STRLT2:
0010E2r 1  85 B8                sta     STRNG1
0010E4r 1  84 B9                sty     STRNG1+1
0010E6r 1  85 AD                sta     FAC+1
0010E8r 1  84 AE                sty     FAC+2
0010EAr 1  A0 FF                ldy     #$FF
0010ECr 1               L3298:
0010ECr 1  C8                   iny
0010EDr 1  B1 B8                lda     (STRNG1),y
0010EFr 1  F0 0C                beq     L32A9
0010F1r 1  C5 5B                cmp     CHARAC
0010F3r 1  F0 04                beq     L32A5
0010F5r 1  C5 5C                cmp     ENDCHR
0010F7r 1  D0 F3                bne     L3298
0010F9r 1               L32A5:
0010F9r 1  C9 22                cmp     #$22
0010FBr 1  F0 01                beq     L32AA
0010FDr 1               L32A9:
0010FDr 1  18                   clc
0010FEr 1               L32AA:
0010FEr 1  84 AC                sty     FAC
001100r 1  98                   tya
001101r 1  65 B8                adc     STRNG1
001103r 1  85 BA                sta     STRNG2
001105r 1  A6 B9                ldx     STRNG1+1
001107r 1  90 01                bcc     L32B6
001109r 1  E8                   inx
00110Ar 1               L32B6:
00110Ar 1  86 BB                stx     STRNG2+1
00110Cr 1  A5 B9                lda     STRNG1+1
00110Er 1  D0 0B                bne     PUTNEW
001110r 1  98                   tya
001111r 1  20 rr rr             jsr     STRINI
001114r 1  A6 B8                ldx     STRNG1
001116r 1  A4 B9                ldy     STRNG1+1
001118r 1  20 rr rr             jsr     MOVSTR
00111Br 1               ; ----------------------------------------------------------------------------
00111Br 1               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
00111Br 1               ;
00111Br 1               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
00111Br 1               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
00111Br 1               ; ----------------------------------------------------------------------------
00111Br 1               PUTNEW:
00111Br 1  A6 65                ldx     TEMPPT
00111Dr 1  E0 71                cpx     #TEMPST+9
00111Fr 1  D0 05                bne     PUTEMP
001121r 1  A2 1C                ldx     #ERR_FRMCPX
001123r 1               JERR:
001123r 1  4C rr rr             jmp     ERROR
001126r 1               PUTEMP:
001126r 1  A5 AC                lda     FAC
001128r 1  95 00                sta     0,x
00112Ar 1  A5 AD                lda     FAC+1
00112Cr 1  95 01                sta     1,x
00112Er 1  A5 AE                lda     FAC+2
001130r 1  95 02                sta     2,x
001132r 1  A0 00                ldy     #$00
001134r 1  86 AE                stx     FAC_LAST-1
001136r 1  84 AF                sty     FAC_LAST
001138r 1  88                   dey
001139r 1  84 5F                sty     VALTYP
00113Br 1  86 66                stx     LASTPT
00113Dr 1  E8                   inx
00113Er 1  E8                   inx
00113Fr 1  E8                   inx
001140r 1  86 65                stx     TEMPPT
001142r 1  60                   rts
001143r 1               ; ----------------------------------------------------------------------------
001143r 1               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
001143r 1               ; (A)=# BYTES SPACE TO MAKE
001143r 1               ;
001143r 1               ; RETURN WITH (A) SAME,
001143r 1               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
001143r 1               ; ----------------------------------------------------------------------------
001143r 1               GETSPA:
001143r 1  46 60                lsr     DATAFLG
001145r 1               L32F1:
001145r 1  48                   pha
001146r 1  49 FF                eor     #$FF
001148r 1  38                   sec
001149r 1  65 81                adc     FRETOP
00114Br 1  A4 82                ldy     FRETOP+1
00114Dr 1  B0 01                bcs     L32FC
00114Fr 1  88                   dey
001150r 1               L32FC:
001150r 1  C4 80                cpy     STREND+1
001152r 1  90 11                bcc     L3311
001154r 1  D0 04                bne     L3306
001156r 1  C5 7F                cmp     STREND
001158r 1  90 0B                bcc     L3311
00115Ar 1               L3306:
00115Ar 1  85 81                sta     FRETOP
00115Cr 1  84 82                sty     FRETOP+1
00115Er 1  85 83                sta     FRESPC
001160r 1  84 84                sty     FRESPC+1
001162r 1  AA                   tax
001163r 1  68                   pla
001164r 1  60                   rts
001165r 1               L3311:
001165r 1  A2 0C                ldx     #ERR_MEMFULL
001167r 1  A5 60                lda     DATAFLG
001169r 1  30 B8                bmi     JERR
00116Br 1  20 rr rr             jsr     GARBAG
00116Er 1  A9 80                lda     #$80
001170r 1  85 60                sta     DATAFLG
001172r 1  68                   pla
001173r 1  D0 D0                bne     L32F1
001175r 1               ; ----------------------------------------------------------------------------
001175r 1               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
001175r 1               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
001175r 1               ; BELOW STRING AREA DOWN TO STREND.
001175r 1               ; ----------------------------------------------------------------------------
001175r 1               GARBAG:
001175r 1  A6 85                ldx     MEMSIZ
001177r 1  A5 86                lda     MEMSIZ+1
001179r 1               FINDHIGHESTSTRING:
001179r 1  86 81                stx     FRETOP
00117Br 1  85 82                sta     FRETOP+1
00117Dr 1  A0 00                ldy     #$00
00117Fr 1  84 9D                sty     FNCNAM+1
001181r 1  A5 7F                lda     STREND
001183r 1  A6 80                ldx     STREND+1
001185r 1  85 AA                sta     LOWTR
001187r 1  86 AB                stx     LOWTR+1
001189r 1  A9 68                lda     #TEMPST
00118Br 1  A2 00                ldx     #$00
00118Dr 1  85 71                sta     INDEX
00118Fr 1  86 72                stx     INDEX+1
001191r 1               L333D:
001191r 1  C5 65                cmp     TEMPPT
001193r 1  F0 05                beq     L3346
001195r 1  20 rr rr             jsr     CHECK_VARIABLE
001198r 1  F0 F7                beq     L333D
00119Ar 1               L3346:
00119Ar 1  A9 06                lda     #BYTES_PER_VARIABLE
00119Cr 1  85 A0                sta     DSCLEN
00119Er 1  A5 7B                lda     VARTAB
0011A0r 1  A6 7C                ldx     VARTAB+1
0011A2r 1  85 71                sta     INDEX
0011A4r 1  86 72                stx     INDEX+1
0011A6r 1               L3352:
0011A6r 1  E4 7E                cpx     ARYTAB+1
0011A8r 1  D0 04                bne     L335A
0011AAr 1  C5 7D                cmp     ARYTAB
0011ACr 1  F0 05                beq     L335F
0011AEr 1               L335A:
0011AEr 1  20 rr rr             jsr     CHECK_SIMPLE_VARIABLE
0011B1r 1  F0 F3                beq     L3352
0011B3r 1               L335F:
0011B3r 1  85 A4                sta     HIGHDS
0011B5r 1  86 A5                stx     HIGHDS+1
0011B7r 1  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
0011B9r 1  85 A0                sta     DSCLEN
0011BBr 1               L3367:
0011BBr 1  A5 A4                lda     HIGHDS
0011BDr 1  A6 A5                ldx     HIGHDS+1
0011BFr 1               L336B:
0011BFr 1  E4 80                cpx     STREND+1
0011C1r 1  D0 07                bne     L3376
0011C3r 1  C5 7F                cmp     STREND
0011C5r 1  D0 03                bne     L3376
0011C7r 1  4C rr rr             jmp     MOVE_HIGHEST_STRING_TO_TOP
0011CAr 1               L3376:
0011CAr 1  85 71                sta     INDEX
0011CCr 1  86 72                stx     INDEX+1
0011CEr 1  A0 01                ldy     #$01
0011D0r 1  B1 71                lda     (INDEX),y
0011D2r 1  08                   php
0011D3r 1  C8                   iny
0011D4r 1  B1 71                lda     (INDEX),y
0011D6r 1  65 A4                adc     HIGHDS
0011D8r 1  85 A4                sta     HIGHDS
0011DAr 1  C8                   iny
0011DBr 1  B1 71                lda     (INDEX),y
0011DDr 1  65 A5                adc     HIGHDS+1
0011DFr 1  85 A5                sta     HIGHDS+1
0011E1r 1  28                   plp
0011E2r 1  10 D7                bpl     L3367
0011E4r 1  C8                   iny
0011E5r 1  B1 71                lda     (INDEX),y
0011E7r 1  0A                   asl     a
0011E8r 1  69 05                adc     #$05
0011EAr 1  65 71                adc     INDEX
0011ECr 1  85 71                sta     INDEX
0011EEr 1  90 02                bcc     L33A7
0011F0r 1  E6 72                inc     INDEX+1
0011F2r 1               L33A7:
0011F2r 1  A6 72                ldx     INDEX+1
0011F4r 1               L33A9:
0011F4r 1  E4 A5                cpx     HIGHDS+1
0011F6r 1  D0 04                bne     L33B1
0011F8r 1  C5 A4                cmp     HIGHDS
0011FAr 1  F0 C3                beq     L336B
0011FCr 1               L33B1:
0011FCr 1  20 rr rr             jsr     CHECK_VARIABLE
0011FFr 1  F0 F3                beq     L33A9
001201r 1               ; ----------------------------------------------------------------------------
001201r 1               ; PROCESS A SIMPLE VARIABLE
001201r 1               ; ----------------------------------------------------------------------------
001201r 1               CHECK_SIMPLE_VARIABLE:
001201r 1  C8                   iny
001202r 1  B1 71                lda     (INDEX),y
001204r 1  10 30                bpl     CHECK_BUMP
001206r 1  C8                   iny
001207r 1               ; ----------------------------------------------------------------------------
001207r 1               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
001207r 1               ; ----------------------------------------------------------------------------
001207r 1               CHECK_VARIABLE:
001207r 1  B1 71                lda     (INDEX),y
001209r 1  F0 2B                beq     CHECK_BUMP
00120Br 1  C8                   iny
00120Cr 1  B1 71                lda     (INDEX),y
00120Er 1  AA                   tax
00120Fr 1  C8                   iny
001210r 1  B1 71                lda     (INDEX),y
001212r 1  C5 82                cmp     FRETOP+1
001214r 1  90 06                bcc     L33D5
001216r 1  D0 1E                bne     CHECK_BUMP
001218r 1  E4 81                cpx     FRETOP
00121Ar 1  B0 1A                bcs     CHECK_BUMP
00121Cr 1               L33D5:
00121Cr 1  C5 AB                cmp     LOWTR+1
00121Er 1  90 16                bcc     CHECK_BUMP
001220r 1  D0 04                bne     L33DF
001222r 1  E4 AA                cpx     LOWTR
001224r 1  90 10                bcc     CHECK_BUMP
001226r 1               L33DF:
001226r 1  86 AA                stx     LOWTR
001228r 1  85 AB                sta     LOWTR+1
00122Ar 1  A5 71                lda     INDEX
00122Cr 1  A6 72                ldx     INDEX+1
00122Er 1  85 9C                sta     FNCNAM
001230r 1  86 9D                stx     FNCNAM+1
001232r 1  A5 A0                lda     DSCLEN
001234r 1  85 A2                sta     Z52
001236r 1               ; ----------------------------------------------------------------------------
001236r 1               ; ADD (DSCLEN) TO PNTR IN INDEX
001236r 1               ; RETURN WITH Y=0, PNTR ALSO IN X,A
001236r 1               ; ----------------------------------------------------------------------------
001236r 1               CHECK_BUMP:
001236r 1  A5 A0                lda     DSCLEN
001238r 1  18                   clc
001239r 1  65 71                adc     INDEX
00123Br 1  85 71                sta     INDEX
00123Dr 1  90 02                bcc     L33FA
00123Fr 1  E6 72                inc     INDEX+1
001241r 1               L33FA:
001241r 1  A6 72                ldx     INDEX+1
001243r 1  A0 00                ldy     #$00
001245r 1  60                   rts
001246r 1               ; ----------------------------------------------------------------------------
001246r 1               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
001246r 1               ; TO TOP AND GO BACK FOR ANOTHER
001246r 1               ; ----------------------------------------------------------------------------
001246r 1               MOVE_HIGHEST_STRING_TO_TOP:
001246r 1  A6 9D                ldx     FNCNAM+1
001248r 1  F0 F7                beq     L33FA
00124Ar 1  A5 A2                lda     Z52
00124Cr 1  29 04                and     #$04
00124Er 1  4A                   lsr     a
00124Fr 1  A8                   tay
001250r 1  85 A2                sta     Z52
001252r 1  B1 9C                lda     (FNCNAM),y
001254r 1  65 AA                adc     LOWTR
001256r 1  85 A6                sta     HIGHTR
001258r 1  A5 AB                lda     LOWTR+1
00125Ar 1  69 00                adc     #$00
00125Cr 1  85 A7                sta     HIGHTR+1
00125Er 1  A5 81                lda     FRETOP
001260r 1  A6 82                ldx     FRETOP+1
001262r 1  85 A4                sta     HIGHDS
001264r 1  86 A5                stx     HIGHDS+1
001266r 1  20 rr rr             jsr     BLTU2
001269r 1  A4 A2                ldy     Z52
00126Br 1  C8                   iny
00126Cr 1  A5 A4                lda     HIGHDS
00126Er 1  91 9C                sta     (FNCNAM),y
001270r 1  AA                   tax
001271r 1  E6 A5                inc     HIGHDS+1
001273r 1  A5 A5                lda     HIGHDS+1
001275r 1  C8                   iny
001276r 1  91 9C                sta     (FNCNAM),y
001278r 1  4C rr rr             jmp     FINDHIGHESTSTRING
00127Br 1               ; ----------------------------------------------------------------------------
00127Br 1               ; CONCATENATE TWO STRINGS
00127Br 1               ; ----------------------------------------------------------------------------
00127Br 1               CAT:
00127Br 1  A5 AF                lda     FAC_LAST
00127Dr 1  48                   pha
00127Er 1  A5 AE                lda     FAC_LAST-1
001280r 1  48                   pha
001281r 1  20 rr rr             jsr     FRM_ELEMENT
001284r 1  20 rr rr             jsr     CHKSTR
001287r 1  68                   pla
001288r 1  85 B8                sta     STRNG1
00128Ar 1  68                   pla
00128Br 1  85 B9                sta     STRNG1+1
00128Dr 1  A0 00                ldy     #$00
00128Fr 1  B1 B8                lda     (STRNG1),y
001291r 1  18                   clc
001292r 1  71 AE                adc     (FAC_LAST-1),y
001294r 1  90 05                bcc     L3454
001296r 1  A2 1A                ldx     #ERR_STRLONG
001298r 1  4C rr rr             jmp     ERROR
00129Br 1               L3454:
00129Br 1  20 rr rr             jsr     STRINI
00129Er 1  20 rr rr             jsr     MOVINS
0012A1r 1  A5 9E                lda     DSCPTR
0012A3r 1  A4 9F                ldy     DSCPTR+1
0012A5r 1  20 rr rr             jsr     FRETMP
0012A8r 1  20 rr rr             jsr     MOVSTR1
0012ABr 1  A5 B8                lda     STRNG1
0012ADr 1  A4 B9                ldy     STRNG1+1
0012AFr 1  20 rr rr             jsr     FRETMP
0012B2r 1  20 rr rr             jsr     PUTNEW
0012B5r 1  4C rr rr             jmp     FRMEVL2
0012B8r 1               ; ----------------------------------------------------------------------------
0012B8r 1               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
0012B8r 1               ; AND MOVE DESCRIBED STRING TO (FRESPC)
0012B8r 1               ; ----------------------------------------------------------------------------
0012B8r 1               MOVINS:
0012B8r 1  A0 00                ldy     #$00
0012BAr 1  B1 B8                lda     (STRNG1),y
0012BCr 1  48                   pha
0012BDr 1  C8                   iny
0012BEr 1  B1 B8                lda     (STRNG1),y
0012C0r 1  AA                   tax
0012C1r 1  C8                   iny
0012C2r 1  B1 B8                lda     (STRNG1),y
0012C4r 1  A8                   tay
0012C5r 1  68                   pla
0012C6r 1               ; ----------------------------------------------------------------------------
0012C6r 1               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
0012C6r 1               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
0012C6r 1               ; ----------------------------------------------------------------------------
0012C6r 1               MOVSTR:
0012C6r 1  86 71                stx     INDEX
0012C8r 1  84 72                sty     INDEX+1
0012CAr 1               MOVSTR1:
0012CAr 1  A8                   tay
0012CBr 1  F0 0A                beq     L3490
0012CDr 1  48                   pha
0012CEr 1               L3487:
0012CEr 1  88                   dey
0012CFr 1  B1 71                lda     (INDEX),y
0012D1r 1  91 83                sta     (FRESPC),y
0012D3r 1  98                   tya
0012D4r 1  D0 F8                bne     L3487
0012D6r 1  68                   pla
0012D7r 1               L3490:
0012D7r 1  18                   clc
0012D8r 1  65 83                adc     FRESPC
0012DAr 1  85 83                sta     FRESPC
0012DCr 1  90 02                bcc     L3499
0012DEr 1  E6 84                inc     FRESPC+1
0012E0r 1               L3499:
0012E0r 1  60                   rts
0012E1r 1               ; ----------------------------------------------------------------------------
0012E1r 1               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
0012E1r 1               ; ----------------------------------------------------------------------------
0012E1r 1               FRESTR:
0012E1r 1  20 rr rr             jsr     CHKSTR
0012E4r 1               ; ----------------------------------------------------------------------------
0012E4r 1               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
0012E4r 1               ; A TEMPORARY STRING, RELEASE IT.
0012E4r 1               ; ----------------------------------------------------------------------------
0012E4r 1               FREFAC:
0012E4r 1  A5 AE                lda     FAC_LAST-1
0012E6r 1  A4 AF                ldy     FAC_LAST
0012E8r 1               ; ----------------------------------------------------------------------------
0012E8r 1               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
0012E8r 1               ; A TEMPORARY STRING, RELEASE IT.
0012E8r 1               ; ----------------------------------------------------------------------------
0012E8r 1               FRETMP:
0012E8r 1  85 71                sta     INDEX
0012EAr 1  84 72                sty     INDEX+1
0012ECr 1  20 rr rr             jsr     FRETMS
0012EFr 1  08                   php
0012F0r 1  A0 00                ldy     #$00
0012F2r 1  B1 71                lda     (INDEX),y
0012F4r 1  48                   pha
0012F5r 1  C8                   iny
0012F6r 1  B1 71                lda     (INDEX),y
0012F8r 1  AA                   tax
0012F9r 1  C8                   iny
0012FAr 1  B1 71                lda     (INDEX),y
0012FCr 1  A8                   tay
0012FDr 1  68                   pla
0012FEr 1  28                   plp
0012FFr 1  D0 13                bne     L34CD
001301r 1  C4 82                cpy     FRETOP+1
001303r 1  D0 0F                bne     L34CD
001305r 1  E4 81                cpx     FRETOP
001307r 1  D0 0B                bne     L34CD
001309r 1  48                   pha
00130Ar 1  18                   clc
00130Br 1  65 81                adc     FRETOP
00130Dr 1  85 81                sta     FRETOP
00130Fr 1  90 02                bcc     L34CC
001311r 1  E6 82                inc     FRETOP+1
001313r 1               L34CC:
001313r 1  68                   pla
001314r 1               L34CD:
001314r 1  86 71                stx     INDEX
001316r 1  84 72                sty     INDEX+1
001318r 1  60                   rts
001319r 1               ; ----------------------------------------------------------------------------
001319r 1               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
001319r 1               ; ----------------------------------------------------------------------------
001319r 1               FRETMS:
001319r 1  C4 67                cpy     LASTPT+1
00131Br 1  D0 0C                bne     L34E2
00131Dr 1  C5 66                cmp     LASTPT
00131Fr 1  D0 08                bne     L34E2
001321r 1  85 65                sta     TEMPPT
001323r 1  E9 03                sbc     #$03
001325r 1  85 66                sta     LASTPT
001327r 1  A0 00                ldy     #$00
001329r 1               L34E2:
001329r 1  60                   rts
00132Ar 1               ; ----------------------------------------------------------------------------
00132Ar 1               ; "CHR$" FUNCTION
00132Ar 1               ; ----------------------------------------------------------------------------
00132Ar 1               CHRSTR:
00132Ar 1  20 rr rr             jsr     CONINT
00132Dr 1  8A                   txa
00132Er 1  48                   pha
00132Fr 1  A9 01                lda     #$01
001331r 1  20 rr rr             jsr     STRSPA
001334r 1  68                   pla
001335r 1  A0 00                ldy     #$00
001337r 1  91 AD                sta     (FAC+1),y
001339r 1  68                   pla
00133Ar 1  68                   pla
00133Br 1  4C rr rr             jmp     PUTNEW
00133Er 1               ; ----------------------------------------------------------------------------
00133Er 1               ; "LEFT$" FUNCTION
00133Er 1               ; ----------------------------------------------------------------------------
00133Er 1               LEFTSTR:
00133Er 1  20 rr rr             jsr     SUBSTRING_SETUP
001341r 1  D1 9E                cmp     (DSCPTR),y
001343r 1  98                   tya
001344r 1               SUBSTRING1:
001344r 1  90 04                bcc     L3503
001346r 1  B1 9E                lda     (DSCPTR),y
001348r 1  AA                   tax
001349r 1  98                   tya
00134Ar 1               L3503:
00134Ar 1  48                   pha
00134Br 1               SUBSTRING2:
00134Br 1  8A                   txa
00134Cr 1               SUBSTRING3:
00134Cr 1  48                   pha
00134Dr 1  20 rr rr             jsr     STRSPA
001350r 1  A5 9E                lda     DSCPTR
001352r 1  A4 9F                ldy     DSCPTR+1
001354r 1  20 rr rr             jsr     FRETMP
001357r 1  68                   pla
001358r 1  A8                   tay
001359r 1  68                   pla
00135Ar 1  18                   clc
00135Br 1  65 71                adc     INDEX
00135Dr 1  85 71                sta     INDEX
00135Fr 1  90 02                bcc     L351C
001361r 1  E6 72                inc     INDEX+1
001363r 1               L351C:
001363r 1  98                   tya
001364r 1  20 rr rr             jsr     MOVSTR1
001367r 1  4C rr rr             jmp     PUTNEW
00136Ar 1               ; ----------------------------------------------------------------------------
00136Ar 1               ; "RIGHT$" FUNCTION
00136Ar 1               ; ----------------------------------------------------------------------------
00136Ar 1               RIGHTSTR:
00136Ar 1  20 rr rr             jsr     SUBSTRING_SETUP
00136Dr 1  18                   clc
00136Er 1  F1 9E                sbc     (DSCPTR),y
001370r 1  49 FF                eor     #$FF
001372r 1  4C rr rr             jmp     SUBSTRING1
001375r 1               ; ----------------------------------------------------------------------------
001375r 1               ; "MID$" FUNCTION
001375r 1               ; ----------------------------------------------------------------------------
001375r 1               MIDSTR:
001375r 1  A9 FF                lda     #$FF
001377r 1  85 AF                sta     FAC_LAST
001379r 1  20 C2 00             jsr     CHRGOT
00137Cr 1  C9 29                cmp     #$29
00137Er 1  F0 06                beq     L353F
001380r 1  20 rr rr             jsr     CHKCOM
001383r 1  20 rr rr             jsr     GETBYT
001386r 1               L353F:
001386r 1  20 rr rr             jsr     SUBSTRING_SETUP
001389r 1  CA                   dex
00138Ar 1  8A                   txa
00138Br 1  48                   pha
00138Cr 1  18                   clc
00138Dr 1  A2 00                ldx     #$00
00138Fr 1  F1 9E                sbc     (DSCPTR),y
001391r 1  B0 B8                bcs     SUBSTRING2
001393r 1  49 FF                eor     #$FF
001395r 1  C5 AF                cmp     FAC_LAST
001397r 1  90 B3                bcc     SUBSTRING3
001399r 1  A5 AF                lda     FAC_LAST
00139Br 1  B0 AF                bcs     SUBSTRING3
00139Dr 1               ; ----------------------------------------------------------------------------
00139Dr 1               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
00139Dr 1               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
00139Dr 1               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
00139Dr 1               ; ----------------------------------------------------------------------------
00139Dr 1               SUBSTRING_SETUP:
00139Dr 1  20 rr rr             jsr     CHKCLS
0013A0r 1  68                   pla
0013A1r 1  85 A2                sta     JMPADRS+1
0013A3r 1  68                   pla
0013A4r 1  85 A3                sta     JMPADRS+2
0013A6r 1  68                   pla
0013A7r 1  68                   pla
0013A8r 1  68                   pla
0013A9r 1  AA                   tax
0013AAr 1  68                   pla
0013ABr 1  85 9E                sta     DSCPTR
0013ADr 1  68                   pla
0013AEr 1  85 9F                sta     DSCPTR+1
0013B0r 1  A0 00                ldy     #$00
0013B2r 1  8A                   txa
0013B3r 1  F0 21                beq     GOIQ
0013B5r 1  E6 A2                inc     JMPADRS+1
0013B7r 1  6C A2 00             jmp     (JMPADRS+1)
0013BAr 1               ; ----------------------------------------------------------------------------
0013BAr 1               ; "LEN" FUNCTION
0013BAr 1               ; ----------------------------------------------------------------------------
0013BAr 1               LEN:
0013BAr 1  20 rr rr             jsr     GETSTR
0013BDr 1               SNGFLT1:
0013BDr 1  4C rr rr             jmp     SNGFLT
0013C0r 1               ; ----------------------------------------------------------------------------
0013C0r 1               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
0013C0r 1               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
0013C0r 1               ; ----------------------------------------------------------------------------
0013C0r 1               GETSTR:
0013C0r 1  20 rr rr             jsr     FRESTR
0013C3r 1  A2 00                ldx     #$00
0013C5r 1  86 5F                stx     VALTYP
0013C7r 1  A8                   tay
0013C8r 1  60                   rts
0013C9r 1               ; ----------------------------------------------------------------------------
0013C9r 1               ; "ASC" FUNCTION
0013C9r 1               ; ----------------------------------------------------------------------------
0013C9r 1               ASC:
0013C9r 1  20 rr rr             jsr     GETSTR
0013CCr 1  F0 08                beq     GOIQ
0013CEr 1  A0 00                ldy     #$00
0013D0r 1  B1 71                lda     (INDEX),y
0013D2r 1  A8                   tay
0013D3r 1  4C rr rr             jmp     SNGFLT1
0013D6r 1               ; ----------------------------------------------------------------------------
0013D6r 1               GOIQ:
0013D6r 1  4C rr rr             jmp     IQERR
0013D9r 1               ; ----------------------------------------------------------------------------
0013D9r 1               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
0013D9r 1               ; TO SINGLE BYTE IN X-REG
0013D9r 1               ; ----------------------------------------------------------------------------
0013D9r 1               GTBYTC:
0013D9r 1  20 BC 00             jsr     CHRGET
0013DCr 1               ; ----------------------------------------------------------------------------
0013DCr 1               ; EVALUATE EXPRESSION AT TXTPTR, AND
0013DCr 1               ; CONVERT IT TO SINGLE BYTE IN X-REG
0013DCr 1               ; ----------------------------------------------------------------------------
0013DCr 1               GETBYT:
0013DCr 1  20 rr rr             jsr     FRMNUM
0013DFr 1               ; ----------------------------------------------------------------------------
0013DFr 1               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
0013DFr 1               ; ----------------------------------------------------------------------------
0013DFr 1               CONINT:
0013DFr 1  20 rr rr             jsr     MKINT
0013E2r 1  A6 AE                ldx     FAC_LAST-1
0013E4r 1  D0 F0                bne     GOIQ
0013E6r 1  A6 AF                ldx     FAC_LAST
0013E8r 1  4C C2 00             jmp     CHRGOT
0013EBr 1               ; ----------------------------------------------------------------------------
0013EBr 1               ; "VAL" FUNCTION
0013EBr 1               ; ----------------------------------------------------------------------------
0013EBr 1               VAL:
0013EBr 1  20 rr rr             jsr     GETSTR
0013EEr 1  D0 03                bne     L35AC
0013F0r 1  4C rr rr             jmp     ZERO_FAC
0013F3r 1               L35AC:
0013F3r 1  A6 C3                ldx     TXTPTR
0013F5r 1  A4 C4                ldy     TXTPTR+1
0013F7r 1  86 BA                stx     STRNG2
0013F9r 1  84 BB                sty     STRNG2+1
0013FBr 1  A6 71                ldx     INDEX
0013FDr 1  86 C3                stx     TXTPTR
0013FFr 1  18                   clc
001400r 1  65 71                adc     INDEX
001402r 1  85 73                sta     DEST
001404r 1  A6 72                ldx     INDEX+1
001406r 1  86 C4                stx     TXTPTR+1
001408r 1  90 01                bcc     L35C4
00140Ar 1  E8                   inx
00140Br 1               L35C4:
00140Br 1  86 74                stx     DEST+1
00140Dr 1  A0 00                ldy     #$00
00140Fr 1  B1 73                lda     (DEST),y
001411r 1  48                   pha
001412r 1  A9 00                lda     #$00
001414r 1  91 73                sta     (DEST),y
001416r 1  20 C2 00             jsr     CHRGOT
001419r 1  20 rr rr             jsr     FIN
00141Cr 1  68                   pla
00141Dr 1  A0 00                ldy     #$00
00141Fr 1  91 73                sta     (DEST),y
001421r 1               ; ----------------------------------------------------------------------------
001421r 1               ; COPY STRNG2 INTO TXTPTR
001421r 1               ; ----------------------------------------------------------------------------
001421r 1               POINT:
001421r 1  A6 BA                ldx     STRNG2
001423r 1  A4 BB                ldy     STRNG2+1
001425r 1  86 C3                stx     TXTPTR
001427r 1  84 C4                sty     TXTPTR+1
001429r 1  60                   rts
00142Ar 1               ; ----------------------------------------------------------------------------
00142Ar 1               ; ----------------------------------------------------------------------------
00142Ar 1               ; ----------------------------------------------------------------------------
00142Ar 1               ; ----------------------------------------------------------------------------
00142Ar 1               ; EVALUATE "EXP1,EXP2"
00142Ar 1               ;
00142Ar 1               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
00142Ar 1               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
00142Ar 1               ; ----------------------------------------------------------------------------
00142Ar 1               GTNUM:
00142Ar 1  20 rr rr             jsr     FRMNUM
00142Dr 1  20 rr rr             jsr     GETADR
001430r 1               ; ----------------------------------------------------------------------------
001430r 1               ; EVALUATE ",EXPRESSION"
001430r 1               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
001430r 1               ; ----------------------------------------------------------------------------
001430r 1               COMBYTE:
001430r 1  20 rr rr             jsr     CHKCOM
001433r 1  4C rr rr             jmp     GETBYT
001436r 1               ; ----------------------------------------------------------------------------
001436r 1               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
001436r 1               ; ----------------------------------------------------------------------------
001436r 1               GETADR:
001436r 1  A5 B0                lda     FACSIGN
001438r 1  30 9C                bmi     GOIQ
00143Ar 1  A5 AC                lda     FAC
00143Cr 1  C9 91                cmp     #$91
00143Er 1  B0 96                bcs     GOIQ
001440r 1  20 rr rr             jsr     QINT
001443r 1  A5 AE                lda     FAC_LAST-1
001445r 1  A4 AF                ldy     FAC_LAST
001447r 1  84 11                sty     LINNUM
001449r 1  85 12                sta     LINNUM+1
00144Br 1  60                   rts
00144Cr 1               ; ----------------------------------------------------------------------------
00144Cr 1               ; "PEEK" FUNCTION
00144Cr 1               ; ----------------------------------------------------------------------------
00144Cr 1               PEEK:
00144Cr 1  20 rr rr             jsr     GETADR
00144Fr 1  A0 00                ldy     #$00
001451r 1               ; disallow PEEK between $C000 and $DFFF
001451r 1  B1 11                lda     (LINNUM),y
001453r 1  A8                   tay
001454r 1  4C rr rr             jmp     SNGFLT
001457r 1               ; ----------------------------------------------------------------------------
001457r 1               ; "POKE" STATEMENT
001457r 1               ; ----------------------------------------------------------------------------
001457r 1               POKE:
001457r 1  20 rr rr             jsr     GTNUM
00145Ar 1  8A                   txa
00145Br 1  A0 00                ldy     #$00
00145Dr 1  91 11                sta     (LINNUM),y
00145Fr 1  60                   rts
001460r 1               ; ----------------------------------------------------------------------------
001460r 1               ; "WAIT" STATEMENT
001460r 1               ; ----------------------------------------------------------------------------
001460r 1               WAIT:
001460r 1  20 rr rr             jsr     GTNUM
001463r 1  86 97                stx     FORPNT
001465r 1  A2 00                ldx     #$00
001467r 1  20 C2 00             jsr     CHRGOT
00146Ar 1  F0 03                beq     L3628
00146Cr 1  20 rr rr             jsr     COMBYTE
00146Fr 1               L3628:
00146Fr 1  86 98                stx     FORPNT+1
001471r 1  A0 00                ldy     #$00
001473r 1               L362C:
001473r 1  B1 11                lda     (LINNUM),y
001475r 1  45 98                eor     FORPNT+1
001477r 1  25 97                and     FORPNT
001479r 1  F0 F8                beq     L362C
00147Br 1               RTS3:
00147Br 1  60                   rts
00147Cr 1               TEMP1X = TEMP1+(5-BYTES_FP)
00147Cr 1               ; ----------------------------------------------------------------------------
00147Cr 1               ; ADD 0.5 TO FAC
00147Cr 1               ; ----------------------------------------------------------------------------
00147Cr 1               FADDH:
00147Cr 1  A9 rr                lda     #<CON_HALF
00147Er 1  A0 rr                ldy     #>CON_HALF
001480r 1  4C rr rr             jmp     FADD
001483r 1               ; ----------------------------------------------------------------------------
001483r 1               ; FAC = (Y,A) - FAC
001483r 1               ; ----------------------------------------------------------------------------
001483r 1               FSUB:
001483r 1  20 rr rr             jsr     LOAD_ARG_FROM_YA
001486r 1               ; ----------------------------------------------------------------------------
001486r 1               ; FAC = ARG - FAC
001486r 1               ; ----------------------------------------------------------------------------
001486r 1               FSUBT:
001486r 1  A5 B0                lda     FACSIGN
001488r 1  49 FF                eor     #$FF
00148Ar 1  85 B0                sta     FACSIGN
00148Cr 1  45 B7                eor     ARGSIGN
00148Er 1  85 B8                sta     SGNCPR
001490r 1  A5 AC                lda     FAC
001492r 1  4C rr rr             jmp     FADDT
001495r 1               ; ----------------------------------------------------------------------------
001495r 1               ; Commodore BASIC V2 Easter Egg
001495r 1               ; ----------------------------------------------------------------------------
001495r 1               ; ----------------------------------------------------------------------------
001495r 1               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
001495r 1               ; ----------------------------------------------------------------------------
001495r 1               FADD1:
001495r 1  20 rr rr             jsr     SHIFT_RIGHT
001498r 1  90 3C                bcc     FADD3
00149Ar 1               ; ----------------------------------------------------------------------------
00149Ar 1               ; FAC = (Y,A) + FAC
00149Ar 1               ; ----------------------------------------------------------------------------
00149Ar 1               FADD:
00149Ar 1  20 rr rr             jsr     LOAD_ARG_FROM_YA
00149Dr 1               ; ----------------------------------------------------------------------------
00149Dr 1               ; FAC = ARG + FAC
00149Dr 1               ; ----------------------------------------------------------------------------
00149Dr 1               FADDT:
00149Dr 1  D0 03                bne     L365B
00149Fr 1  4C rr rr             jmp     COPY_ARG_TO_FAC
0014A2r 1               L365B:
0014A2r 1  A6 B9                ldx     FACEXTENSION
0014A4r 1  86 A3                stx     ARGEXTENSION
0014A6r 1  A2 B3                ldx     #ARG
0014A8r 1  A5 B3                lda     ARG
0014AAr 1               FADD2:
0014AAr 1  A8                   tay
0014ABr 1  F0 CE                beq     RTS3
0014ADr 1  38                   sec
0014AEr 1  E5 AC                sbc     FAC
0014B0r 1  F0 24                beq     FADD3
0014B2r 1  90 12                bcc     L367F
0014B4r 1  84 AC                sty     FAC
0014B6r 1  A4 B7                ldy     ARGSIGN
0014B8r 1  84 B0                sty     FACSIGN
0014BAr 1  49 FF                eor     #$FF
0014BCr 1  69 00                adc     #$00
0014BEr 1  A0 00                ldy     #$00
0014C0r 1  84 A3                sty     ARGEXTENSION
0014C2r 1  A2 AC                ldx     #FAC
0014C4r 1  D0 04                bne     L3683
0014C6r 1               L367F:
0014C6r 1  A0 00                ldy     #$00
0014C8r 1  84 B9                sty     FACEXTENSION
0014CAr 1               L3683:
0014CAr 1  C9 F9                cmp     #$F9
0014CCr 1  30 C7                bmi     FADD1
0014CEr 1  A8                   tay
0014CFr 1  A5 B9                lda     FACEXTENSION
0014D1r 1  56 01                lsr     1,x
0014D3r 1  20 rr rr             jsr     SHIFT_RIGHT4
0014D6r 1               FADD3:
0014D6r 1  24 B8                bit     SGNCPR
0014D8r 1  10 4C                bpl     FADD4
0014DAr 1  A0 AC                ldy     #FAC
0014DCr 1  E0 B3                cpx     #ARG
0014DEr 1  F0 02                beq     L369B
0014E0r 1  A0 B3                ldy     #ARG
0014E2r 1               L369B:
0014E2r 1  38                   sec
0014E3r 1  49 FF                eor     #$FF
0014E5r 1  65 A3                adc     ARGEXTENSION
0014E7r 1  85 B9                sta     FACEXTENSION
0014E9r 1  B9 03 00             lda     3,y
0014ECr 1  F5 03                sbc     3,x
0014EEr 1  85 AF                sta     FAC+3
0014F0r 1  B9 02 00             lda     2,y
0014F3r 1  F5 02                sbc     2,x
0014F5r 1  85 AE                sta     FAC+2
0014F7r 1  B9 01 00             lda     1,y
0014FAr 1  F5 01                sbc     1,x
0014FCr 1  85 AD                sta     FAC+1
0014FEr 1               ; ----------------------------------------------------------------------------
0014FEr 1               ; NORMALIZE VALUE IN FAC
0014FEr 1               ; ----------------------------------------------------------------------------
0014FEr 1               NORMALIZE_FAC1:
0014FEr 1  B0 03                bcs     NORMALIZE_FAC2
001500r 1  20 rr rr             jsr     COMPLEMENT_FAC
001503r 1               NORMALIZE_FAC2:
001503r 1  A0 00                ldy     #$00
001505r 1  98                   tya
001506r 1  18                   clc
001507r 1               L36C7:
001507r 1  A6 AD                ldx     FAC+1
001509r 1  D0 3E                bne     NORMALIZE_FAC4
00150Br 1  A6 AE                ldx     FAC+2
00150Dr 1  86 AD                stx     FAC+1
00150Fr 1  A6 AF                ldx     FAC+3
001511r 1  86 AE                stx     FAC+2
001513r 1  A6 B9                ldx     FACEXTENSION
001515r 1  86 AF                stx     FAC+3
001517r 1  84 B9                sty     FACEXTENSION
001519r 1  69 08                adc     #$08
00151Br 1               ; bugfix?
00151Br 1               ; fix does not exist on AppleSoft 2
00151Br 1  C9 18                cmp     #MANTISSA_BYTES*8
00151Dr 1  D0 E8                bne     L36C7
00151Fr 1               ; ----------------------------------------------------------------------------
00151Fr 1               ; SET FAC = 0
00151Fr 1               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
00151Fr 1               ; ----------------------------------------------------------------------------
00151Fr 1               ZERO_FAC:
00151Fr 1  A9 00                lda     #$00
001521r 1               STA_IN_FAC_SIGN_AND_EXP:
001521r 1  85 AC                sta     FAC
001523r 1               STA_IN_FAC_SIGN:
001523r 1  85 B0                sta     FACSIGN
001525r 1  60                   rts
001526r 1               ; ----------------------------------------------------------------------------
001526r 1               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
001526r 1               ; ----------------------------------------------------------------------------
001526r 1               FADD4:
001526r 1  65 A3                adc     ARGEXTENSION
001528r 1  85 B9                sta     FACEXTENSION
00152Ar 1  A5 AF                lda     FAC+3
00152Cr 1  65 B6                adc     ARG+3
00152Er 1  85 AF                sta     FAC+3
001530r 1  A5 AE                lda     FAC+2
001532r 1  65 B5                adc     ARG+2
001534r 1  85 AE                sta     FAC+2
001536r 1  A5 AD                lda     FAC+1
001538r 1  65 B4                adc     ARG+1
00153Ar 1  85 AD                sta     FAC+1
00153Cr 1  4C rr rr             jmp     NORMALIZE_FAC5
00153Fr 1               ; ----------------------------------------------------------------------------
00153Fr 1               ; FINISH NORMALIZING FAC
00153Fr 1               ; ----------------------------------------------------------------------------
00153Fr 1               NORMALIZE_FAC3:
00153Fr 1  69 01                adc     #$01
001541r 1  06 B9                asl     FACEXTENSION
001543r 1  26 AF                rol     FAC+3
001545r 1  26 AE                rol     FAC+2
001547r 1  26 AD                rol     FAC+1
001549r 1               NORMALIZE_FAC4:
001549r 1  10 F4                bpl     NORMALIZE_FAC3
00154Br 1  38                   sec
00154Cr 1  E5 AC                sbc     FAC
00154Er 1  B0 CF                bcs     ZERO_FAC
001550r 1  49 FF                eor     #$FF
001552r 1  69 01                adc     #$01
001554r 1  85 AC                sta     FAC
001556r 1               NORMALIZE_FAC5:
001556r 1  90 0C                bcc     L3764
001558r 1               NORMALIZE_FAC6:
001558r 1  E6 AC                inc     FAC
00155Ar 1  F0 36                beq     OVERFLOW
00155Cr 1  66 AD                ror     FAC+1
00155Er 1  66 AE                ror     FAC+2
001560r 1  66 AF                ror     FAC+3
001562r 1  66 B9                ror     FACEXTENSION
001564r 1               L3764:
001564r 1  60                   rts
001565r 1               ; ----------------------------------------------------------------------------
001565r 1               ; 2'S COMPLEMENT OF FAC
001565r 1               ; ----------------------------------------------------------------------------
001565r 1               COMPLEMENT_FAC:
001565r 1  A5 B0                lda     FACSIGN
001567r 1  49 FF                eor     #$FF
001569r 1  85 B0                sta     FACSIGN
00156Br 1               ; ----------------------------------------------------------------------------
00156Br 1               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
00156Br 1               ; ----------------------------------------------------------------------------
00156Br 1               COMPLEMENT_FAC_MANTISSA:
00156Br 1  A5 AD                lda     FAC+1
00156Dr 1  49 FF                eor     #$FF
00156Fr 1  85 AD                sta     FAC+1
001571r 1  A5 AE                lda     FAC+2
001573r 1  49 FF                eor     #$FF
001575r 1  85 AE                sta     FAC+2
001577r 1  A5 AF                lda     FAC+3
001579r 1  49 FF                eor     #$FF
00157Br 1  85 AF                sta     FAC+3
00157Dr 1  A5 B9                lda     FACEXTENSION
00157Fr 1  49 FF                eor     #$FF
001581r 1  85 B9                sta     FACEXTENSION
001583r 1  E6 B9                inc     FACEXTENSION
001585r 1  D0 0A                bne     RTS12
001587r 1               ; ----------------------------------------------------------------------------
001587r 1               ; INCREMENT FAC MANTISSA
001587r 1               ; ----------------------------------------------------------------------------
001587r 1               INCREMENT_FAC_MANTISSA:
001587r 1  E6 AF                inc     FAC+3
001589r 1  D0 06                bne     RTS12
00158Br 1  E6 AE                inc     FAC+2
00158Dr 1  D0 02                bne     RTS12
00158Fr 1  E6 AD                inc     FAC+1
001591r 1               RTS12:
001591r 1  60                   rts
001592r 1               OVERFLOW:
001592r 1  A2 0A                ldx     #ERR_OVERFLOW
001594r 1  4C rr rr             jmp     ERROR
001597r 1               ; ----------------------------------------------------------------------------
001597r 1               ; SHIFT 1,X THRU 5,X RIGHT
001597r 1               ; (A) = NEGATIVE OF SHIFT COUNT
001597r 1               ; (X) = POINTER TO BYTES TO BE SHIFTED
001597r 1               ;
001597r 1               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
001597r 1               ; ----------------------------------------------------------------------------
001597r 1               SHIFT_RIGHT1:
001597r 1  A2 74                ldx     #RESULT-1
001599r 1               SHIFT_RIGHT2:
001599r 1  B4 03                ldy     3,x
00159Br 1  84 B9                sty     FACEXTENSION
00159Dr 1  B4 02                ldy     2,x
00159Fr 1  94 03                sty     3,x
0015A1r 1  B4 01                ldy     1,x
0015A3r 1  94 02                sty     2,x
0015A5r 1  A4 B2                ldy     SHIFTSIGNEXT
0015A7r 1  94 01                sty     1,x
0015A9r 1               ; ----------------------------------------------------------------------------
0015A9r 1               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
0015A9r 1               ; ----------------------------------------------------------------------------
0015A9r 1               SHIFT_RIGHT:
0015A9r 1  69 08                adc     #$08
0015ABr 1  30 EC                bmi     SHIFT_RIGHT2
0015ADr 1  F0 EA                beq     SHIFT_RIGHT2
0015AFr 1  E9 08                sbc     #$08
0015B1r 1  A8                   tay
0015B2r 1  A5 B9                lda     FACEXTENSION
0015B4r 1  B0 12                bcs     SHIFT_RIGHT5
0015B6r 1               LB588:
0015B6r 1  16 01                asl     1,x
0015B8r 1  90 02                bcc     LB58E
0015BAr 1  F6 01                inc     1,x
0015BCr 1               LB58E:
0015BCr 1  76 01                ror     1,x
0015BEr 1  76 01                ror     1,x
0015C0r 1               ; ----------------------------------------------------------------------------
0015C0r 1               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
0015C0r 1               ; ----------------------------------------------------------------------------
0015C0r 1               SHIFT_RIGHT4:
0015C0r 1  76 02                ror     2,x
0015C2r 1  76 03                ror     3,x
0015C4r 1  6A                   ror     a
0015C5r 1  C8                   iny
0015C6r 1  D0 EE                bne     LB588
0015C8r 1               SHIFT_RIGHT5:
0015C8r 1  18                   clc
0015C9r 1  60                   rts
0015CAr 1               ; ----------------------------------------------------------------------------
0015CAr 1               CON_ONE:
0015CAr 1  81 00 00 00          .byte   $81,$00,$00,$00
0015CEr 1               POLY_LOG:
0015CEr 1  02           		.byte	$02
0015CFr 1  80 19 56 62  		.byte   $80,$19,$56,$62
0015D3r 1  80 76 22 F3  		.byte   $80,$76,$22,$F3
0015D7r 1  82 38 AA 40  		.byte   $82,$38,$AA,$40
0015DBr 1               CON_SQR_HALF:
0015DBr 1  80 35 04 F3  		.byte   $80,$35,$04,$F3
0015DFr 1               CON_SQR_TWO:
0015DFr 1  81 35 04 F3  		.byte   $81,$35,$04,$F3
0015E3r 1               CON_NEG_HALF:
0015E3r 1  80 80 00 00  		.byte   $80,$80,$00,$00
0015E7r 1               CON_LOG_TWO:
0015E7r 1  80 31 72 18  		.byte   $80,$31,$72,$18
0015EBr 1               ; ----------------------------------------------------------------------------
0015EBr 1               ; "LOG" FUNCTION
0015EBr 1               ; ----------------------------------------------------------------------------
0015EBr 1               LOG:
0015EBr 1  20 rr rr             jsr     SIGN
0015EEr 1  F0 02                beq     GIQ
0015F0r 1  10 03                bpl     LOG2
0015F2r 1               GIQ:
0015F2r 1  4C rr rr             jmp     IQERR
0015F5r 1               LOG2:
0015F5r 1  A5 AC                lda     FAC
0015F7r 1  E9 7F                sbc     #$7F
0015F9r 1  48                   pha
0015FAr 1  A9 80                lda     #$80
0015FCr 1  85 AC                sta     FAC
0015FEr 1  A9 rr                lda     #<CON_SQR_HALF
001600r 1  A0 rr                ldy     #>CON_SQR_HALF
001602r 1  20 rr rr             jsr     FADD
001605r 1  A9 rr                lda     #<CON_SQR_TWO
001607r 1  A0 rr                ldy     #>CON_SQR_TWO
001609r 1  20 rr rr             jsr     FDIV
00160Cr 1  A9 rr                lda     #<CON_ONE
00160Er 1  A0 rr                ldy     #>CON_ONE
001610r 1  20 rr rr             jsr     FSUB
001613r 1  A9 rr                lda     #<POLY_LOG
001615r 1  A0 rr                ldy     #>POLY_LOG
001617r 1  20 rr rr             jsr     POLYNOMIAL_ODD
00161Ar 1  A9 rr                lda     #<CON_NEG_HALF
00161Cr 1  A0 rr                ldy     #>CON_NEG_HALF
00161Er 1  20 rr rr             jsr     FADD
001621r 1  68                   pla
001622r 1  20 rr rr             jsr     ADDACC
001625r 1  A9 rr                lda     #<CON_LOG_TWO
001627r 1  A0 rr                ldy     #>CON_LOG_TWO
001629r 1               ; ----------------------------------------------------------------------------
001629r 1               ; FAC = (Y,A) * FAC
001629r 1               ; ----------------------------------------------------------------------------
001629r 1               FMULT:
001629r 1  20 rr rr             jsr     LOAD_ARG_FROM_YA
00162Cr 1               ; ----------------------------------------------------------------------------
00162Cr 1               ; FAC = ARG * FAC
00162Cr 1               ; ----------------------------------------------------------------------------
00162Cr 1               FMULTT:
00162Cr 1  F0 4C                beq     L3903
00162Er 1  20 rr rr             jsr     ADD_EXPONENTS
001631r 1  A9 00                lda     #$00
001633r 1  85 75                sta     RESULT
001635r 1  85 76                sta     RESULT+1
001637r 1  85 77                sta     RESULT+2
001639r 1  A5 B9                lda     FACEXTENSION
00163Br 1  20 rr rr             jsr     MULTIPLY1
00163Er 1  A5 AF                lda     FAC+3
001640r 1  20 rr rr             jsr     MULTIPLY1
001643r 1  A5 AE                lda     FAC+2
001645r 1  20 rr rr             jsr     MULTIPLY1
001648r 1  A5 AD                lda     FAC+1
00164Ar 1  20 rr rr             jsr     MULTIPLY2
00164Dr 1  4C rr rr             jmp     COPY_RESULT_INTO_FAC
001650r 1               ; ----------------------------------------------------------------------------
001650r 1               ; MULTIPLY ARG BY (A) INTO RESULT
001650r 1               ; ----------------------------------------------------------------------------
001650r 1               MULTIPLY1:
001650r 1  D0 03                bne     MULTIPLY2
001652r 1  4C rr rr             jmp     SHIFT_RIGHT1
001655r 1               MULTIPLY2:
001655r 1  4A                   lsr     a
001656r 1  09 80                ora     #$80
001658r 1               L38A7:
001658r 1  A8                   tay
001659r 1  90 13                bcc     L38C3
00165Br 1  18                   clc
00165Cr 1  A5 77                lda     RESULT+2
00165Er 1  65 B6                adc     ARG+3
001660r 1  85 77                sta     RESULT+2
001662r 1  A5 76                lda     RESULT+1
001664r 1  65 B5                adc     ARG+2
001666r 1  85 76                sta     RESULT+1
001668r 1  A5 75                lda     RESULT
00166Ar 1  65 B4                adc     ARG+1
00166Cr 1  85 75                sta     RESULT
00166Er 1               L38C3:
00166Er 1  66 75                ror     RESULT
001670r 1  66 76                ror     RESULT+1
001672r 1               ; this seems to be a bad byte in the dump
001672r 1  66 77                ror     RESULT+2
001674r 1  66 B9                ror     FACEXTENSION
001676r 1  98                   tya
001677r 1  4A                   lsr     a
001678r 1  D0 DE                bne     L38A7
00167Ar 1               L3903:
00167Ar 1  60                   rts
00167Br 1               ; ----------------------------------------------------------------------------
00167Br 1               ; UNPACK NUMBER AT (Y,A) INTO ARG
00167Br 1               ; ----------------------------------------------------------------------------
00167Br 1               LOAD_ARG_FROM_YA:
00167Br 1  85 71                sta     INDEX
00167Dr 1  84 72                sty     INDEX+1
00167Fr 1  A0 03                ldy     #BYTES_FP-1
001681r 1  B1 71                lda     (INDEX),y
001683r 1  85 B6                sta     ARG+3
001685r 1  88                   dey
001686r 1  B1 71                lda     (INDEX),y
001688r 1  85 B5                sta     ARG+2
00168Ar 1  88                   dey
00168Br 1  B1 71                lda     (INDEX),y
00168Dr 1  85 B7                sta     ARGSIGN
00168Fr 1  45 B0                eor     FACSIGN
001691r 1  85 B8                sta     SGNCPR
001693r 1  A5 B7                lda     ARGSIGN
001695r 1  09 80                ora     #$80
001697r 1  85 B4                sta     ARG+1
001699r 1  88                   dey
00169Ar 1  B1 71                lda     (INDEX),y
00169Cr 1  85 B3                sta     ARG
00169Er 1  A5 AC                lda     FAC
0016A0r 1  60                   rts
0016A1r 1               ; ----------------------------------------------------------------------------
0016A1r 1               ; ADD EXPONENTS OF ARG AND FAC
0016A1r 1               ; (CALLED BY FMULT AND FDIV)
0016A1r 1               ;
0016A1r 1               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
0016A1r 1               ; ----------------------------------------------------------------------------
0016A1r 1               ADD_EXPONENTS:
0016A1r 1  A5 B3                lda     ARG
0016A3r 1               ADD_EXPONENTS1:
0016A3r 1  F0 1F                beq     ZERO
0016A5r 1  18                   clc
0016A6r 1  65 AC                adc     FAC
0016A8r 1  90 04                bcc     L393C
0016AAr 1  30 1D                bmi     JOV
0016ACr 1  18                   clc
0016ADr 1  2C                   .byte   $2C
0016AEr 1               L393C:
0016AEr 1  10 14                bpl     ZERO
0016B0r 1  69 80                adc     #$80
0016B2r 1  85 AC                sta     FAC
0016B4r 1  D0 03                bne     L3947
0016B6r 1  4C rr rr             jmp     STA_IN_FAC_SIGN
0016B9r 1               L3947:
0016B9r 1  A5 B8                lda     SGNCPR
0016BBr 1  85 B0                sta     FACSIGN
0016BDr 1  60                   rts
0016BEr 1               ; ----------------------------------------------------------------------------
0016BEr 1               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
0016BEr 1               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
0016BEr 1               ; CALLED FROM "EXP" FUNCTION
0016BEr 1               ; ----------------------------------------------------------------------------
0016BEr 1               OUTOFRNG:
0016BEr 1  A5 B0                lda     FACSIGN
0016C0r 1  49 FF                eor     #$FF
0016C2r 1  30 05                bmi     JOV
0016C4r 1               ; ----------------------------------------------------------------------------
0016C4r 1               ; POP RETURN ADDRESS AND SET FAC=0
0016C4r 1               ; ----------------------------------------------------------------------------
0016C4r 1               ZERO:
0016C4r 1  68                   pla
0016C5r 1  68                   pla
0016C6r 1  4C rr rr             jmp     ZERO_FAC
0016C9r 1               JOV:
0016C9r 1  4C rr rr             jmp     OVERFLOW
0016CCr 1               ; ----------------------------------------------------------------------------
0016CCr 1               ; MULTIPLY FAC BY 10
0016CCr 1               ; ----------------------------------------------------------------------------
0016CCr 1               MUL10:
0016CCr 1  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
0016CFr 1  AA                   tax
0016D0r 1  F0 10                beq     L3970
0016D2r 1  18                   clc
0016D3r 1  69 02                adc     #$02
0016D5r 1  B0 F2                bcs     JOV
0016D7r 1  A2 00                ldx     #$00
0016D9r 1  86 B8                stx     SGNCPR
0016DBr 1  20 rr rr             jsr     FADD2
0016DEr 1  E6 AC                inc     FAC
0016E0r 1  F0 E7                beq     JOV
0016E2r 1               L3970:
0016E2r 1  60                   rts
0016E3r 1               ; ----------------------------------------------------------------------------
0016E3r 1               CONTEN:
0016E3r 1  84 20 00 00          .byte   $84,$20,$00,$00
0016E7r 1               ; ----------------------------------------------------------------------------
0016E7r 1               ; DIVIDE FAC BY 10
0016E7r 1               ; ----------------------------------------------------------------------------
0016E7r 1               DIV10:
0016E7r 1  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
0016EAr 1  A9 rr                lda     #<CONTEN
0016ECr 1  A0 rr                ldy     #>CONTEN
0016EEr 1  A2 00                ldx     #$00
0016F0r 1               ; ----------------------------------------------------------------------------
0016F0r 1               ; FAC = ARG / (Y,A)
0016F0r 1               ; ----------------------------------------------------------------------------
0016F0r 1               DIV:
0016F0r 1  86 B8                stx     SGNCPR
0016F2r 1  20 rr rr             jsr     LOAD_FAC_FROM_YA
0016F5r 1  4C rr rr             jmp     FDIVT
0016F8r 1               ; ----------------------------------------------------------------------------
0016F8r 1               ; FAC = (Y,A) / FAC
0016F8r 1               ; ----------------------------------------------------------------------------
0016F8r 1               FDIV:
0016F8r 1  20 rr rr             jsr     LOAD_ARG_FROM_YA
0016FBr 1               ; ----------------------------------------------------------------------------
0016FBr 1               ; FAC = ARG / FAC
0016FBr 1               ; ----------------------------------------------------------------------------
0016FBr 1               FDIVT:
0016FBr 1  F0 68                beq     L3A02
0016FDr 1  20 rr rr             jsr     ROUND_FAC
001700r 1  A9 00                lda     #$00
001702r 1  38                   sec
001703r 1  E5 AC                sbc     FAC
001705r 1  85 AC                sta     FAC
001707r 1  20 rr rr             jsr     ADD_EXPONENTS
00170Ar 1  E6 AC                inc     FAC
00170Cr 1  F0 BB                beq     JOV
00170Er 1  A2 FD                ldx     #-MANTISSA_BYTES
001710r 1  A9 01                lda     #$01
001712r 1               L39A1:
001712r 1  A4 B4                ldy     ARG+1
001714r 1  C4 AD                cpy     FAC+1
001716r 1  D0 0A                bne     L39B7
001718r 1  A4 B5                ldy     ARG+2
00171Ar 1  C4 AE                cpy     FAC+2
00171Cr 1  D0 04                bne     L39B7
00171Er 1  A4 B6                ldy     ARG+3
001720r 1  C4 AF                cpy     FAC+3
001722r 1               L39B7:
001722r 1  08                   php
001723r 1  2A                   rol     a
001724r 1  90 09                bcc     L39C4
001726r 1  E8                   inx
001727r 1  95 77                sta     RESULT_LAST-1,x
001729r 1  F0 2A                beq     L39F2
00172Br 1  10 2C                bpl     L39F6
00172Dr 1  A9 01                lda     #$01
00172Fr 1               L39C4:
00172Fr 1  28                   plp
001730r 1  B0 0C                bcs     L39D5
001732r 1               L39C7:
001732r 1  06 B6                asl     ARG_LAST
001734r 1  26 B5                rol     ARG+2
001736r 1  26 B4                rol     ARG+1
001738r 1  B0 E8                bcs     L39B7
00173Ar 1  30 D6                bmi     L39A1
00173Cr 1  10 E4                bpl     L39B7
00173Er 1               L39D5:
00173Er 1  A8                   tay
00173Fr 1  A5 B6                lda     ARG+3
001741r 1  E5 AF                sbc     FAC+3
001743r 1  85 B6                sta     ARG+3
001745r 1  A5 B5                lda     ARG+2
001747r 1  E5 AE                sbc     FAC+2
001749r 1  85 B5                sta     ARG+2
00174Br 1  A5 B4                lda     ARG+1
00174Dr 1  E5 AD                sbc     FAC+1
00174Fr 1  85 B4                sta     ARG+1
001751r 1  98                   tya
001752r 1  4C rr rr             jmp     L39C7
001755r 1               L39F2:
001755r 1  A9 40                lda     #$40
001757r 1  D0 D6                bne     L39C4
001759r 1               L39F6:
001759r 1  0A                   asl     a
00175Ar 1  0A                   asl     a
00175Br 1  0A                   asl     a
00175Cr 1  0A                   asl     a
00175Dr 1  0A                   asl     a
00175Er 1  0A                   asl     a
00175Fr 1  85 B9                sta     FACEXTENSION
001761r 1  28                   plp
001762r 1  4C rr rr             jmp     COPY_RESULT_INTO_FAC
001765r 1               L3A02:
001765r 1  A2 14                ldx     #ERR_ZERODIV
001767r 1  4C rr rr             jmp     ERROR
00176Ar 1               ; ----------------------------------------------------------------------------
00176Ar 1               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
00176Ar 1               ; ----------------------------------------------------------------------------
00176Ar 1               COPY_RESULT_INTO_FAC:
00176Ar 1  A5 75                lda     RESULT
00176Cr 1  85 AD                sta     FAC+1
00176Er 1  A5 76                lda     RESULT+1
001770r 1  85 AE                sta     FAC+2
001772r 1  A5 77                lda     RESULT+2
001774r 1  85 AF                sta     FAC+3
001776r 1  4C rr rr             jmp     NORMALIZE_FAC2
001779r 1               ; ----------------------------------------------------------------------------
001779r 1               ; UNPACK (Y,A) INTO FAC
001779r 1               ; ----------------------------------------------------------------------------
001779r 1               LOAD_FAC_FROM_YA:
001779r 1  85 71                sta     INDEX
00177Br 1  84 72                sty     INDEX+1
00177Dr 1  A0 03                ldy     #MANTISSA_BYTES
00177Fr 1  B1 71                lda     (INDEX),y
001781r 1  85 AF                sta     FAC+3
001783r 1  88                   dey
001784r 1  B1 71                lda     (INDEX),y
001786r 1  85 AE                sta     FAC+2
001788r 1  88                   dey
001789r 1  B1 71                lda     (INDEX),y
00178Br 1  85 B0                sta     FACSIGN
00178Dr 1  09 80                ora     #$80
00178Fr 1  85 AD                sta     FAC+1
001791r 1  88                   dey
001792r 1  B1 71                lda     (INDEX),y
001794r 1  85 AC                sta     FAC
001796r 1  84 B9                sty     FACEXTENSION
001798r 1  60                   rts
001799r 1               ; ----------------------------------------------------------------------------
001799r 1               ; ROUND FAC, STORE IN TEMP2
001799r 1               ; ----------------------------------------------------------------------------
001799r 1               STORE_FAC_IN_TEMP2_ROUNDED:
001799r 1  A2 A8                ldx     #TEMP2
00179Br 1  2C                   .byte   $2C
00179Cr 1               ; ----------------------------------------------------------------------------
00179Cr 1               ; ROUND FAC, STORE IN TEMP1
00179Cr 1               ; ----------------------------------------------------------------------------
00179Cr 1               STORE_FAC_IN_TEMP1_ROUNDED:
00179Cr 1  A2 A4                ldx     #TEMP1X
00179Er 1  A0 00                ldy     #$00
0017A0r 1  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
0017A2r 1               ; ----------------------------------------------------------------------------
0017A2r 1               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
0017A2r 1               ; ----------------------------------------------------------------------------
0017A2r 1               SETFOR:
0017A2r 1  A6 97                ldx     FORPNT
0017A4r 1  A4 98                ldy     FORPNT+1
0017A6r 1               ; ----------------------------------------------------------------------------
0017A6r 1               ; ROUND FAC, AND STORE AT (Y,X)
0017A6r 1               ; ----------------------------------------------------------------------------
0017A6r 1               STORE_FAC_AT_YX_ROUNDED:
0017A6r 1  20 rr rr             jsr     ROUND_FAC
0017A9r 1  86 71                stx     INDEX
0017ABr 1  84 72                sty     INDEX+1
0017ADr 1  A0 03                ldy     #MANTISSA_BYTES
0017AFr 1  A5 AF                lda     FAC+3
0017B1r 1  91 71                sta     (INDEX),y
0017B3r 1  88                   dey
0017B4r 1  A5 AE                lda     FAC+2
0017B6r 1  91 71                sta     (INDEX),y
0017B8r 1  88                   dey
0017B9r 1  A5 B0                lda     FACSIGN
0017BBr 1  09 7F                ora     #$7F
0017BDr 1  25 AD                and     FAC+1
0017BFr 1  91 71                sta     (INDEX),y
0017C1r 1  88                   dey
0017C2r 1  A5 AC                lda     FAC
0017C4r 1  91 71                sta     (INDEX),y
0017C6r 1  84 B9                sty     FACEXTENSION
0017C8r 1  60                   rts
0017C9r 1               ; ----------------------------------------------------------------------------
0017C9r 1               ; COPY ARG INTO FAC
0017C9r 1               ; ----------------------------------------------------------------------------
0017C9r 1               COPY_ARG_TO_FAC:
0017C9r 1  A5 B7                lda     ARGSIGN
0017CBr 1               MFA:
0017CBr 1  85 B0                sta     FACSIGN
0017CDr 1  A2 04                ldx     #BYTES_FP
0017CFr 1               L3A7A:
0017CFr 1  B5 B2                lda     SHIFTSIGNEXT,x
0017D1r 1  95 AB                sta     EXPSGN,x
0017D3r 1  CA                   dex
0017D4r 1  D0 F9                bne     L3A7A
0017D6r 1  86 B9                stx     FACEXTENSION
0017D8r 1  60                   rts
0017D9r 1               ; ----------------------------------------------------------------------------
0017D9r 1               ; ROUND FAC AND COPY TO ARG
0017D9r 1               ; ----------------------------------------------------------------------------
0017D9r 1               COPY_FAC_TO_ARG_ROUNDED:
0017D9r 1  20 rr rr             jsr     ROUND_FAC
0017DCr 1               MAF:
0017DCr 1  A2 05                ldx     #BYTES_FP+1
0017DEr 1               L3A89:
0017DEr 1  B5 AB                lda     EXPSGN,x
0017E0r 1  95 B2                sta     SHIFTSIGNEXT,x
0017E2r 1  CA                   dex
0017E3r 1  D0 F9                bne     L3A89
0017E5r 1  86 B9                stx     FACEXTENSION
0017E7r 1               RTS14:
0017E7r 1  60                   rts
0017E8r 1               ; ----------------------------------------------------------------------------
0017E8r 1               ; ROUND FAC USING EXTENSION BYTE
0017E8r 1               ; ----------------------------------------------------------------------------
0017E8r 1               ROUND_FAC:
0017E8r 1  A5 AC                lda     FAC
0017EAr 1  F0 FB                beq     RTS14
0017ECr 1  06 B9                asl     FACEXTENSION
0017EEr 1  90 F7                bcc     RTS14
0017F0r 1               ; ----------------------------------------------------------------------------
0017F0r 1               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
0017F0r 1               ; ----------------------------------------------------------------------------
0017F0r 1               INCREMENT_MANTISSA:
0017F0r 1  20 rr rr             jsr     INCREMENT_FAC_MANTISSA
0017F3r 1  D0 F2                bne     RTS14
0017F5r 1  4C rr rr             jmp     NORMALIZE_FAC6
0017F8r 1               ; ----------------------------------------------------------------------------
0017F8r 1               ; TEST FAC FOR ZERO AND SIGN
0017F8r 1               ;
0017F8r 1               ; FAC > 0, RETURN +1
0017F8r 1               ; FAC = 0, RETURN  0
0017F8r 1               ; FAC < 0, RETURN -1
0017F8r 1               ; ----------------------------------------------------------------------------
0017F8r 1               SIGN:
0017F8r 1  A5 AC                lda     FAC
0017FAr 1  F0 09                beq     RTS15
0017FCr 1               L3AA7:
0017FCr 1  A5 B0                lda     FACSIGN
0017FEr 1               SIGN2:
0017FEr 1  2A                   rol     a
0017FFr 1  A9 FF                lda     #$FF
001801r 1  B0 02                bcs     RTS15
001803r 1  A9 01                lda     #$01
001805r 1               RTS15:
001805r 1  60                   rts
001806r 1               ; ----------------------------------------------------------------------------
001806r 1               ; "SGN" FUNCTION
001806r 1               ; ----------------------------------------------------------------------------
001806r 1               SGN:
001806r 1  20 rr rr             jsr     SIGN
001809r 1               ; ----------------------------------------------------------------------------
001809r 1               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
001809r 1               ; ----------------------------------------------------------------------------
001809r 1               FLOAT:
001809r 1  85 AD                sta     FAC+1
00180Br 1  A9 00                lda     #$00
00180Dr 1  85 AE                sta     FAC+2
00180Fr 1  A2 88                ldx     #$88
001811r 1               ; ----------------------------------------------------------------------------
001811r 1               ; FLOAT UNSIGNED VALUE IN FAC+1,2
001811r 1               ; (X) = EXPONENT
001811r 1               ; ----------------------------------------------------------------------------
001811r 1               FLOAT1:
001811r 1  A5 AD                lda     FAC+1
001813r 1  49 FF                eor     #$FF
001815r 1  2A                   rol     a
001816r 1               ; ----------------------------------------------------------------------------
001816r 1               ; FLOAT UNSIGNED VALUE IN FAC+1,2
001816r 1               ; (X) = EXPONENT
001816r 1               ; C=0 TO MAKE VALUE NEGATIVE
001816r 1               ; C=1 TO MAKE VALUE POSITIVE
001816r 1               ; ----------------------------------------------------------------------------
001816r 1               FLOAT2:
001816r 1  A9 00                lda     #$00
001818r 1  85 AF                sta     FAC+3
00181Ar 1  86 AC                stx     FAC
00181Cr 1  85 B9                sta     FACEXTENSION
00181Er 1  85 B0                sta     FACSIGN
001820r 1  4C rr rr             jmp     NORMALIZE_FAC1
001823r 1               ; ----------------------------------------------------------------------------
001823r 1               ; "ABS" FUNCTION
001823r 1               ; ----------------------------------------------------------------------------
001823r 1               ABS:
001823r 1  46 B0                lsr     FACSIGN
001825r 1  60                   rts
001826r 1               ; ----------------------------------------------------------------------------
001826r 1               ; COMPARE FAC WITH PACKED # AT (Y,A)
001826r 1               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
001826r 1               ; ----------------------------------------------------------------------------
001826r 1               FCOMP:
001826r 1  85 73                sta     DEST
001828r 1               ; ----------------------------------------------------------------------------
001828r 1               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
001828r 1               ; "DEST" ALREADY SET UP
001828r 1               ; ----------------------------------------------------------------------------
001828r 1               FCOMP2:
001828r 1  84 74                sty     DEST+1
00182Ar 1  A0 00                ldy     #$00
00182Cr 1  B1 73                lda     (DEST),y
00182Er 1  C8                   iny
00182Fr 1  AA                   tax
001830r 1  F0 C6                beq     SIGN
001832r 1  B1 73                lda     (DEST),y
001834r 1  45 B0                eor     FACSIGN
001836r 1  30 C4                bmi     L3AA7
001838r 1  E4 AC                cpx     FAC
00183Ar 1  D0 1A                bne     L3B0A
00183Cr 1  B1 73                lda     (DEST),y
00183Er 1  09 80                ora     #$80
001840r 1  C5 AD                cmp     FAC+1
001842r 1  D0 12                bne     L3B0A
001844r 1  C8                   iny
001845r 1  B1 73                lda     (DEST),y
001847r 1  C5 AE                cmp     FAC+2
001849r 1  D0 0B                bne     L3B0A
00184Br 1  C8                   iny
00184Cr 1  A9 7F                lda     #$7F
00184Er 1  C5 B9                cmp     FACEXTENSION
001850r 1  B1 73                lda     (DEST),y
001852r 1  E5 AF                sbc     FAC_LAST
001854r 1  F0 28                beq     L3B32
001856r 1               L3B0A:
001856r 1  A5 B0                lda     FACSIGN
001858r 1  90 02                bcc     L3B10
00185Ar 1  49 FF                eor     #$FF
00185Cr 1               L3B10:
00185Cr 1  4C rr rr             jmp     SIGN2
00185Fr 1               ; ----------------------------------------------------------------------------
00185Fr 1               ; QUICK INTEGER FUNCTION
00185Fr 1               ;
00185Fr 1               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
00185Fr 1               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
00185Fr 1               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
00185Fr 1               ;
00185Fr 1               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
00185Fr 1               ; ----------------------------------------------------------------------------
00185Fr 1               QINT:
00185Fr 1  A5 AC                lda     FAC
001861r 1  F0 4A                beq     QINT3
001863r 1  38                   sec
001864r 1  E9 98                sbc     #120+8*BYTES_FP
001866r 1  24 B0                bit     FACSIGN
001868r 1  10 09                bpl     L3B27
00186Ar 1  AA                   tax
00186Br 1  A9 FF                lda     #$FF
00186Dr 1  85 B2                sta     SHIFTSIGNEXT
00186Fr 1  20 rr rr             jsr     COMPLEMENT_FAC_MANTISSA
001872r 1  8A                   txa
001873r 1               L3B27:
001873r 1  A2 AC                ldx     #FAC
001875r 1  C9 F9                cmp     #$F9
001877r 1  10 06                bpl     QINT2
001879r 1  20 rr rr             jsr     SHIFT_RIGHT
00187Cr 1  84 B2                sty     SHIFTSIGNEXT
00187Er 1               L3B32:
00187Er 1  60                   rts
00187Fr 1               QINT2:
00187Fr 1  A8                   tay
001880r 1  A5 B0                lda     FACSIGN
001882r 1  29 80                and     #$80
001884r 1  46 AD                lsr     FAC+1
001886r 1  05 AD                ora     FAC+1
001888r 1  85 AD                sta     FAC+1
00188Ar 1  20 rr rr             jsr     SHIFT_RIGHT4
00188Dr 1  84 B2                sty     SHIFTSIGNEXT
00188Fr 1  60                   rts
001890r 1               ; ----------------------------------------------------------------------------
001890r 1               ; "INT" FUNCTION
001890r 1               ;
001890r 1               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
001890r 1               ; AND THEN REFLOATS THE INTEGER.
001890r 1               ; ----------------------------------------------------------------------------
001890r 1               INT:
001890r 1  A5 AC                lda     FAC
001892r 1  C9 98                cmp     #120+8*BYTES_FP
001894r 1  B0 1E                bcs     RTS17
001896r 1  20 rr rr             jsr     QINT
001899r 1  84 B9                sty     FACEXTENSION
00189Br 1  A5 B0                lda     FACSIGN
00189Dr 1  84 B0                sty     FACSIGN
00189Fr 1  49 80                eor     #$80
0018A1r 1  2A                   rol     a
0018A2r 1  A9 98                lda     #120+8*BYTES_FP
0018A4r 1  85 AC                sta     FAC
0018A6r 1  A5 AF                lda     FAC_LAST
0018A8r 1  85 5B                sta     CHARAC
0018AAr 1  4C rr rr             jmp     NORMALIZE_FAC1
0018ADr 1               QINT3:
0018ADr 1  85 AD                sta     FAC+1
0018AFr 1  85 AE                sta     FAC+2
0018B1r 1  85 AF                sta     FAC+3
0018B3r 1  A8                   tay
0018B4r 1               RTS17:
0018B4r 1  60                   rts
0018B5r 1               ; ----------------------------------------------------------------------------
0018B5r 1               ; CONVERT STRING TO FP VALUE IN FAC
0018B5r 1               ;
0018B5r 1               ; STRING POINTED TO BY TXTPTR
0018B5r 1               ; FIRST CHAR ALREADY SCANNED BY CHRGET
0018B5r 1               ; (A) = FIRST CHAR, C=0 IF DIGIT.
0018B5r 1               ; ----------------------------------------------------------------------------
0018B5r 1               FIN:
0018B5r 1  A0 00                ldy     #$00
0018B7r 1  A2 09                ldx     #SERLEN-TMPEXP
0018B9r 1               L3B6F:
0018B9r 1  94 A8                sty     TMPEXP,x
0018BBr 1  CA                   dex
0018BCr 1  10 FB                bpl     L3B6F
0018BEr 1  90 0F                bcc     FIN2
0018C0r 1  C9 2D                cmp     #$2D
0018C2r 1  D0 04                bne     L3B7E
0018C4r 1  86 B1                stx     SERLEN
0018C6r 1  F0 04                beq     FIN1
0018C8r 1               L3B7E:
0018C8r 1  C9 2B                cmp     #$2B
0018CAr 1  D0 05                bne     FIN3
0018CCr 1               FIN1:
0018CCr 1  20 BC 00             jsr     CHRGET
0018CFr 1               FIN2:
0018CFr 1  90 5B                bcc     FIN9
0018D1r 1               FIN3:
0018D1r 1  C9 2E                cmp     #$2E
0018D3r 1  F0 2E                beq     FIN10
0018D5r 1  C9 45                cmp     #$45
0018D7r 1  D0 30                bne     FIN7
0018D9r 1  20 BC 00             jsr     CHRGET
0018DCr 1  90 17                bcc     FIN5
0018DEr 1  C9 A4                cmp     #TOKEN_MINUS
0018E0r 1  F0 0E                beq     L3BA6
0018E2r 1  C9 2D                cmp     #$2D
0018E4r 1  F0 0A                beq     L3BA6
0018E6r 1  C9 A3                cmp     #TOKEN_PLUS
0018E8r 1  F0 08                beq     FIN4
0018EAr 1  C9 2B                cmp     #$2B
0018ECr 1  F0 04                beq     FIN4
0018EEr 1  D0 07                bne     FIN6
0018F0r 1               L3BA6:
0018F0r 1  66 AB                ror     EXPSGN
0018F2r 1               FIN4:
0018F2r 1  20 BC 00             jsr     CHRGET
0018F5r 1               FIN5:
0018F5r 1  90 5C                bcc     GETEXP
0018F7r 1               FIN6:
0018F7r 1  24 AB                bit     EXPSGN
0018F9r 1  10 0E                bpl     FIN7
0018FBr 1  A9 00                lda     #$00
0018FDr 1  38                   sec
0018FEr 1  E5 A9                sbc     EXPON
001900r 1  4C rr rr             jmp     FIN8
001903r 1               ; ----------------------------------------------------------------------------
001903r 1               ; FOUND A DECIMAL POINT
001903r 1               ; ----------------------------------------------------------------------------
001903r 1               FIN10:
001903r 1  66 AA                ror     LOWTR
001905r 1  24 AA                bit     LOWTR
001907r 1  50 C3                bvc     FIN1
001909r 1               ; ----------------------------------------------------------------------------
001909r 1               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
001909r 1               ; ----------------------------------------------------------------------------
001909r 1               FIN7:
001909r 1  A5 A9                lda     EXPON
00190Br 1               FIN8:
00190Br 1  38                   sec
00190Cr 1  E5 A8                sbc     INDX
00190Er 1  85 A9                sta     EXPON
001910r 1  F0 12                beq     L3BEE
001912r 1  10 09                bpl     L3BE7
001914r 1               L3BDE:
001914r 1  20 rr rr             jsr     DIV10
001917r 1  E6 A9                inc     EXPON
001919r 1  D0 F9                bne     L3BDE
00191Br 1  F0 07                beq     L3BEE
00191Dr 1               L3BE7:
00191Dr 1  20 rr rr             jsr     MUL10
001920r 1  C6 A9                dec     EXPON
001922r 1  D0 F9                bne     L3BE7
001924r 1               L3BEE:
001924r 1  A5 B1                lda     SERLEN
001926r 1  30 01                bmi     L3BF3
001928r 1  60                   rts
001929r 1               L3BF3:
001929r 1  4C rr rr             jmp     NEGOP
00192Cr 1               ; ----------------------------------------------------------------------------
00192Cr 1               ; ACCUMULATE A DIGIT INTO FAC
00192Cr 1               ; ----------------------------------------------------------------------------
00192Cr 1               FIN9:
00192Cr 1  48                   pha
00192Dr 1  24 AA                bit     LOWTR
00192Fr 1  10 02                bpl     L3BFD
001931r 1  E6 A8                inc     INDX
001933r 1               L3BFD:
001933r 1  20 rr rr             jsr     MUL10
001936r 1  68                   pla
001937r 1  38                   sec
001938r 1  E9 30                sbc     #$30
00193Ar 1  20 rr rr             jsr     ADDACC
00193Dr 1  4C rr rr             jmp     FIN1
001940r 1               ; ----------------------------------------------------------------------------
001940r 1               ; ADD (A) TO FAC
001940r 1               ; ----------------------------------------------------------------------------
001940r 1               ADDACC:
001940r 1  48                   pha
001941r 1  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001944r 1  68                   pla
001945r 1  20 rr rr             jsr     FLOAT
001948r 1  A5 B7                lda     ARGSIGN
00194Ar 1  45 B0                eor     FACSIGN
00194Cr 1  85 B8                sta     SGNCPR
00194Er 1  A6 AC                ldx     FAC
001950r 1  4C rr rr             jmp     FADDT
001953r 1               ; ----------------------------------------------------------------------------
001953r 1               ; ACCUMULATE DIGIT OF EXPONENT
001953r 1               ; ----------------------------------------------------------------------------
001953r 1               GETEXP:
001953r 1  A5 A9                lda     EXPON
001955r 1  C9 0A                cmp     #MAX_EXPON
001957r 1  90 09                bcc     L3C2C
001959r 1  A9 64                lda     #$64
00195Br 1  24 AB                bit     EXPSGN
00195Dr 1  30 11                bmi     L3C3A
00195Fr 1  4C rr rr             jmp     OVERFLOW
001962r 1               L3C2C:
001962r 1  0A                   asl     a
001963r 1  0A                   asl     a
001964r 1  18                   clc
001965r 1  65 A9                adc     EXPON
001967r 1  0A                   asl     a
001968r 1  18                   clc
001969r 1  A0 00                ldy     #$00
00196Br 1  71 C3                adc     (TXTPTR),y
00196Dr 1  38                   sec
00196Er 1  E9 30                sbc     #$30
001970r 1               L3C3A:
001970r 1  85 A9                sta     EXPON
001972r 1  4C rr rr             jmp     FIN4
001975r 1               ; ----------------------------------------------------------------------------
001975r 1               ; these values are /1000 of what the labels say
001975r 1               CON_99999999_9:
001975r 1  91 43 4F F8          .byte   $91,$43,$4F,$F8
001979r 1               CON_999999999:
001979r 1  94 74 23 F7  		.byte   $94,$74,$23,$F7
00197Dr 1               CON_BILLION:
00197Dr 1  94 74 24 00          .byte   $94,$74,$24,$00
001981r 1               ; ----------------------------------------------------------------------------
001981r 1               ; PRINT "IN <LINE #>"
001981r 1               ; ----------------------------------------------------------------------------
001981r 1               INPRT:
001981r 1  A9 rr                lda     #<QT_IN
001983r 1  A0 rr                ldy     #>QT_IN
001985r 1  20 rr rr             jsr     GOSTROUT2
001988r 1  A5 88                lda     CURLIN+1
00198Ar 1  A6 87                ldx     CURLIN
00198Cr 1               ; ----------------------------------------------------------------------------
00198Cr 1               ; PRINT A,X AS DECIMAL INTEGER
00198Cr 1               ; ----------------------------------------------------------------------------
00198Cr 1               LINPRT:
00198Cr 1  85 AD                sta     FAC+1
00198Er 1  86 AE                stx     FAC+2
001990r 1  A2 90                ldx     #$90
001992r 1  38                   sec
001993r 1  20 rr rr             jsr     FLOAT2
001996r 1  20 rr rr             jsr     FOUT
001999r 1               GOSTROUT2:
001999r 1  4C rr rr             jmp     STROUT
00199Cr 1               ; ----------------------------------------------------------------------------
00199Cr 1               ; CONVERT (FAC) TO STRING STARTING AT STACK
00199Cr 1               ; RETURN WITH (Y,A) POINTING AT STRING
00199Cr 1               ; ----------------------------------------------------------------------------
00199Cr 1               FOUT:
00199Cr 1  A0 01                ldy     #$01
00199Er 1               ; ----------------------------------------------------------------------------
00199Er 1               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
00199Er 1               ; SO THAT RESULT STRING STARTS AT STACK-1
00199Er 1               ; (THIS IS USED AS A FLAG)
00199Er 1               ; ----------------------------------------------------------------------------
00199Er 1               FOUT1:
00199Er 1  A9 20                lda     #$20
0019A0r 1  24 B0                bit     FACSIGN
0019A2r 1  10 02                bpl     L3C73
0019A4r 1  A9 2D                lda     #$2D
0019A6r 1               L3C73:
0019A6r 1  99 FF 00             sta     $FF,y
0019A9r 1  85 B0                sta     FACSIGN
0019ABr 1  84 BA                sty     STRNG2
0019ADr 1  C8                   iny
0019AEr 1  A9 30                lda     #$30
0019B0r 1  A6 AC                ldx     FAC
0019B2r 1  D0 03                bne     L3C84
0019B4r 1  4C rr rr             jmp     FOUT4
0019B7r 1               L3C84:
0019B7r 1  A9 00                lda     #$00
0019B9r 1  E0 80                cpx     #$80
0019BBr 1  F0 02                beq     L3C8C
0019BDr 1  B0 09                bcs     L3C95
0019BFr 1               L3C8C:
0019BFr 1  A9 rr                lda     #<CON_BILLION
0019C1r 1  A0 rr                ldy     #>CON_BILLION
0019C3r 1  20 rr rr             jsr     FMULT
0019C6r 1  A9 FA                lda     #-6 ; exponent adjustment
0019C8r 1               L3C95:
0019C8r 1  85 A8                sta     INDX
0019CAr 1               ; ----------------------------------------------------------------------------
0019CAr 1               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
0019CAr 1               ; ----------------------------------------------------------------------------
0019CAr 1               L3C97:
0019CAr 1  A9 rr                lda     #<CON_999999999
0019CCr 1  A0 rr                ldy     #>CON_999999999
0019CEr 1  20 rr rr             jsr     FCOMP
0019D1r 1  F0 1E                beq     L3CBE
0019D3r 1  10 12                bpl     L3CB4
0019D5r 1               L3CA2:
0019D5r 1  A9 rr                lda     #<CON_99999999_9
0019D7r 1  A0 rr                ldy     #>CON_99999999_9
0019D9r 1  20 rr rr             jsr     FCOMP
0019DCr 1  F0 02                beq     L3CAD
0019DEr 1  10 0E                bpl     L3CBB
0019E0r 1               L3CAD:
0019E0r 1  20 rr rr             jsr     MUL10
0019E3r 1  C6 A8                dec     INDX
0019E5r 1  D0 EE                bne     L3CA2
0019E7r 1               L3CB4:
0019E7r 1  20 rr rr             jsr     DIV10
0019EAr 1  E6 A8                inc     INDX
0019ECr 1  D0 DC                bne     L3C97
0019EEr 1               L3CBB:
0019EEr 1  20 rr rr             jsr     FADDH
0019F1r 1               L3CBE:
0019F1r 1  20 rr rr             jsr     QINT
0019F4r 1               ; ----------------------------------------------------------------------------
0019F4r 1               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
0019F4r 1               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
0019F4r 1               ;
0019F4r 1               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
0019F4r 1               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
0019F4r 1               ; ----------------------------------------------------------------------------
0019F4r 1  A2 01                ldx     #$01
0019F6r 1  A5 A8                lda     INDX
0019F8r 1  18                   clc
0019F9r 1  69 07                adc     #3*BYTES_FP-5
0019FBr 1  30 09                bmi     L3CD3
0019FDr 1  C9 08                cmp     #3*BYTES_FP-4
0019FFr 1  B0 06                bcs     L3CD4
001A01r 1  69 FF                adc     #$FF
001A03r 1  AA                   tax
001A04r 1  A9 02                lda     #$02
001A06r 1               L3CD3:
001A06r 1  38                   sec
001A07r 1               L3CD4:
001A07r 1  E9 02                sbc     #$02
001A09r 1  85 A9                sta     EXPON
001A0Br 1  86 A8                stx     INDX
001A0Dr 1  8A                   txa
001A0Er 1  F0 02                beq     L3CDF
001A10r 1  10 13                bpl     L3CF2
001A12r 1               L3CDF:
001A12r 1  A4 BA                ldy     STRNG2
001A14r 1  A9 2E                lda     #$2E
001A16r 1  C8                   iny
001A17r 1  99 FF 00             sta     $FF,y
001A1Ar 1  8A                   txa
001A1Br 1  F0 06                beq     L3CF0
001A1Dr 1  A9 30                lda     #$30
001A1Fr 1  C8                   iny
001A20r 1  99 FF 00             sta     $FF,y
001A23r 1               L3CF0:
001A23r 1  84 BA                sty     STRNG2
001A25r 1               ; ----------------------------------------------------------------------------
001A25r 1               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
001A25r 1               ; ----------------------------------------------------------------------------
001A25r 1               L3CF2:
001A25r 1  A0 00                ldy     #$00
001A27r 1  A2 80                ldx     #$80
001A29r 1               L3CF6:
001A29r 1  A5 AF                lda     FAC_LAST
001A2Br 1  18                   clc
001A2Cr 1  79 rr rr             adc     DECTBL+2,y
001A2Fr 1  85 AF                sta     FAC+3
001A31r 1  A5 AE                lda     FAC+2
001A33r 1  79 rr rr             adc     DECTBL+1,y
001A36r 1  85 AE                sta     FAC+2
001A38r 1  A5 AD                lda     FAC+1
001A3Ar 1  79 rr rr             adc     DECTBL,y
001A3Dr 1  85 AD                sta     FAC+1
001A3Fr 1  E8                   inx
001A40r 1  B0 04                bcs     L3D1A
001A42r 1  10 E5                bpl     L3CF6
001A44r 1  30 02                bmi     L3D1C
001A46r 1               L3D1A:
001A46r 1  30 E1                bmi     L3CF6
001A48r 1               L3D1C:
001A48r 1  8A                   txa
001A49r 1  90 04                bcc     L3D23
001A4Br 1  49 FF                eor     #$FF
001A4Dr 1  69 0A                adc     #$0A
001A4Fr 1               L3D23:
001A4Fr 1  69 2F                adc     #$2F
001A51r 1  C8                   iny
001A52r 1  C8                   iny
001A53r 1  C8                   iny
001A54r 1  84 95                sty     VARPNT
001A56r 1  A4 BA                ldy     STRNG2
001A58r 1  C8                   iny
001A59r 1  AA                   tax
001A5Ar 1  29 7F                and     #$7F
001A5Cr 1  99 FF 00             sta     $FF,y
001A5Fr 1  C6 A8                dec     INDX
001A61r 1  D0 06                bne     L3D3E
001A63r 1  A9 2E                lda     #$2E
001A65r 1  C8                   iny
001A66r 1  99 FF 00             sta     $FF,y
001A69r 1               L3D3E:
001A69r 1  84 BA                sty     STRNG2
001A6Br 1  A4 95                ldy     VARPNT
001A6Dr 1  8A                   txa
001A6Er 1  49 FF                eor     #$FF
001A70r 1  29 80                and     #$80
001A72r 1  AA                   tax
001A73r 1  C0 12                cpy     #DECTBL_END-DECTBL
001A75r 1  D0 B2                bne     L3CF6
001A77r 1               ; ----------------------------------------------------------------------------
001A77r 1               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
001A77r 1               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
001A77r 1               ; DECIMAL POINT.
001A77r 1               ; ----------------------------------------------------------------------------
001A77r 1  A4 BA                ldy     STRNG2
001A79r 1               L3D4E:
001A79r 1  B9 FF 00             lda     $FF,y
001A7Cr 1  88                   dey
001A7Dr 1  C9 30                cmp     #$30
001A7Fr 1  F0 F8                beq     L3D4E
001A81r 1  C9 2E                cmp     #$2E
001A83r 1  F0 01                beq     L3D5B
001A85r 1  C8                   iny
001A86r 1               L3D5B:
001A86r 1  A9 2B                lda     #$2B
001A88r 1  A6 A9                ldx     EXPON
001A8Ar 1  F0 2E                beq     L3D8F
001A8Cr 1  10 08                bpl     L3D6B
001A8Er 1  A9 00                lda     #$00
001A90r 1  38                   sec
001A91r 1  E5 A9                sbc     EXPON
001A93r 1  AA                   tax
001A94r 1  A9 2D                lda     #$2D
001A96r 1               L3D6B:
001A96r 1  99 01 01             sta     STACK+1,y
001A99r 1  A9 45                lda     #$45
001A9Br 1  99 00 01             sta     STACK,y
001A9Er 1  8A                   txa
001A9Fr 1  A2 2F                ldx     #$2F
001AA1r 1  38                   sec
001AA2r 1               L3D77:
001AA2r 1  E8                   inx
001AA3r 1  E9 0A                sbc     #$0A
001AA5r 1  B0 FB                bcs     L3D77
001AA7r 1  69 3A                adc     #$3A
001AA9r 1  99 03 01             sta     STACK+3,y
001AACr 1  8A                   txa
001AADr 1  99 02 01             sta     STACK+2,y
001AB0r 1  A9 00                lda     #$00
001AB2r 1  99 04 01             sta     STACK+4,y
001AB5r 1  F0 08                beq     L3D94
001AB7r 1               FOUT4:
001AB7r 1  99 FF 00             sta     $FF,y
001ABAr 1               L3D8F:
001ABAr 1  A9 00                lda     #$00
001ABCr 1  99 00 01             sta     STACK,y
001ABFr 1               L3D94:
001ABFr 1  A9 00                lda     #$00
001AC1r 1  A0 01                ldy     #$01
001AC3r 1  60                   rts
001AC4r 1               ; ----------------------------------------------------------------------------
001AC4r 1               CON_HALF:
001AC4r 1  80 00 00 00          .byte   $80,$00,$00,$00
001AC8r 1               ; ----------------------------------------------------------------------------
001AC8r 1               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
001AC8r 1               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
001AC8r 1               ; ----------------------------------------------------------------------------
001AC8r 1               DECTBL:
001AC8r 1  FE 79 60             .byte   $FE,$79,$60 ; -100000
001ACBr 1  00 27 10     		.byte	$00,$27,$10 ; 10000
001ACEr 1  FF FC 18     		.byte	$FF,$FC,$18 ; -1000
001AD1r 1  00 00 64     		.byte	$00,$00,$64 ; 100
001AD4r 1  FF FF F6     		.byte	$FF,$FF,$F6 ; -10
001AD7r 1  00 00 01     		.byte	$00,$00,$01 ; 1
001ADAr 1               DECTBL_END:
001ADAr 1               ; ----------------------------------------------------------------------------
001ADAr 1               ; "SQR" FUNCTION
001ADAr 1               ; ----------------------------------------------------------------------------
001ADAr 1               SQR:
001ADAr 1  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001ADDr 1  A9 rr                lda     #<CON_HALF
001ADFr 1  A0 rr                ldy     #>CON_HALF
001AE1r 1  20 rr rr             jsr     LOAD_FAC_FROM_YA
001AE4r 1               ; ----------------------------------------------------------------------------
001AE4r 1               ; EXPONENTIATION OPERATION
001AE4r 1               ;
001AE4r 1               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
001AE4r 1               ; ----------------------------------------------------------------------------
001AE4r 1               FPWRT:
001AE4r 1  F0 63                beq     EXP
001AE6r 1  A5 B3                lda     ARG
001AE8r 1  D0 03                bne     L3DD5
001AEAr 1  4C rr rr             jmp     STA_IN_FAC_SIGN_AND_EXP
001AEDr 1               L3DD5:
001AEDr 1  A2 9C                ldx     #TEMP3
001AEFr 1  A0 00                ldy     #$00
001AF1r 1  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
001AF4r 1  A5 B7                lda     ARGSIGN
001AF6r 1  10 0F                bpl     L3DEF
001AF8r 1  20 rr rr             jsr     INT
001AFBr 1  A9 9C                lda     #TEMP3
001AFDr 1  A0 00                ldy     #$00
001AFFr 1  20 rr rr             jsr     FCOMP
001B02r 1  D0 03                bne     L3DEF
001B04r 1  98                   tya
001B05r 1  A4 5B                ldy     CHARAC
001B07r 1               L3DEF:
001B07r 1  20 rr rr             jsr     MFA
001B0Ar 1  98                   tya
001B0Br 1  48                   pha
001B0Cr 1  20 rr rr             jsr     LOG
001B0Fr 1  A9 9C                lda     #TEMP3
001B11r 1  A0 00                ldy     #$00
001B13r 1  20 rr rr             jsr     FMULT
001B16r 1  20 rr rr             jsr     EXP
001B19r 1  68                   pla
001B1Ar 1  4A                   lsr     a
001B1Br 1  90 0A                bcc     L3E0F
001B1Dr 1               ; ----------------------------------------------------------------------------
001B1Dr 1               ; NEGATE VALUE IN FAC
001B1Dr 1               ; ----------------------------------------------------------------------------
001B1Dr 1               NEGOP:
001B1Dr 1  A5 AC                lda     FAC
001B1Fr 1  F0 06                beq     L3E0F
001B21r 1  A5 B0                lda     FACSIGN
001B23r 1  49 FF                eor     #$FF
001B25r 1  85 B0                sta     FACSIGN
001B27r 1               L3E0F:
001B27r 1  60                   rts
001B28r 1               ; ----------------------------------------------------------------------------
001B28r 1               CON_LOG_E:
001B28r 1  81 38 AA 3B          .byte   $81,$38,$AA,$3B
001B2Cr 1               POLY_EXP:
001B2Cr 1  06           		.byte	$06
001B2Dr 1  74 63 90 8C  		.byte	$74,$63,$90,$8C
001B31r 1  77 23 0C AB  		.byte	$77,$23,$0C,$AB
001B35r 1  7A 1E 94 00  		.byte	$7A,$1E,$94,$00
001B39r 1  7C 63 42 80  		.byte	$7C,$63,$42,$80
001B3Dr 1  7E 75 FE D0  		.byte	$7E,$75,$FE,$D0
001B41r 1  80 31 72 15  		.byte	$80,$31,$72,$15
001B45r 1  81 00 00 00  		.byte	$81,$00,$00,$00
001B49r 1               ; ----------------------------------------------------------------------------
001B49r 1               ; "EXP" FUNCTION
001B49r 1               ;
001B49r 1               ; FAC = E ^ FAC
001B49r 1               ; ----------------------------------------------------------------------------
001B49r 1               EXP:
001B49r 1  A9 rr                lda     #<CON_LOG_E
001B4Br 1  A0 rr                ldy     #>CON_LOG_E
001B4Dr 1  20 rr rr             jsr     FMULT
001B50r 1  A5 B9                lda     FACEXTENSION
001B52r 1  69 50                adc     #$50
001B54r 1  90 03                bcc     L3E4E
001B56r 1  20 rr rr             jsr     INCREMENT_MANTISSA
001B59r 1               L3E4E:
001B59r 1  85 A3                sta     ARGEXTENSION
001B5Br 1  20 rr rr             jsr     MAF
001B5Er 1  A5 AC                lda     FAC
001B60r 1  C9 88                cmp     #$88
001B62r 1  90 03                bcc     L3E5C
001B64r 1               L3E59:
001B64r 1  20 rr rr             jsr     OUTOFRNG
001B67r 1               L3E5C:
001B67r 1  20 rr rr             jsr     INT
001B6Ar 1  A5 5B                lda     CHARAC
001B6Cr 1  18                   clc
001B6Dr 1  69 81                adc     #$81
001B6Fr 1  F0 F3                beq     L3E59
001B71r 1  38                   sec
001B72r 1  E9 01                sbc     #$01
001B74r 1  48                   pha
001B75r 1  A2 04                ldx     #BYTES_FP
001B77r 1               L3E6C:
001B77r 1  B5 B3                lda     ARG,x
001B79r 1  B4 AC                ldy     FAC,x
001B7Br 1  95 AC                sta     FAC,x
001B7Dr 1  94 B3                sty     ARG,x
001B7Fr 1  CA                   dex
001B80r 1  10 F5                bpl     L3E6C
001B82r 1  A5 A3                lda     ARGEXTENSION
001B84r 1  85 B9                sta     FACEXTENSION
001B86r 1  20 rr rr             jsr     FSUBT
001B89r 1  20 rr rr             jsr     NEGOP
001B8Cr 1  A9 rr                lda     #<POLY_EXP
001B8Er 1  A0 rr                ldy     #>POLY_EXP
001B90r 1  20 rr rr             jsr     POLYNOMIAL
001B93r 1  A9 00                lda     #$00
001B95r 1  85 B8                sta     SGNCPR
001B97r 1  68                   pla
001B98r 1  20 rr rr             jsr     ADD_EXPONENTS1
001B9Br 1  60                   rts
001B9Cr 1               ; ----------------------------------------------------------------------------
001B9Cr 1               ; ODD POLYNOMIAL SUBROUTINE
001B9Cr 1               ;
001B9Cr 1               ; F(X) = X * P(X^2)
001B9Cr 1               ;
001B9Cr 1               ; WHERE:  X IS VALUE IN FAC
001B9Cr 1               ;	Y,A POINTS AT COEFFICIENT TABLE
001B9Cr 1               ;	FIRST BYTE OF COEFF. TABLE IS N
001B9Cr 1               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001B9Cr 1               ;
001B9Cr 1               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
001B9Cr 1               ; ----------------------------------------------------------------------------
001B9Cr 1               POLYNOMIAL_ODD:
001B9Cr 1  85 BA                sta     STRNG2
001B9Er 1  84 BB                sty     STRNG2+1
001BA0r 1  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001BA3r 1  A9 A4                lda     #TEMP1X
001BA5r 1  20 rr rr             jsr     FMULT
001BA8r 1  20 rr rr             jsr     SERMAIN
001BABr 1  A9 A4                lda     #TEMP1X
001BADr 1  A0 00                ldy     #$00
001BAFr 1  4C rr rr             jmp     FMULT
001BB2r 1               ; ----------------------------------------------------------------------------
001BB2r 1               ; NORMAL POLYNOMIAL SUBROUTINE
001BB2r 1               ;
001BB2r 1               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
001BB2r 1               ;
001BB2r 1               ; WHERE:  X IS VALUE IN FAC
001BB2r 1               ;	Y,A POINTS AT COEFFICIENT TABLE
001BB2r 1               ;	FIRST BYTE OF COEFF. TABLE IS N
001BB2r 1               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001BB2r 1               ; ----------------------------------------------------------------------------
001BB2r 1               POLYNOMIAL:
001BB2r 1  85 BA                sta     STRNG2
001BB4r 1  84 BB                sty     STRNG2+1
001BB6r 1               SERMAIN:
001BB6r 1  20 rr rr             jsr     STORE_FAC_IN_TEMP2_ROUNDED
001BB9r 1  B1 BA                lda     (STRNG2),y
001BBBr 1  85 B1                sta     SERLEN
001BBDr 1  A4 BA                ldy     STRNG2
001BBFr 1  C8                   iny
001BC0r 1  98                   tya
001BC1r 1  D0 02                bne     L3EBA
001BC3r 1  E6 BB                inc     STRNG2+1
001BC5r 1               L3EBA:
001BC5r 1  85 BA                sta     STRNG2
001BC7r 1  A4 BB                ldy     STRNG2+1
001BC9r 1               L3EBE:
001BC9r 1  20 rr rr             jsr     FMULT
001BCCr 1  A5 BA                lda     STRNG2
001BCEr 1  A4 BB                ldy     STRNG2+1
001BD0r 1  18                   clc
001BD1r 1  69 04                adc     #BYTES_FP
001BD3r 1  90 01                bcc     L3ECB
001BD5r 1  C8                   iny
001BD6r 1               L3ECB:
001BD6r 1  85 BA                sta     STRNG2
001BD8r 1  84 BB                sty     STRNG2+1
001BDAr 1  20 rr rr             jsr     FADD
001BDDr 1  A9 A8                lda     #TEMP2
001BDFr 1  A0 00                ldy     #$00
001BE1r 1  C6 B1                dec     SERLEN
001BE3r 1  D0 E4                bne     L3EBE
001BE5r 1               RTS19:
001BE5r 1  60                   rts
001BE6r 1               ; ----------------------------------------------------------------------------
001BE6r 1               ; "RND" FUNCTION
001BE6r 1               ; ----------------------------------------------------------------------------
001BE6r 1               CONRND1:
001BE6r 1  98 35 44 7A          .byte   $98,$35,$44,$7A
001BEAr 1               CONRND2:
001BEAr 1  68 28 B1 46          .byte   $68,$28,$B1,$46
001BEEr 1               RND:
001BEEr 1  20 rr rr             jsr     SIGN
001BF1r 1  AA                   tax
001BF2r 1  30 18                bmi     L3F01
001BF4r 1  A9 D4                lda     #<RNDSEED
001BF6r 1  A0 00                ldy     #>RNDSEED
001BF8r 1  20 rr rr             jsr     LOAD_FAC_FROM_YA
001BFBr 1  8A                   txa
001BFCr 1  F0 E7                beq     RTS19
001BFEr 1  A9 rr                lda     #<CONRND1
001C00r 1  A0 rr                ldy     #>CONRND1
001C02r 1  20 rr rr             jsr     FMULT
001C05r 1  A9 rr                lda     #<CONRND2
001C07r 1  A0 rr                ldy     #>CONRND2
001C09r 1  20 rr rr             jsr     FADD
001C0Cr 1               L3F01:
001C0Cr 1  A6 AF                ldx     FAC_LAST
001C0Er 1  A5 AD                lda     FAC+1
001C10r 1  85 AF                sta     FAC_LAST
001C12r 1  86 AD                stx     FAC+1
001C14r 1  A9 00                lda     #$00
001C16r 1  85 B0                sta     FACSIGN
001C18r 1  A5 AC                lda     FAC
001C1Ar 1  85 B9                sta     FACEXTENSION
001C1Cr 1  A9 80                lda     #$80
001C1Er 1  85 AC                sta     FAC
001C20r 1  20 rr rr             jsr     NORMALIZE_FAC2
001C23r 1  A2 D4                ldx     #<RNDSEED
001C25r 1  A0 00                ldy     #>RNDSEED
001C27r 1               GOMOVMF:
001C27r 1  4C rr rr             jmp     STORE_FAC_AT_YX_ROUNDED
001C2Ar 1               ; ----------------------------------------------------------------------------
001C2Ar 1               ; "COS" FUNCTION
001C2Ar 1               ; ----------------------------------------------------------------------------
001C2Ar 1               COS:
001C2Ar 1  A9 rr                lda     #<CON_PI_HALF
001C2Cr 1  A0 rr                ldy     #>CON_PI_HALF
001C2Er 1  20 rr rr             jsr     FADD
001C31r 1               ; ----------------------------------------------------------------------------
001C31r 1               ; "SIN" FUNCTION
001C31r 1               ; ----------------------------------------------------------------------------
001C31r 1               SIN:
001C31r 1  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001C34r 1  A9 rr                lda     #<CON_PI_DOUB
001C36r 1  A0 rr                ldy     #>CON_PI_DOUB
001C38r 1  A6 B7                ldx     ARGSIGN
001C3Ar 1  20 rr rr             jsr     DIV
001C3Dr 1  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001C40r 1  20 rr rr             jsr     INT
001C43r 1  A9 00                lda     #$00
001C45r 1  85 B8                sta     STRNG1
001C47r 1  20 rr rr             jsr     FSUBT
001C4Ar 1               ; ----------------------------------------------------------------------------
001C4Ar 1               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
001C4Ar 1               ;
001C4Ar 1               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
001C4Ar 1               ;
001C4Ar 1               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
001C4Ar 1               ; ----------------------------------------------------------------------------
001C4Ar 1  A9 rr                lda     #<QUARTER
001C4Cr 1  A0 rr                ldy     #>QUARTER
001C4Er 1  20 rr rr             jsr     FSUB
001C51r 1  A5 B0                lda     FACSIGN
001C53r 1  48                   pha
001C54r 1  10 0D                bpl     SIN1
001C56r 1  20 rr rr             jsr     FADDH
001C59r 1  A5 B0                lda     FACSIGN
001C5Br 1  30 09                bmi     L3F5B
001C5Dr 1  A5 63                lda     CPRMASK
001C5Fr 1  49 FF                eor     #$FF
001C61r 1  85 63                sta     CPRMASK
001C63r 1               ; ----------------------------------------------------------------------------
001C63r 1               ; IF FALL THRU, RANGE IS 0...1/2
001C63r 1               ; IF BRANCH HERE, RANGE IS 0...1/4
001C63r 1               ; ----------------------------------------------------------------------------
001C63r 1               SIN1:
001C63r 1  20 rr rr             jsr     NEGOP
001C66r 1               ; ----------------------------------------------------------------------------
001C66r 1               ; IF FALL THRU, RANGE IS -1/2...0
001C66r 1               ; IF BRANCH HERE, RANGE IS -1/4...0
001C66r 1               ; ----------------------------------------------------------------------------
001C66r 1               L3F5B:
001C66r 1  A9 rr                lda     #<QUARTER
001C68r 1  A0 rr                ldy     #>QUARTER
001C6Ar 1  20 rr rr             jsr     FADD
001C6Dr 1  68                   pla
001C6Er 1  10 03                bpl     L3F68
001C70r 1  20 rr rr             jsr     NEGOP
001C73r 1               L3F68:
001C73r 1  A9 rr                lda     #<POLY_SIN
001C75r 1  A0 rr                ldy     #>POLY_SIN
001C77r 1  4C rr rr             jmp     POLYNOMIAL_ODD
001C7Ar 1               ; ----------------------------------------------------------------------------
001C7Ar 1               ; "TAN" FUNCTION
001C7Ar 1               ;
001C7Ar 1               ; COMPUTE TAN(X) = SIN(X) / COS(X)
001C7Ar 1               ; ----------------------------------------------------------------------------
001C7Ar 1               TAN:
001C7Ar 1  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001C7Dr 1  A9 00                lda     #$00
001C7Fr 1  85 63                sta     CPRMASK
001C81r 1  20 rr rr             jsr     SIN
001C84r 1  A2 9C                ldx     #TEMP3
001C86r 1  A0 00                ldy     #$00
001C88r 1  20 rr rr             jsr     GOMOVMF
001C8Br 1  A9 A4                lda     #TEMP1+(5-BYTES_FP)
001C8Dr 1  A0 00                ldy     #$00
001C8Fr 1  20 rr rr             jsr     LOAD_FAC_FROM_YA
001C92r 1  A9 00                lda     #$00
001C94r 1  85 B0                sta     FACSIGN
001C96r 1  A5 63                lda     CPRMASK
001C98r 1  20 rr rr             jsr     TAN1
001C9Br 1  A9 9C                lda     #TEMP3
001C9Dr 1  A0 00                ldy     #$00
001C9Fr 1  4C rr rr             jmp     FDIV
001CA2r 1               TAN1:
001CA2r 1  48                   pha
001CA3r 1  4C rr rr             jmp     SIN1
001CA6r 1               ; ----------------------------------------------------------------------------
001CA6r 1               CON_PI_HALF:
001CA6r 1  81 49 0F DB          .byte   $81,$49,$0F,$DB
001CAAr 1               CON_PI_DOUB:
001CAAr 1  83 49 0F DB          .byte   $83,$49,$0F,$DB
001CAEr 1               QUARTER:
001CAEr 1  7F 00 00 00          .byte   $7F,$00,$00,$00
001CB2r 1               POLY_SIN:
001CB2r 1  04 86 1E D7          .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
001CB6r 1  FB 87 99 26  
001CBAr 1  65 87 23 34          .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
001CBEr 1  58 86 A5 5D  
001CC2r 1  E1 83 49 0F          .byte   $E1,$83,$49,$0F,$DB
001CC6r 1  DB           
001CC7r 1               
001CC7r 1               ; ----------------------------------------------------------------------------
001CC7r 1               ; "ATN" FUNCTION
001CC7r 1               ; ----------------------------------------------------------------------------
001CC7r 1               ATN:
001CC7r 1  A5 B0                lda     FACSIGN
001CC9r 1  48                   pha
001CCAr 1  10 03                bpl     L3FDB
001CCCr 1  20 rr rr             jsr     NEGOP
001CCFr 1               L3FDB:
001CCFr 1  A5 AC                lda     FAC
001CD1r 1  48                   pha
001CD2r 1  C9 81                cmp     #$81
001CD4r 1  90 07                bcc     L3FE9
001CD6r 1  A9 rr                lda     #<CON_ONE
001CD8r 1  A0 rr                ldy     #>CON_ONE
001CDAr 1  20 rr rr             jsr     FDIV
001CDDr 1               ; ----------------------------------------------------------------------------
001CDDr 1               ; 0 <= X <= 1
001CDDr 1               ; 0 <= ATN(X) <= PI/8
001CDDr 1               ; ----------------------------------------------------------------------------
001CDDr 1               L3FE9:
001CDDr 1  A9 rr                lda     #<POLY_ATN
001CDFr 1  A0 rr                ldy     #>POLY_ATN
001CE1r 1  20 rr rr             jsr     POLYNOMIAL_ODD
001CE4r 1  68                   pla
001CE5r 1  C9 81                cmp     #$81
001CE7r 1  90 07                bcc     L3FFC
001CE9r 1  A9 rr                lda     #<CON_PI_HALF
001CEBr 1  A0 rr                ldy     #>CON_PI_HALF
001CEDr 1  20 rr rr             jsr     FSUB
001CF0r 1               L3FFC:
001CF0r 1  68                   pla
001CF1r 1  10 03                bpl     L4002
001CF3r 1  4C rr rr             jmp     NEGOP
001CF6r 1               L4002:
001CF6r 1  60                   rts
001CF7r 1               ; ----------------------------------------------------------------------------
001CF7r 1               POLY_ATN:
001CF7r 1  08                   .byte   $08
001CF8r 1  78 3A C5 37  		.byte	$78,$3A,$C5,$37
001CFCr 1  7B 83 A2 5C  		.byte	$7B,$83,$A2,$5C
001D00r 1  7C 2E DD 4D  		.byte	$7C,$2E,$DD,$4D
001D04r 1  7D 99 B0 1E  		.byte	$7D,$99,$B0,$1E
001D08r 1  7D 59 ED 24  		.byte	$7D,$59,$ED,$24
001D0Cr 1  7E 91 72 00  		.byte	$7E,$91,$72,$00
001D10r 1  7E 4C B9 73  		.byte	$7E,$4C,$B9,$73
001D14r 1  7F AA AA 53  		.byte	$7F,$AA,$AA,$53
001D18r 1  81 00 00 00  		.byte	$81,$00,$00,$00
001D1Cr 1               GENERIC_CHRGET:
001D1Cr 1  E6 C3                inc     TXTPTR
001D1Er 1  D0 02                bne     GENERIC_CHRGOT
001D20r 1  E6 C4                inc     TXTPTR+1
001D22r 1               GENERIC_CHRGOT:
001D22r 1               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
001D22r 1  AD 60 EA             lda     $EA60
001D25r 1  C9 3A                cmp     #$3A
001D27r 1  B0 0A                bcs     L4058
001D29r 1               GENERIC_CHRGOT2:
001D29r 1  C9 20                cmp     #$20
001D2Br 1  F0 EF                beq     GENERIC_CHRGET
001D2Dr 1  38                   sec
001D2Er 1  E9 30                sbc     #$30
001D30r 1  38                   sec
001D31r 1  E9 D0                sbc     #$D0
001D33r 1               L4058:
001D33r 1  60                   rts
001D34r 1               GENERIC_RNDSEED:
001D34r 1               ; random number seed
001D34r 1  80 4F C7 52          .byte   $80,$4F,$C7,$52
001D38r 1               GENERIC_CHRGET_END:
001D38r 1               ; ----------------------------------------------------------------------------
001D38r 1               PR_WRITTEN_BY:
001D38r 1  A9 rr                lda     #<QT_WRITTEN_BY
001D3Ar 1  A0 rr                ldy     #>QT_WRITTEN_BY
001D3Cr 1  20 rr rr             jsr     STROUT
001D3Fr 1               COLD_START:
001D3Fr 1  A2 FF                ldx     #$FF
001D41r 1  86 88                stx     CURLIN+1
001D43r 1  9A                   txs
001D44r 1  A9 rr                lda     #<COLD_START
001D46r 1  A0 rr                ldy     #>COLD_START
001D48r 1  85 01                sta     GORESTART+1
001D4Ar 1  84 02                sty     GORESTART+2
001D4Cr 1  85 04                sta     GOSTROUT+1
001D4Er 1  84 05                sty     GOSTROUT+2
001D50r 1  A9 rr                lda     #<AYINT
001D52r 1  A0 rr                ldy     #>AYINT
001D54r 1  85 06                sta     GOAYINT
001D56r 1  84 07                sty     GOAYINT+1
001D58r 1  A9 rr                lda     #<GIVAYF
001D5Ar 1  A0 rr                ldy     #>GIVAYF
001D5Cr 1  85 08                sta     GOGIVEAYF
001D5Er 1  84 09                sty     GOGIVEAYF+1
001D60r 1  A9 4C                lda     #$4C
001D62r 1  85 00                sta     GORESTART
001D64r 1  85 03                sta     GOSTROUT
001D66r 1  85 A1                sta     JMPADRS
001D68r 1  85 0A                sta     USR
001D6Ar 1  A9 rr                lda     #<IQERR
001D6Cr 1  A0 rr                ldy     #>IQERR
001D6Er 1  85 0B                sta     USR+1
001D70r 1  84 0C                sty     USR+2
001D72r 1  A9 48                lda     #WIDTH
001D74r 1  85 0F                sta     Z17
001D76r 1  A9 38                lda     #WIDTH2
001D78r 1  85 10                sta     Z18
001D7Ar 1  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
001D7Cr 1               L4098:
001D7Cr 1  BD rr rr             lda     GENERIC_CHRGET-1,x
001D7Fr 1  95 BB                sta     CHRGET-1,x
001D81r 1  CA                   dex
001D82r 1  D0 F8                bne     L4098
001D84r 1  8A                   txa
001D85r 1  85 B2                sta     SHIFTSIGNEXT
001D87r 1  85 67                sta     LASTPT+1
001D89r 1  85 0D                sta     Z15
001D8Br 1  85 0E                sta     POSX
001D8Dr 1  48                   pha
001D8Er 1  85 64                sta     Z14
001D90r 1  A9 03                lda     #$03
001D92r 1  85 A0                sta     DSCLEN
001D94r 1  A9 2C                lda     #$2C
001D96r 1  85 12                sta     LINNUM+1
001D98r 1  20 rr rr             jsr     CRDO
001D9Br 1  A2 68                ldx     #TEMPST
001D9Dr 1  86 65                stx     TEMPPT
001D9Fr 1  A9 rr                lda     #<QT_MEMORY_SIZE
001DA1r 1  A0 rr                ldy     #>QT_MEMORY_SIZE
001DA3r 1  20 rr rr             jsr     STROUT
001DA6r 1  20 rr rr             jsr     NXIN
001DA9r 1  86 C3                stx     TXTPTR
001DABr 1  84 C4                sty     TXTPTR+1
001DADr 1  20 BC 00             jsr     CHRGET
001DB0r 1  C9 41                cmp     #$41
001DB2r 1  F0 84                beq     PR_WRITTEN_BY
001DB4r 1  A8                   tay
001DB5r 1  D0 21                bne     L40EE
001DB7r 1  A9 00                lda     #<RAMSTART2
001DB9r 1  A0 02                ldy     #>RAMSTART2
001DBBr 1  85 11                sta     LINNUM
001DBDr 1  84 12                sty     LINNUM+1
001DBFr 1  A0 00                ldy     #$00
001DC1r 1               L40D7:
001DC1r 1  E6 11                inc     LINNUM
001DC3r 1  D0 02                bne     L40DD
001DC5r 1  E6 12                inc     LINNUM+1
001DC7r 1               L40DD:
001DC7r 1  A9 92                lda     #$92 ; 10010010 / 00100100
001DC9r 1  91 11                sta     (LINNUM),y
001DCBr 1  D1 11                cmp     (LINNUM),y
001DCDr 1  D0 15                bne     L40FA
001DCFr 1  0A                   asl     a
001DD0r 1  91 11                sta     (LINNUM),y
001DD2r 1  D1 11                cmp     (LINNUM),y
001DD4r 1  F0 EB                beq     L40D7; old: faster
001DD6r 1  D0 0C                bne     L40FA
001DD8r 1               L40EE:
001DD8r 1  20 C2 00             jsr     CHRGOT
001DDBr 1  20 rr rr             jsr     LINGET
001DDEr 1  A8                   tay
001DDFr 1  F0 03                beq     L40FA
001DE1r 1  4C rr rr             jmp     SYNERR
001DE4r 1               L40FA:
001DE4r 1  A5 11                lda     LINNUM
001DE6r 1  A4 12                ldy     LINNUM+1
001DE8r 1  85 85                sta     MEMSIZ
001DEAr 1  84 86                sty     MEMSIZ+1
001DECr 1  85 81                sta     FRETOP
001DEEr 1  84 82                sty     FRETOP+1
001DF0r 1               L4106:
001DF0r 1  A9 rr                lda     #<QT_TERMINAL_WIDTH
001DF2r 1  A0 rr                ldy     #>QT_TERMINAL_WIDTH
001DF4r 1  20 rr rr             jsr     STROUT
001DF7r 1  20 rr rr             jsr     NXIN
001DFAr 1  86 C3                stx     TXTPTR
001DFCr 1  84 C4                sty     TXTPTR+1
001DFEr 1  20 BC 00             jsr     CHRGET
001E01r 1  A8                   tay
001E02r 1  F0 1C                beq     L4136
001E04r 1  20 rr rr             jsr     LINGET
001E07r 1  A5 12                lda     LINNUM+1
001E09r 1  D0 E5                bne     L4106
001E0Br 1  A5 11                lda     LINNUM
001E0Dr 1  C9 10                cmp     #$10
001E0Fr 1  90 DF                bcc     L4106
001E11r 1  85 0F                sta     Z17
001E13r 1               L4129:
001E13r 1  E9 0E                sbc     #$0E
001E15r 1  B0 FC                bcs     L4129
001E17r 1  49 FF                eor     #$FF
001E19r 1  E9 0C                sbc     #$0C
001E1Br 1  18                   clc
001E1Cr 1  65 0F                adc     Z17
001E1Er 1  85 10                sta     Z18
001E20r 1               L4136:
001E20r 1  A2 00                ldx     #<RAMSTART2
001E22r 1  A0 02                ldy     #>RAMSTART2
001E24r 1  86 79                stx     TXTTAB
001E26r 1  84 7A                sty     TXTTAB+1
001E28r 1  A0 00                ldy     #$00
001E2Ar 1  98                   tya
001E2Br 1  91 79                sta     (TXTTAB),y
001E2Dr 1  E6 79                inc     TXTTAB
001E2Fr 1  D0 02                bne     L4192
001E31r 1  E6 7A                inc     TXTTAB+1
001E33r 1               L4192:
001E33r 1  A5 79                lda     TXTTAB
001E35r 1  A4 7A                ldy     TXTTAB+1
001E37r 1  20 rr rr             jsr     REASON
001E3Ar 1  20 rr rr             jsr     CRDO
001E3Dr 1  A5 85                lda     MEMSIZ
001E3Fr 1  38                   sec
001E40r 1  E5 79                sbc     TXTTAB
001E42r 1  AA                   tax
001E43r 1  A5 86                lda     MEMSIZ+1
001E45r 1  E5 7A                sbc     TXTTAB+1
001E47r 1  20 rr rr             jsr     LINPRT
001E4Ar 1  A9 rr                lda     #<QT_BYTES_FREE
001E4Cr 1  A0 rr                ldy     #>QT_BYTES_FREE
001E4Er 1  20 rr rr             jsr     STROUT
001E51r 1  A9 rr                lda     #<STROUT
001E53r 1  A0 rr                ldy     #>STROUT
001E55r 1  85 04                sta     GOSTROUT+1
001E57r 1  84 05                sty     GOSTROUT+2
001E59r 1  20 rr rr             jsr     SCRTCH
001E5Cr 1  A9 rr                lda     #<RESTART
001E5Er 1  A0 rr                ldy     #>RESTART
001E60r 1  85 01                sta     GORESTART+1
001E62r 1  84 02                sty     GORESTART+2
001E64r 1  6C 01 00             jmp     (GORESTART+1)
001E67r 1               ; OSI is compiled for ROM, but includes
001E67r 1               ; this unused string
001E67r 1  57 41 4E 54          .byte   "WANT SIN-COS-TAN-ATN"
001E6Br 1  20 53 49 4E  
001E6Fr 1  2D 43 4F 53  
001E7Br 1  00                   .byte   0
001E7Cr 1               QT_WRITTEN_BY:
001E7Cr 1  0D 0A 0C             .byte   CR,LF,$0C ; FORM FEED
001E7Fr 1  57 52 49 54          .byte   "WRITTEN BY RICHARD W. WEILAND."
001E83r 1  54 45 4E 20  
001E87r 1  42 59 20 52  
001E9Dr 1  0D 0A 00             .byte   CR,LF,0
001EA0r 1               QT_MEMORY_SIZE:
001EA0r 1  4D 45 4D 4F          .byte   "MEMORY SIZE"
001EA4r 1  52 59 20 53  
001EA8r 1  49 5A 45     
001EABr 1  00                   .byte   0
001EACr 1               QT_TERMINAL_WIDTH:
001EACr 1  54 45 52 4D          .byte   "TERMINAL WIDTH"
001EB0r 1  49 4E 41 4C  
001EB4r 1  20 57 49 44  
001EBAr 1  00                   .byte   0
001EBBr 1               QT_BYTES_FREE:
001EBBr 1  20 42 59 54          .byte   " BYTES FREE"
001EBFr 1  45 53 20 46  
001EC3r 1  52 45 45     
001EC6r 1  0D 0A 0D 0A          .byte   CR,LF,CR,LF
001ECAr 1  4F 53 49 20          .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
001ECEr 1  36 35 30 32  
001ED2r 1  20 42 41 53  
001EECr 1  0D 0A                .byte   CR,LF
001EEEr 1  43 4F 50 59          .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
001EF2r 1  52 49 47 48  
001EF6r 1  54 20 31 39  
001F0Dr 1  0D 0A 00             .byte   CR,LF,0
001F10r 1               
001F10r 1               ; STARTUP AND SERIAL I/O ROUTINES ===========================================================
001F10r 1               ; BY G. SEARLE 2013 =========================================================================
001F10r 1               ;ACIA := $A000
001F10r 1               ;ACIAControl := ACIA+3
001F10r 1               ;ACIAStatus := ACIA+1
001F10r 1               ;ACIAData := ACIA
001F10r 1               ;ACIACommand := ACIA+2
001F10r 1               
001F10r 1               ;.segment "IOHANDLER"
001F10r 1               ;.org $FF00
001F10r 1               Reset:
001F10r 1  20 rr rr     	JSR ACIA_INIT  ;init the ACIA
001F13r 1               
001F13r 1               ; Display startup message
001F13r 1  A0 00        	LDY #0
001F15r 1               ShowStartMsg:
001F15r 1                   ;LDA #<StartupMessage
001F15r 1                   ;STA MSGL      ;store to zero page register
001F15r 1                   ;LDA #>StartupMessage
001F15r 1                   ;STA MSGH
001F15r 1                   ;JSR ACIA_SHWMSG
001F15r 1               
001F15r 1  B9 rr rr     	LDA	StartupMessage,Y
001F18r 1  F0 06        	BEQ	WaitForKeypress
001F1Ar 1  20 rr rr     	JSR	MONCOUT
001F1Dr 1  C8           	INY
001F1Er 1  D0 F5        	BNE	ShowStartMsg
001F20r 1               
001F20r 1               ; Wait for a cold/warm start selection
001F20r 1               WaitForKeypress:
001F20r 1  20 rr rr     	JSR	MONRDKEY
001F23r 1  90 FB        	BCC	WaitForKeypress
001F25r 1               
001F25r 1  29 DF        	AND	#$DF			; Make upper case
001F27r 1  C9 57        	CMP	#'W'			; compare with [W]arm start
001F29r 1  F0 07        	BEQ	WarmStart
001F2Br 1               
001F2Br 1  C9 43        	CMP	#'C'			; compare with [C]old start
001F2Dr 1  D0 E1        	BNE	Reset
001F2Fr 1               
001F2Fr 1  4C rr rr     	JMP	COLD_START	; BASIC cold start
001F32r 1               
001F32r 1               WarmStart:
001F32r 1  4C rr rr     	JMP	RESTART		; BASIC warm start
001F35r 1               
001F35r 1               MONCOUT:
001F35r 1  20 rr rr         JSR ACIA_WRITE ;write character
001F38r 1               	;PHA                ;save A
001F38r 1                   ;AND #$7F        ;*Change to "standard ASCII"
001F38r 1               ;SerialOutWait:
001F38r 1               	;STA	ACIAData       ;Send it.
001F38r 1               
001F38r 1               	;LDA	ACIAStatus     ;load status register for ACIA
001F38r 1               	;AND	#10            ;mask bit 4.
001F38r 1               	;BEQ	SerialOutWait  ;ACIA not done yet, wait...
001F38r 1               	;PLA                ;restore A
001F38r 1  60           	RTS
001F39r 1               
001F39r 1               MONRDKEY:
001F39r 1                   ;JMP NoDataIn ;will hook up later
001F39r 1  20 rr rr         JSR ACIA_GETCHAR
001F3Cr 1               	;LDA	ACIAStatus
001F3Cr 1               	;AND	#1
001F3Cr 1               	;CMP	#1
001F3Cr 1               	;BNE	NoDataIn
001F3Cr 1               	;LDA	ACIAData
001F3Cr 1               	;SEC		; Carry set if key available
001F3Cr 1  60           	RTS
001F3Dr 1               ;NoDataIn:
001F3Dr 1               ;	CLC		; Carry clear if no key pressed
001F3Dr 1               ;	RTS
001F3Dr 1               
001F3Dr 1               MONISCNTC:
001F3Dr 1  20 rr rr     	JSR	MONRDKEY
001F40r 1  90 06        	BCC	NotCTRLC ; If no key pressed then exit
001F42r 1  C9 03        	CMP	#3
001F44r 1  D0 02        	BNE	NotCTRLC ; if CTRL-C not pressed then exit
001F46r 1  38           	SEC		; Carry set if control C pressed
001F47r 1  60           	RTS
001F48r 1               NotCTRLC:
001F48r 1  18           	CLC		; Carry clear if control C not pressed
001F49r 1  60           	RTS
001F4Ar 1               
001F4Ar 1               StartupMessage:
001F4Ar 1  0C 43 6F 6C  	.byte	$0C,"Cold [C] or warm [W] start?",$0D,$0A,$00
001F4Er 1  64 20 5B 43  
001F52r 1  5D 20 6F 72  
001F69r 1               
001F69r 1               LOAD:
001F69r 1  60           	RTS
001F6Ar 1               
001F6Ar 1               SAVE:
001F6Ar 1  60           	RTS
001F6Br 1               
001F6Br 1               ;.segment "VECTS"
001F6Br 1               ;.org $FFFA
001F6Br 1               ;	.word	Reset		; NMI
001F6Br 1               ;	.word	Reset		; RESET
001F6Br 1               ;	.word	Reset		; IRQ
001F6Br 1               
001F6Br 1               
