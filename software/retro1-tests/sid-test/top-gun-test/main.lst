ca65 V2.15 - Git f7cdfbf
Main file   : main.s65
Current file: main.s65

000000r 1                               .setcpu "6502"
000000r 1               
000000r 1                               .include "macros.inc65"
000000r 2               ; Push X
000000r 2               .macro phx
000000r 2                 sta TMP_STACK
000000r 2                 txa
000000r 2                 pha
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Push Y
000000r 2               .macro phy
000000r 2                 sta TMP_STACK
000000r 2                 tya
000000r 2                 pha
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Push X and Y
000000r 2               .macro phxy
000000r 2                 sta TMP_STACK
000000r 2                 txa
000000r 2                 pha
000000r 2                 tya
000000r 2                 pha
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Push A and X
000000r 2               .macro phax
000000r 2                 sta TMP_STACK
000000r 2                 pha
000000r 2                 txa
000000r 2                 pha
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Push A and Y
000000r 2               .macro phay
000000r 2                 sta TMP_STACK
000000r 2                 pha
000000r 2                 tya
000000r 2                 pha
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Push A, X and Y
000000r 2               .macro phaxy
000000r 2                 sta TMP_STACK
000000r 2                 pha
000000r 2                 txa
000000r 2                 pha
000000r 2                 tya
000000r 2                 pha
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Pull X
000000r 2               .macro plx
000000r 2                 sta TMP_STACK
000000r 2                 pla
000000r 2                 tax
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Pull Y
000000r 2               .macro ply
000000r 2                 sta TMP_STACK
000000r 2                 pla
000000r 2                 tay
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Pull X and Y
000000r 2               .macro plxy
000000r 2                 sta TMP_STACK
000000r 2                 pla
000000r 2                 tay
000000r 2                 pla
000000r 2                 tax
000000r 2                 lda TMP_STACK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Pull A and X
000000r 2               .macro plax
000000r 2                 pla
000000r 2                 tax
000000r 2                 pla
000000r 2               .endmacro
000000r 2               
000000r 2               ; Pull A and Y
000000r 2               .macro play
000000r 2                 pla
000000r 2                 tay
000000r 2                 pla
000000r 2               .endmacro
000000r 2               
000000r 2               ; Pull A, X and Y
000000r 2               .macro plaxy
000000r 2                 pla
000000r 2                 tay
000000r 2                 pla
000000r 2                 tax
000000r 2                 pla
000000r 2               .endmacro
000000r 2               
000000r 2               ; Load zero page register reg/reg+1 with the 16-bit value, destroys A
000000r 2               .macro ld16 reg, value
000000r 2                 lda #<(value)
000000r 2                 sta reg
000000r 2                 lda #>(value)
000000r 2                 sta reg + 1
000000r 2               .endmacro
000000r 2               
000000r 1                               .include "zeropage.inc65"
000000r 2               .importzp RES
000000r 2               .importzp R0
000000r 2               .importzp R1
000000r 2               .importzp TMP0
000000r 2               .importzp TMP1
000000r 2               .importzp TMP_STACK
000000r 2               
000000r 1                               .include "acia.inc65"
000000r 2               .import acia_init
000000r 2               .import acia_getc
000000r 2               .import acia_gets
000000r 2               .import acia_gets_buffer
000000r 2               .import acia_putc
000000r 2               .import acia_puts
000000r 2               .import acia_put_newline
000000r 2               
000000r 1                               .include "string.inc65"
000000r 2               .import fmt_hex_char
000000r 2               .import fmt_bin_string
000000r 2               .import fmt_hex_string
000000r 2               .import scan_hex_char
000000r 2               .import scan_hex
000000r 2               .import scan_hex16
000000r 2               
000000r 1                               .include "tools.inc65"
000000r 2               .import delay_ms
000000r 2               
000000r 1                               .include "io.inc65"
000000r 2               ; CPU frequency
000000r 2               
000000r 2               F_CPU = 1000000
000000r 2               
000000r 2               ; ACIA registers
000000r 2               
000000r 2               ACIA_BASE    = $8200
000000r 2               ACIA_DATA    = ACIA_BASE
000000r 2               ACIA_STATUS  = ACIA_BASE + 1
000000r 2               ACIA_COMMAND = ACIA_BASE + 2
000000r 2               ACIA_CONTROL = ACIA_BASE + 3
000000r 2               
000000r 2               ; ACIA control register bit values
000000r 2               
000000r 2               ACIA_STOP_BITS_1 = %00000000
000000r 2               ACIA_STOP_BITS_2 = %10000000
000000r 2               ACIA_DATA_BITS_8 = %00000000
000000r 2               ACIA_DATA_BITS_7 = %00100000
000000r 2               ACIA_DATA_BITS_6 = %01000000
000000r 2               ACIA_DATA_BITS_5 = %01100000
000000r 2               ACIA_CLOCK_EXT   = %00000000
000000r 2               ACIA_CLOCK_INT   = %00010000
000000r 2               ACIA_BAUD_16XEXT = %00000000
000000r 2               ACIA_BAUD_50     = %00000001
000000r 2               ACIA_BAUD_75     = %00000010
000000r 2               ACIA_BAUD_109    = %00000011
000000r 2               ACIA_BAUD_134    = %00000100
000000r 2               ACIA_BAUD_150    = %00000101
000000r 2               ACIA_BAUD_300    = %00000110
000000r 2               ACIA_BAUD_600    = %00000111
000000r 2               ACIA_BAUD_1200   = %00001000
000000r 2               ACIA_BAUD_1800   = %00001001
000000r 2               ACIA_BAUD_2400   = %00001010
000000r 2               ACIA_BAUD_3600   = %00001011
000000r 2               ACIA_BAUD_4800   = %00001100
000000r 2               ACIA_BAUD_7200   = %00001101
000000r 2               ACIA_BAUD_9600   = %00001110
000000r 2               ACIA_BAUD_19200  = %00001111
000000r 2               
000000r 2               ; ACIA command register bit values
000000r 2               
000000r 2               ACIA_PARITY_ODD              = %00000000
000000r 2               ACIA_PARITY_EVEN             = %01000000
000000r 2               ACIA_PARITY_MARK             = %10000000
000000r 2               ACIA_PARITY_SPACE            = %11000000
000000r 2               ACIA_PARITY_DISABLE          = %00000000
000000r 2               ACIA_PARITY_ENABLE           = %00100000
000000r 2               ACIA_ECHO_DISABLE            = %00000000
000000r 2               ACIA_ECHO_ENABLE             = %00010000
000000r 2               ACIA_TX_INT_DISABLE_RTS_HIGH = %00000000
000000r 2               ACIA_TX_INT_ENABLE_RTS_LOW   = %00000100
000000r 2               ACIA_TX_INT_DISABLE_RTS_LOW  = %00001000
000000r 2               ACIA_TX_INT_DISABLE_BREAK    = %00001100
000000r 2               ACIA_RX_INT_ENABLE           = %00000000
000000r 2               ACIA_RX_INT_DISABLE          = %00000010
000000r 2               ACIA_DTR_HIGH                = %00000000
000000r 2               ACIA_DTR_LOW                 = %00000001
000000r 2               
000000r 2               ; ACIA status register bit masks
000000r 2               
000000r 2               ACIA_STATUS_IRQ        = 1 << 7
000000r 2               ACIA_STATUS_DSR        = 1 << 6
000000r 2               ACIA_STATUS_DCD        = 1 << 5
000000r 2               ACIA_STATUS_TX_EMPTY   = 1 << 4
000000r 2               ACIA_STATUS_RX_FULL    = 1 << 3
000000r 2               ACIA_STATUS_OVERRUN    = 1 << 2
000000r 2               ACIA_STATUS_FRAME_ERR  = 1 << 1
000000r 2               ACIA_STATUS_PARITY_ERR = 1 << 0
000000r 2               
000000r 2               ; VIA registers
000000r 2               
000000r 2               VIA1_BASE   = $8000
000000r 2               VIA1_ORB    = VIA1_BASE
000000r 2               VIA1_IRB    = VIA1_BASE
000000r 2               VIA1_ORA    = VIA1_BASE + 1
000000r 2               VIA1_IRA    = VIA1_BASE + 1
000000r 2               VIA1_DDRB   = VIA1_BASE + 2
000000r 2               VIA1_DDRA   = VIA1_BASE + 3
000000r 2               VIA1_T1C_L  = VIA1_BASE + 4
000000r 2               VIA1_T1C_H  = VIA1_BASE + 5
000000r 2               VIA1_T1L_L  = VIA1_BASE + 6
000000r 2               VIA1_T1L_H  = VIA1_BASE + 7
000000r 2               VIA1_T2C_L  = VIA1_BASE + 8
000000r 2               VIA1_T2C_H  = VIA1_BASE + 9
000000r 2               VIA1_SR     = VIA1_BASE + 10
000000r 2               VIA1_ACR    = VIA1_BASE + 11
000000r 2               VIA1_PCR    = VIA1_BASE + 12
000000r 2               VIA1_IFR    = VIA1_BASE + 13
000000r 2               VIA1_IER    = VIA1_BASE + 14
000000r 2               VIA1_ORA_NH = VIA1_BASE + 15
000000r 2               VIA1_IRA_NH = VIA1_BASE + 15
000000r 2               
000000r 2               VIA2_BASE   = $8100
000000r 2               VIA2_ORB    = VIA2_BASE
000000r 2               VIA2_IRB    = VIA2_BASE
000000r 2               VIA2_ORA    = VIA2_BASE + 1
000000r 2               VIA2_IRA    = VIA2_BASE + 1
000000r 2               VIA2_DDRB   = VIA2_BASE + 2
000000r 2               VIA2_DDRA   = VIA2_BASE + 3
000000r 2               VIA2_T1C_L  = VIA2_BASE + 4
000000r 2               VIA2_T1C_H  = VIA2_BASE + 5
000000r 2               VIA2_T1L_L  = VIA2_BASE + 6
000000r 2               VIA2_T1L_H  = VIA2_BASE + 7
000000r 2               VIA2_T2C_L  = VIA2_BASE + 8
000000r 2               VIA2_T2C_H  = VIA2_BASE + 9
000000r 2               VIA2_SR     = VIA2_BASE + 10
000000r 2               VIA2_ACR    = VIA2_BASE + 11
000000r 2               VIA2_PCR    = VIA2_BASE + 12
000000r 2               VIA2_IFR    = VIA2_BASE + 13
000000r 2               VIA2_IER    = VIA2_BASE + 14
000000r 2               VIA2_ORA_NH = VIA2_BASE + 15
000000r 2               VIA2_IRA_NH = VIA2_BASE + 15
000000r 2               
000000r 2               ; Port bits
000000r 2               
000000r 2               VIA_PA0 = (1 << 0)
000000r 2               VIA_PA1 = (1 << 1)
000000r 2               VIA_PA2 = (1 << 2)
000000r 2               VIA_PA3 = (1 << 3)
000000r 2               VIA_PA4 = (1 << 4)
000000r 2               VIA_PA5 = (1 << 5)
000000r 2               VIA_PA6 = (1 << 6)
000000r 2               VIA_PA7 = (1 << 7)
000000r 2               
000000r 2               ; Port bits
000000r 2               
000000r 2               VIA_PB0 = 1 << 0
000000r 2               VIA_PB1 = 1 << 1
000000r 2               VIA_PB2 = 1 << 2
000000r 2               VIA_PB3 = 1 << 3
000000r 2               VIA_PB4 = 1 << 4
000000r 2               VIA_PB5 = 1 << 5
000000r 2               VIA_PB6 = 1 << 6
000000r 2               VIA_PB7 = 1 << 7
000000r 2               
000000r 2               ; SID registers
000000r 2               
000000r 2               SID_BASE = $8300
000000r 2               SID_VOICE1_FREQ_L = SID_BASE
000000r 2               SID_VOICE1_FREQ_H = SID_BASE + 1
000000r 2               SID_VOICE1_PW_L   = SID_BASE + 2
000000r 2               SID_VOICE1_PW_H   = SID_BASE + 3
000000r 2               SID_VOICE1_CTRL   = SID_BASE + 4
000000r 2               SID_VOICE1_AD     = SID_BASE + 5
000000r 2               SID_VOICE1_SR     = SID_BASE + 6
000000r 2               SID_VOICE2_FREQ_L = SID_BASE + 7
000000r 2               SID_VOICE2_FREQ_H = SID_BASE + 8
000000r 2               SID_VOICE2_PW_L   = SID_BASE + 9
000000r 2               SID_VOICE2_PW_H   = SID_BASE + 10
000000r 2               SID_VOICE2_CTRL   = SID_BASE + 11
000000r 2               SID_VOICE2_AD     = SID_BASE + 12
000000r 2               SID_VOICE2_SR     = SID_BASE + 13
000000r 2               SID_VOICE3_FREQ_L = SID_BASE + 14
000000r 2               SID_VOICE3_FREQ_H = SID_BASE + 15
000000r 2               SID_VOICE3_PW_L   = SID_BASE + 16
000000r 2               SID_VOICE3_PW_H   = SID_BASE + 17
000000r 2               SID_VOICE3_CTRL   = SID_BASE + 18
000000r 2               SID_VOICE3_AD     = SID_BASE + 19
000000r 2               SID_VOICE3_SR     = SID_BASE + 20
000000r 2               SID_FC_L          = SID_BASE + 21
000000r 2               SID_FC_H          = SID_BASE + 22
000000r 2               SID_RES_FILT      = SID_BASE + 23
000000r 2               SID_MODE_VOLUME   = SID_BASE + 24
000000r 2               SID_POTX          = SID_BASE + 25
000000r 2               SID_POTY          = SID_BASE + 26
000000r 2               SID_OSC3        = SID_BASE + 27
000000r 2               SID_ENV3          = SID_BASE + 28
000000r 2               
000000r 2               ; LED
000000r 2               
000000r 2               LED_DDR = VIA1_DDRA
000000r 2               LED_OUT = VIA1_ORA
000000r 2               LED     = VIA_PA7
000000r 2               
000000r 1                               .include "sid.inc65"
000000r 2               .import sid_init
000000r 2               
000000r 1                               ;.include "lcd.inc65"
000000r 1                               ;.include "keys.inc65"
000000r 1               
000000r 1                               .segment "VECTORS"
000000r 1               
000000r 1  rr rr                        .word   nmi
000002r 1  rr rr                        .word   reset
000004r 1  rr rr                        .word   irq
000006r 1               
000006r 1                               .bss
000000r 1               
000000r 1                               BUFFER_LENGTH = 80
000000r 1  00 00 00 00  buffer:         .res BUFFER_LENGTH + 1, 0
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
000051r 1               
000051r 1                               .code
000000r 1               
000000r 1  4C rr rr     reset:          jmp main
000003r 1               
000003r 1  40           nmi:            rti
000004r 1               
000004r 1  40           irq:            rti
000005r 1               
000005r 1  D8           main:           cld
000006r 1  A2 FF                        ldx #$ff
000008r 1  9A                           txs
000009r 1               
000009r 1  20 rr rr                     jsr acia_init
00000Cr 1  20 rr rr                     jsr sid_init
00000Fr 1               
00000Fr 1                               ;ld16 R0, msg_welcome
00000Fr 1                               ;jsr acia_puts
00000Fr 1               
00000Fr 1  4C rr rr                     jmp play_tune
000012r 1               
000012r 1               ;y = current sid address index
000012r 1               ;x = current data address index
000012r 1               ;set y to 0
000012r 1               ;loop until y = 25
000012r 1               ;read a byte in at x address index
000012r 1               ;send byte to sid y address
000012r 1               ;increment y
000012r 1               ;increment x
000012r 1               ;if y >=25 then set y = 0
000012r 1               ;pause program execution to 50hz.
000012r 1               play_tune:
000012r 1  A9 rr 85 rr                  ld16 R0, song
000016r 1  A9 rr 85 rr  
00001Ar 1  85 rr 48 98                  phay
00001Er 1  48 A5 rr     
000021r 1  A0 FF                        ldy #$ff
000023r 1  20 rr rr     send_next:       jsr next_byte
000026r 1  8D 00 83                     sta SID_VOICE1_FREQ_L
000029r 1  20 rr rr                     jsr next_byte
00002Cr 1  8D 01 83                     sta SID_VOICE1_FREQ_H
00002Fr 1  20 rr rr                     jsr next_byte
000032r 1  8D 02 83                     sta SID_VOICE1_PW_L
000035r 1  20 rr rr                     jsr next_byte
000038r 1  8D 03 83                     sta SID_VOICE1_PW_H
00003Br 1  20 rr rr                     jsr next_byte
00003Er 1  8D 04 83                     sta SID_VOICE1_CTRL
000041r 1  20 rr rr                     jsr next_byte
000044r 1  8D 05 83                     sta SID_VOICE1_AD
000047r 1  20 rr rr                     jsr next_byte
00004Ar 1  8D 06 83                     sta SID_VOICE1_SR
00004Dr 1  20 rr rr                     jsr next_byte
000050r 1  8D 07 83                     sta SID_VOICE2_FREQ_L
000053r 1  20 rr rr                     jsr next_byte
000056r 1  8D 08 83                     sta SID_VOICE2_FREQ_H
000059r 1  20 rr rr                     jsr next_byte
00005Cr 1  8D 09 83                     sta SID_VOICE2_PW_L
00005Fr 1  20 rr rr                     jsr next_byte
000062r 1  8D 0A 83                     sta SID_VOICE2_PW_H
000065r 1  20 rr rr                     jsr next_byte
000068r 1  8D 0B 83                     sta SID_VOICE2_CTRL
00006Br 1  20 rr rr                     jsr next_byte
00006Er 1  8D 0C 83                     sta SID_VOICE2_AD
000071r 1  20 rr rr                     jsr next_byte
000074r 1  8D 0D 83                     sta SID_VOICE2_SR
000077r 1  20 rr rr                     jsr next_byte
00007Ar 1  8D 0E 83                     sta SID_VOICE3_FREQ_L
00007Dr 1  20 rr rr                     jsr next_byte
000080r 1  8D 0F 83                     sta SID_VOICE3_FREQ_H
000083r 1  20 rr rr                     jsr next_byte
000086r 1  8D 10 83                     sta SID_VOICE3_PW_L
000089r 1  20 rr rr                     jsr next_byte
00008Cr 1  8D 11 83                     sta SID_VOICE3_PW_H
00008Fr 1  20 rr rr                     jsr next_byte
000092r 1  8D 12 83                     sta SID_VOICE3_CTRL
000095r 1  20 rr rr                     jsr next_byte
000098r 1  8D 13 83                     sta SID_VOICE3_AD
00009Br 1  20 rr rr                     jsr next_byte
00009Er 1  8D 14 83                     sta SID_VOICE3_SR
0000A1r 1  20 rr rr                     jsr next_byte
0000A4r 1  8D 15 83                     sta SID_FC_L
0000A7r 1  20 rr rr                     jsr next_byte
0000AAr 1  8D 16 83                     sta SID_FC_H
0000ADr 1  20 rr rr                     jsr next_byte
0000B0r 1  8D 17 83                     sta SID_RES_FILT
0000B3r 1  20 rr rr                     jsr next_byte
0000B6r 1  8D 18 83                     sta SID_MODE_VOLUME
0000B9r 1               
0000B9r 1  A2 14                        ldx #$14
0000BBr 1  20 rr rr                     jsr delay_ms
0000BEr 1               
0000BEr 1  4C rr rr                     jmp send_next
0000C1r 1                               ;jsr store_sid
0000C1r 1                               ;bne send_next
0000C1r 1               
0000C1r 1               
0000C1r 1               
0000C1r 1  68 A8 68                     play
0000C4r 1  60                           rts
0000C5r 1               
0000C5r 1  C8           next_byte:       iny
0000C6r 1  B1 rr                        lda (R0), y
0000C8r 1  60                           rts
0000C9r 1               
0000C9r 1               
0000C9r 1  57 65 6C 63  msg_welcome:    .byte "Welcome to the 6502 computer system!", $0d, $0a
0000CDr 1  6F 6D 65 20  
0000D1r 1  74 6F 20 74  
0000EFr 1  50 72 65 73                  .byte "Press P to play a tune.", $0d, $0a
0000F3r 1  73 20 50 20  
0000F7r 1  74 6F 20 70  
000108r 1               
000108r 1               .segment "MUSIC"
000000r 1               song:
000000r 1  00 00 00 00  .incbin "Top_Gun_Anthem.dmp"
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
000000r 1               
